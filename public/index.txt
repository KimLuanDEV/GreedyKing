<!DOCTYPE html>
<html lang="vi">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
  <title>Greedy</title>
  <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600&display=swap" rel="stylesheet">
  <link href="https://fonts.cdnfonts.com/css/digital-7-mono" rel="stylesheet">

<!-- Firebase (nếu bạn chưa nhúng) -->
<script src="https://www.gstatic.com/firebasejs/10.12.4/firebase-app-compat.js"></script>
<script src="https://www.gstatic.com/firebasejs/10.12.4/firebase-firestore-compat.js"></script>
<script>
 const firebaseConfig = {
  apiKey: "AIzaSyAJPIwLBs37ktN8FzlF664mv0Y3fykvkUE",
  authDomain: "greedy-531ca.firebaseapp.com",
  databaseURL: "https://greedy-531ca-default-rtdb.asia-southeast1.firebasedatabase.app",
  projectId: "greedy-531ca",
  storageBucket: "greedy-531ca.firebasestorage.app",
  messagingSenderId: "1067992643519",
  appId: "1:1067992643519:web:6d0ec2b6cfa7dd7217930a",
  measurementId: "G-JVLQC9WS8Q"
};

  if (!firebase.apps.length) firebase.initializeApp(firebaseConfig);
  const db = firebase.firestore();
</script>



</head>

 <style>

#bgVideo {
  position: absolute;
  top: 0; left: 0;
  width: 100%; height: 100%;
  object-fit: cover;
  z-index: -1;  /* đẩy xuống dưới */
  filter: brightness(0.5); /* làm tối để chữ rõ hơn */
}


.neon-btn {
  width: 100%;
  padding: 12px;
  margin-top: 10px;
  border: none;
  border-radius: 10px;
  font-size: 1.1rem;
  font-weight: bold;
  cursor: pointer;
  transition: all 0.3s ease;
  position: relative;
  z-index: 1;
}

/* Nút login (vàng-cam) */
.login-btn {
  background: linear-gradient(145deg, gold, orange);
  color: black;
  box-shadow: 0 0 10px gold, 0 0 20px orange, 0 0 40px red;
}

/* Nút register (xanh neon) */
.register-btn {
  background: linear-gradient(145deg, lime, #00cc66);
  color: black;
  box-shadow: 0 0 10px #00ff99, 0 0 20px #00cc66, 0 0 40px #009933;
}

/* Hover: sáng rực */
.neon-btn:hover {
  transform: scale(1.05);
  box-shadow: 0 0 20px #fff, 0 0 40px currentColor, 0 0 60px currentColor;
  animation: neonPulseBtn 1.5s infinite alternate;
}

/* Animation nhấp nháy */
@keyframes neonPulseBtn {
  from { filter: brightness(1); }
  to   { filter: brightness(1.5); }
}


.neon-title {
  font-size: 1.8rem;
  font-weight: bold;
  text-align: center;
  margin-bottom: 20px;
  animation: neonFlicker 2s infinite alternate;
}

/* Login: vàng cam */
.login-title {
  color: gold;
  text-shadow: 0 0 5px #ffd700, 0 0 10px #ffae00, 0 0 20px #ff6600;
}

/* Register: xanh lá neon */
.register-title {
  color: lime;
  text-shadow: 0 0 5px #00ff00, 0 0 10px #00ff99, 0 0 20px #00cc66;
}

@keyframes neonFlicker {
  0%, 19%, 21%, 23%, 25%, 54%, 56%, 100% {
    opacity: 1;
    text-shadow: 0 0 5px currentColor, 0 0 10px currentColor, 0 0 20px currentColor;
  }
  20%, 24%, 55% {
    opacity: 0.6;
    text-shadow: none;
  }
}


.login-box {
  background: #000;
  padding: 30px;
  border-radius: 15px;
  text-align: center;
  width: 320px;

  /* Viền neon vàng */
  border: 2px solid gold;
  box-shadow: 0 0 25px gold, 0 0 50px orange, 0 0 75px red;
  animation: neonPulse 2s infinite alternate;
}

@keyframes neonPulse {
  0% {
    box-shadow: 0 0 10px gold, 0 0 20px orange, 0 0 30px red;
    border-color: gold;
  }
  50% {
    box-shadow: 0 0 20px gold, 0 0 40px orange, 0 0 60px red;
    border-color: orange;
  }
  100% {
    box-shadow: 0 0 25px gold, 0 0 50px orange, 0 0 75px red;
    border-color: gold;
  }
}


#loginOverlay {
  position: fixed;
  top: 0; left: 0;
  width: 100%; height: 100%;
  animation: casinoGlow 15s ease-in-out infinite;

  /* Ảnh nền casino */
  background: url('https://images.unsplash.com/photo-1511512578047-dfb367046420?ixlib=rb-4.0.3&auto=format&fit=crop&w=1600&q=80') no-repeat center center / cover;

  /* Lớp phủ tối giúp chữ rõ ràng */
  background-color: rgba(0, 0, 0, 0.7);
  background-blend-mode: darken;

  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 10000;
}

@keyframes casinoGlow {
  0%   { background-color: rgba(0,0,0,0.6); }
  50%  { background-color: rgba(0,0,0,0.8); }
  100% { background-color: rgba(0,0,0,0.6); }
}


/* Ngăn chặn bôi đen + hiện menu khi click giữ */
body, .game-container, .bet-box, .door, .wallet, .result, .history, button, input {
  -webkit-user-select: none; /* chặn trên Chrome/Safari */
  -moz-user-select: none;    /* chặn trên Firefox */
  -ms-user-select: none;     /* chặn trên IE/Edge cũ */
  user-select: none;         /* chuẩn */
  -webkit-touch-callout: none; /* chặn menu giữ lâu trên mobile */
}

.door, .chip, .wallet-display {
  flex-shrink: 0;
}

* {
  box-sizing: border-box;
  font-family: 'Poppins', sans-serif;
  }

html {
  overflow-y: scroll; /* luôn hiển thị thanh cuộn dọc */
}


  body {
  margin: 0;
  padding: 20px;
  font-family: 'Poppins', sans-serif;
  background: linear-gradient(135deg, #1a1a1a, #2c2c2c);
  background-size: 400% 400%;
  color: #fff;
  text-align: center;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  justify-content: flex-start;
  align-items: center;
  padding-bottom: 50px;
  animation: softGradient 20s ease infinite;
}



   h1 {
  margin: 30px 0 10px;
  font-size: 3rem;
  color: #ffd700;
  text-shadow: 0 0 10px #ffcc00, 0 0 20px #ff9900, 0 0 30px #cc6600;
  font-weight: 900;
  letter-spacing: 2px;
}



    .wallet {
  background: linear-gradient(145deg, #222, #111);
  border-radius: 15px;
  padding: 15px;
  margin: 20px 0;
  box-shadow: 0 0 20px rgba(255, 215, 0, 0.2);
  width: 430px;
  max-width: unset;
  border: 1px solid #ffd700;
}

.result {
 background: linear-gradient(145deg, #222, #111);
  border-radius: 15px;
  padding: 20px;
  margin: 20px 0;
  box-shadow: 0 0 20px rgba(255, 215, 0, 0.2);
  width: 500px;
  max-width: unset;
  border: 1px solid #ffd700;
}

.history {
 background: linear-gradient(145deg, #222, #111);
  border-radius: 15px;
  padding: 20px;
  margin: 20px 0;
  box-shadow: 0 0 20px rgba(255, 215, 0, 0.2);
  width: 500px;
  max-width: unset;
  border: 1px solid #ffd700;
}

.historyB {
 background: linear-gradient(145deg, #222, #111);
  border-radius: 15px;
  padding: 20px;
  margin: 20px 0;
  box-shadow: 0 0 20px rgba(255, 215, 0, 0.2);
  width: 430px;
  max-width: unset;
  border: 1px solid #ffd700;
  overflow-y: auto;
}

.notification {
 background: linear-gradient(145deg, #222, #111);
  border-radius: 15px;
  padding: 20px;
  margin: 20px 0;
  box-shadow: 0 0 20px rgba(255, 215, 0, 0.2);
  width: 300px;
  max-width: unset;
  border: 1px solid #ffd700;
}

.bet-section {
 background: linear-gradient(145deg, #222, #111);
  border-radius: 15px;
  padding: 20px;
  margin: 20px 0;
  box-shadow: 0 0 20px rgba(255, 215, 0, 0.2);
  width: 500px;
  max-width: unset;
  border: 1px solid #ffd700;
}

    .wallet {
      display: flex;
      flex-direction: column;
      align-items: center;
    }

    .wallet input {
      padding: 10px;
      font-size: 1em;
      width: 150px;
      margin: 5px;
      border-radius: 8px;
      border: none;
    }

    button {
  padding: 12px 20px;
  margin: 5px;
  font-size: 1em;
  font-weight: bold;
  border: 2px solid #ffd700;
  border-radius: 12px;
  background: linear-gradient(145deg, #ffcc00, #cc9900);
  color: #000;
  cursor: pointer;
  box-shadow: 0 0 10px #ffd700, inset 0 0 5px #fff;
  transition: transform 0.2s ease, box-shadow 0.2s ease;
}

button:hover {
  transform: scale(1.05);
  box-shadow: 0 0 15px #fff000, inset 0 0 5px #fff;
}


    .notification {
      margin-top: 10px;
      color: #00ff95;
      font-weight: 600;
    }

    .bet-section {
  display: flex;
  flex-wrap: wrap;
  justify-content: space-between;
  gap: 15px;
}

  .bet-box {
  flex: 1 0 calc(25% - 15px);
  max-width: calc(25% - 15px);
  background: linear-gradient(145deg, #ffd700, #ffcc00); /* vàng kim */
  border: 2px solid #fff8dc;
  border-radius: 12px;
  padding: 12px;
  box-shadow: 0 0 15px rgba(255, 215, 0, 0.6), inset 0 0 5px rgba(255, 255, 255, 0.4);
  transition: all 0.3s ease;
  color: #000; /* để chữ và input rõ hơn trên nền vàng */
}

.bet-box, .door {
  position: relative;
}


/* Nhãn HOT chung */
.bet-box .hot-label,
.door .hot-label {
  position: absolute;
  top: -15px;               /* dán ngay trên viền trên */
  left: 80%;
  transform: translateX(-50%);
  padding: 2px 4px;
  font-size: 12px;
  font-weight: bold;
  color: #fff;
  background: red;
  border: 2px solid gold;  /* giống khung vàng */
  border-radius: 6px;
  text-shadow: 0 0 5px yellow, 0 0 10px orange;
  animation: pulseHot 1s infinite;
  pointer-events: none;    /* tránh che thao tác */
  z-index: 9999;
}

@keyframes pulseHot {
  0%   { transform: scale(1); opacity: 1; }
  50%  { transform: scale(1.1); opacity: 0.6; }
  100% { transform: scale(1); opacity: 1; }
}


.bet-box .icon {
  font-size: 2.5rem;  /* icon to hơn */
  display: block;
  margin-bottom: 5px;
}

.bet-box:hover {
  transform: scale(1.02);
  box-shadow: 0 0 20px rgba(255, 223, 0, 0.9), inset 0 0 8px rgba(255, 255, 255, 0.6);
}

@media (max-width: 768px) 
{
  .bet-box {
    flex: 1 0 calc(50% - 15px);
    max-width: calc(50% - 15px);
  }
}
    .bet-box label {
      display: flex;
      flex-direction: column;
      font-weight: 600;
    }

    .bet-box input {
      margin-top: 5px;
      padding: 5px;
      font-size: 1em;
      border-radius: 8px;
      border: none;
      text-align: center;
    }

    .result {
      font-size: 1.3em;
      font-weight: 600;
      border: 2px solid #f0c330;
    }

    .history {
      text-align: left;
      font-size: 0.95em;
      background: #1d1d2c;
      max-height: 120px;
      max-width: 455px
    }

 .historyB {
      text-align: left;
      font-size: 0.95em;
      background: #1d1d2c;
      max-height: 120px;
      max-width: 455px
    }

.time-display {
  margin-top: 10px;
  font-size: 1.3rem;
  font-weight: bold;
  color: #ffcc00;
  text-shadow: 0 0 5px #fff000;
}


@keyframes smallWinFlash {
  0%, 100% { background-color: transparent; }
  50% { background-color: rgba(0, 255, 100, 0.3); }
}

@keyframes bigWinFlash {
  0%, 100% { background-color: transparent; transform: scale(1); }
  50% {
    background-color: rgba(255, 255, 0, 0.4);
    transform: scale(1.2);
  }
}

.small-win-effect {
  animation: smallWinFlash 1s ease-in-out 2;
  border: 2px solid #00ff95 !important;
}

.big-win-effect {
  animation: bigWinFlash 0.8s ease-in-out 3;
  border: 3px solid #ffd700 !important;
}



#jackpotEffect {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  pointer-events: none;
  z-index: 9999;
  overflow: hidden;
}

/* Coin bay */
.coin {
  position: absolute;
  width: 30px;
  height: 30px;
  background-image: url('https://cdn-icons-png.flaticon.com/512/138/138292.png');
  background-size: contain;
  background-repeat: no-repeat;
  animation: flyCoin 1.5s ease-out forwards;
}

@keyframes flyCoin {
  0% {
    transform: translate(0, 0) scale(1) rotate(0deg);
    opacity: 1;
  }
  100% {
    transform: translate(var(--x), var(--y)) scale(1.3) rotate(720deg);
    opacity: 0;
  }
}

/* Firework burst nhiều màu */
.firework {
  position: absolute;
  width: 10px;
  height: 10px;
  background-color: var(--color);
  border-radius: 50%;
  animation: firework 1s ease-out forwards;
}

@keyframes firework {
  0% {
    transform: scale(1);
    opacity: 1;
  }
  100% {
    transform: scale(6);
    opacity: 0;
  }
}

/* Mưa xu */
.rain-coin {
  position: absolute;
  top: -50px;
  width: 24px;
  height: 24px;
  background-image: url('https://cdn-icons-png.flaticon.com/512/138/138292.png');
  background-size: contain;
  background-repeat: no-repeat;
  animation: coinRain linear forwards;
}

@keyframes coinRain {
  to {
    transform: translateY(120vh) rotate(720deg);
    opacity: 0;
  }
}


@keyframes softGradient {
  0% { background-position: 0% 50%; }
  50% { background-position: 100% 50%; }
  100% { background-position: 0% 50%; }
}


@keyframes spinShake {
  0% { transform: rotate(0deg); }
  25% { transform: rotate(3deg); }
  50% { transform: rotate(-3deg); }
  75% { transform: rotate(3deg); }
  100% { transform: rotate(0deg); }
}
.spin-animating {
  animation: spinShake 0.2s ease-in-out infinite;
}


#jackpotProgress {
  height: 15px;
  border-radius: 10px;
  border: 1px solid #ffd700;
  background-color: #333;
}

#jackpotProgress::-webkit-progress-value {
  background-color: gold;
  border-radius: 10px;
}


@keyframes luxuryFlash {
  0% {
    box-shadow: 0 0 0px gold, inset 0 0 0px #fff;
    background: rgba(255, 215, 0, 0.05);
    transform: scale(1);
  }
  50% {
    box-shadow: 0 0 15px 5px gold, inset 0 0 10px #fff8dc;
    background: rgba(255, 215, 0, 0.1);
    transform: scale(1.03);
  }
  100% {
    box-shadow: 0 0 0px gold, inset 0 0 0px #fff;
    background: rgba(255, 215, 0, 0.05);
    transform: scale(1);
  }
}

.bet-box.highlight-win {
  animation: luxuryFlash 1s ease-in-out 3;
  border: 2px solid gold;
  border-radius: 12px;
  transition: all 0.3s ease;
  position: relative;
  z-index: 2;
}




.glow {
  box-shadow: 0 0 20px 5px #ffd700, inset 0 0 10px #fff;
  animation: pulseGlow 1s infinite alternate;
}

@keyframes pulseGlow {
  0% { box-shadow: 0 0 10px #ffd700; }
  100% { box-shadow: 0 0 25px #fff000; }
}


#wheel-container {
  display: none;
  position: relative;
  width: 300px;
  height: 300px;
  margin: 30px auto;
}

#wheel {
  display: none;
  width: 100%;
  height: 100%;
  border-radius: 50%;
  border: 5px solid gold;
  position: relative;
  transition: transform 4s cubic-bezier(0.33, 1, 0.68, 1);
  background: repeating-conic-gradient(#f8c200 0deg 45deg, #ffe680 45deg 90deg);
  overflow: hidden;
}

#wheel .segment {
  position: absolute;
  width: 50%;
  height: 50%;
  top: 50%;
  left: 50%;
  transform-origin: 0% 0%;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 1.6em;
  font-weight: bold;
  color: #000;
  padding-left: 75px; /* giúp icon không bị ra sát viền */
 
}


#pointer {
  position: absolute;
  top: -20px;
  left: 50%;
  transform: translateX(-50%);
  font-size: 2rem;
}

.game-container {
  border: 4px solid gold;
  border-radius: 100px;
  padding: 20px;
  margin: 0;
  width: 1200px;  
  height: auto;    
  background: #000;  /* NỀN ĐEN */
  box-shadow: 0 0 25px 5px gold, inset 0 0 15px #fff5cc;
  display: flex;
  flex-direction: row; /* <-- CHIA NGANG */
  gap: 20px;
  justify-content: space-between;
  align-items: flex-start;
  border-radius: 20px;    /* bo góc đẹp hơn */
}

/* Bên trái (vòng quay + kết quả) */
.left-panel {
  flex: 2;
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 10px;
}

/* Bên phải (cược + ví + lịch sử) */
.right-panel {
  flex: 1.2;
  display: flex;
  flex-direction: column;
  gap: 10px;
  
}


/* Cho màn hình nhỏ thì tự động xuống hàng */
@media (max-width: 900px) {
  .game-container {
    flex-direction: column;
    align-items: center;
  }
}


@keyframes blink {
  0% { opacity: 1; }
  50% { opacity: 0; }
  100% { opacity: 1; }
}

.blink {
  color: red !important;
  animation: blink 1s infinite;
}


@keyframes blinkYellow {
  0% { color: gold; opacity: 1; }
  50% { color: orange; opacity: 0.3; }
  100% { color: gold; opacity: 1; }
}

.blink-yellow {
  animation: blinkYellow 1s infinite;
  font-weight: bold;
}

#spinCounter {
  margin: 10px 0;
  font-weight: bold;
  color: #ffcc00;
}

.chip-selector {
  display: flex !important;        /* ép buộc dùng flex */
  flex-direction: row !important;  /* xếp hàng ngang */
  justify-content: center;         /* căn giữa ngang */
  align-items: center;             /* căn giữa dọc */
  gap: 15px;                       /* khoảng cách giữa chip */
  margin: 20px 0;
}

.chip {
  flex: 0 0 auto; /* đảm bảo không bị co dọc */
  width: 70px;
  height: 70px;
  border-radius: 50%;
  background: radial-gradient(circle at 30% 30%, gold, orange);
  color: #222;
  font-weight: bold;
  font-size: 16px;
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  box-shadow: 0 4px 8px rgba(0,0,0,0.3);
  transition: transform 0.2s, border 0.2s;
}

.chip:hover {
  transform: scale(1.15);
}

.chip.active {
  border: 4px solid red;
  transform: scale(1.2);
}


#betForm {
  display: flex;
  flex-wrap: wrap;
  gap: 10px;
  margin-top: 15px;
}
.bet-cell {
  flex: 1 1 22%;
  padding: 10px;
  background: #f9f9f9;
  border: 2px solid #ccc;
  border-radius: 10px;
  text-align: center;
  cursor: pointer;
  font-weight: bold;
  transition: all 0.2s;
}
.bet-cell:hover {
  background: #e8ffe8;
  border-color: #6c3;
}
.bet-amount {
  display: block;
  font-size: 14px;
  margin-top: 5px;
  color: #333;
}


.lock-bets {
  pointer-events: none;
  opacity: 0.5;
}

#bankInfo {
  background: linear-gradient(145deg, #111, #222);
  border: 2px solid gold;
  border-radius: 12px;
  padding: 15px;
  color: #fff;
  font-size: 1.1em;
  box-shadow: 0 0 15px rgba(255,215,0,0.3);
  animation: fadeIn 0.5s ease;
}

@keyframes fadeIn {
  from { opacity: 0; transform: translateY(-10px); }
  to   { opacity: 1; transform: translateY(0); }
}

#withdrawPanel {
  background: linear-gradient(145deg, #111, #222);
  border: 2px solid gold;
  border-radius: 12px;
  padding: 15px;
  color: #fff;
  font-size: 1.1em;
  box-shadow: 0 0 15px rgba(255,215,0,0.3);
  animation: fadeIn 0.5s ease;
}

/* Icon trong lịch sử kết quả */
.history .result-item {
  font-size: 1.8rem;   /* tăng kích thước icon */
  margin: 3px;       /* tạo khoảng cách giữa các icon */
  display: inline-block;
}

/* Icon trong ô hiển thị kết quả chính */
.result-display {
  font-size: 4rem;   /* tăng kích thước icon kết quả */
  text-align: center;
  display: flex;
  align-items: center;
  justify-content: center;
}

/*Trục 8 cửa*/
.stage {
 position: relative;
 width: 450px;
 height: 450px;
 flex-shrink: 0; /* không bị co khi màn hình hẹp */
 }

.hub {
  position: absolute;
  left: 51%;
  top: 50%;
  width: 100px;
  height: 100px;
  border-radius: 50%;
  transform: translate(-50%, -50%);
  display: flex;
  justify-content: center;
  align-items: center;
  font-weight: bold;
  font-size: 22px;
  color: #333;
  z-index: 3;

  /* nền kim loại sáng */
  background: radial-gradient(circle at 30% 30%, #ffffff, #d1d5db);

  /* viền vàng + ánh sáng */
  border: 6px solid transparent;
  background-clip: padding-box;
  box-shadow:
    0 0 15px rgba(255, 215, 0, 0.7),
    inset 0 2px 6px rgba(0,0,0,0.25);
}

/* vòng ngoài vàng */
.hub::before {
  content: "";
  position: absolute;
  inset: -6px;
  border-radius: 50%;
  background: linear-gradient(45deg, #fbbf24, #f59e0b, #fbbf24);
  z-index: -1;
  box-shadow: 0 0 15px rgba(251,191,36,0.8);
}

/* chữ nổi 3D */
.hub span {
  color: #333;
  text-shadow:
    1px 1px 2px rgba(0,0,0,0.3),   /* bóng nhẹ */
    -1px -1px 2px rgba(255,255,255,0.8); /* viền sáng */
}

.doors, .spokes {
  position: absolute;
  left: 50%; top: 50%;
  width: 100%; height: 100%;
  transform: translate(-50%, -50%);
}
 
.door {
  position: absolute;
  left: 40%;
  top: 39%;
  width: 100px;
  height: 100px;
  background: #fff;
  border: 3px solid #2563eb;
  border-radius: 50%;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  font-weight: bold;
  text-align: center;
  transform-origin: center center;
  box-shadow: 0 3px 8px rgba(0,0,0,0.15);
  z-index: 2;
}

.door .hot-label {
  position: absolute;
  top: 0px;             /* đặt sát ngay trên viền */
  left: 30%;
  transform: translateX(-50%);
  padding: 2px 4px;
  font-size: 10px;
  font-weight: bold;
  color: #fff;
  background: red;
  border: 1px solid gold;  /* tạo khung vàng như viền ô */
  border-radius: 20px;
  text-shadow: 0 0 3px yellow, 0 0 10px orange;
  animation: pulseHot 1s infinite;
  pointer-events: none;   /* không che click vào ô */
  z-index: 9999;             /* nổi trên viền */
}


.door::before {
  content: "";
  position: absolute;
  inset: 0;
  border-radius: 70%;
  padding: 4px;
  background: linear-gradient(135deg, #fcd34d, #f59e0b, #fcd34d);
  -webkit-mask: 
  linear-gradient(#fff 0 0) content-box, 
  linear-gradient(#fff 0 0);
  -webkit-mask-composite: xor;
  mask-composite: exclude;
}

.door img {
  width: 45px;
  height: 45px;
  margin-bottom: 3px;
}

.door span {
  font-size: 10px;
  border-radius: 10px;
  padding: 2px 5px;
}


.door:hover {
  transform: scale(1.1);
  box-shadow: 0 8px 18px rgba(0,0,0,0.35), inset 0 3px 6px rgba(255,255,255,0.5);
}


/* Nan đôi phát sáng */
.spoke {
  position: absolute;
  left: 50%;
  top: 50%;
  width: 8px;    
  height: 100px; 
  background: repeating-linear-gradient(
    to right,
    #3b82f6, #3b82f6 2px,
    transparent 2px, transparent 6px
  );
  transform-origin: center top;
  z-index: 1;
  border-radius: 3px;
  box-shadow: 0 0 8px rgba(59, 130, 246, 0.8); /* glow xanh */
}

.door:nth-child(1) { background: radial-gradient(circle, #fde68a, #d97706); }
.door:nth-child(2) { background: radial-gradient(circle, #fde68a, #d97706); }
.door:nth-child(3) { background: radial-gradient(circle, #fde68a, #d97706); }
.door:nth-child(4) { background: radial-gradient(circle, #fde68a, #d97706); }
.door:nth-child(5) { background: radial-gradient(circle, #fde68a, #d97706); }
.door:nth-child(6) { background: radial-gradient(circle, #fde68a, #d97706); }
.door:nth-child(7) { background: radial-gradient(circle, #fde68a, #d97706); }
.door:nth-child(8) { background: radial-gradient(circle, #fde68a, #d97706); }

.door.dim {
  opacity: 0.2;
  filter: grayscale(100%);
  transition: all 0.2s ease;
}

.door.highlight {
  opacity: 1 !important;
  filter: none !important;
  box-shadow: 0 0 30px 10px yellow, inset 0 0 10px #fff;
  border-radius: 50%;
  transition: all 0.2s ease;
}

/* Hiệu ứng cho ảnh trúng thưởng */
.door.winner img {
  border: 5px solid gold;
  border-radius: 50%;
  box-shadow: 0 0 30px 15px lime;
  animation: blinkWinner 0.6s infinite;
}

@keyframes blinkWinner {
  0%   { transform: scale(1);   box-shadow: 0 0 10px 5px yellow; }
  50%  { transform: scale(1.2); box-shadow: 0 0 30px 15px lime; }
  100% { transform: scale(1);   box-shadow: 0 0 10px 5px yellow; }
}


/* Animation viền sáng */
@keyframes glowBox {
  0% {
  box-shadow: 0 0 10px gold, 0 0 20px #ffcc00, 0 0 30px #ff9900;
  }
  100% {
  box-shadow: 0 0 20px #fff000, 0 0 35px gold, 0 0 50px orange;
  }
}

/* Overlay */
#resultModal {
  display: none;
  position: fixed;
  top:0; left:0;
  width:100%; height:100%;
  background: rgba(0,0,0,0.7);
  justify-content:center;
  align-items:center;
  z-index:3000;
  opacity: 0;
  transition: opacity 0.5s ease;
}

/* Khi hiển thị */
#resultModal.show {
  display: flex;
  opacity: 1;
}

/* Khi ẩn */
#resultModal.hide {
  opacity: 0;
  transition: opacity 0.5s ease;
}

/* Hộp thông báo sang trọng */
#resultModal .modal-box {
  background: linear-gradient(145deg, #111, #222);
  color:#fff; 
  padding:25px; 
  border-radius:20px; 
  text-align:center; 
  width:380px; 
  border:3px solid gold; 
  box-shadow: 0 0 30px gold, inset 0 0 15px #ffecb3;
  animation: glowBox 1.5s infinite alternate;
  position: relative;
  overflow: hidden;
}

/* Hiệu ứng ánh sáng di chuyển */
#resultModal .modal-box::before {
  content: "";
  position: absolute;
  top: -50%; left: -50%;
  width: 200%; height: 200%;
  background: conic-gradient(from 180deg, gold, transparent 80%);
  animation: rotateShine 6s linear infinite;
  opacity: 0.3;
}

@keyframes rotateShine {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

/* Animation viền sáng */
@keyframes glowBox {
  0% {
    box-shadow: 0 0 15px gold, 0 0 30px #ffcc00, 0 0 45px #ff9900;
  }
  100% {
    box-shadow: 0 0 25px #fff000, 0 0 50px gold, 0 0 70px orange;
  }
}

/* Tiêu đề */
#resultModal h2 {
  font-size: 1.8rem;
  color: gold;
  text-shadow: 0 0 10px gold, 0 0 20px orange;
  margin-bottom: 15px;
}

/* Icon kết quả */
#modalResult {
  font-size: 3rem;
  margin: 15px 0;
  animation: pulseIcon 1s infinite alternate;
}

@keyframes pulseIcon {
  from { transform: scale(1); text-shadow: 0 0 10px gold; }
  to   { transform: scale(1.2); text-shadow: 0 0 25px yellow; }
}

/* Nút đóng */
#resultModal button {
  margin-top:15px; 
  padding:10px 20px; 
  background: linear-gradient(145deg, gold, orange);
  color:black; 
  font-weight:bold; 
  border-radius:12px; 
  border:none;
  cursor:pointer;
  box-shadow: 0 0 15px gold;
  transition: transform 0.2s ease;
}
#resultModal button:hover {
  transform: scale(1.1);
  box-shadow: 0 0 25px #fff000;
}

.wallet-display {
  display: flex;
  flex-direction: column;
  gap: 15px;
  margin: 15px 0;
}

.balance-box, .jackpot-box {
  display: flex;
  align-items: center;
  gap: 10px;
  padding: 12px 18px;
  border-radius: 15px;
  border: 2px solid #fff8dc;
  background: linear-gradient(145deg, #ffd700, #ffcc00);
  box-shadow: 0 0 20px rgba(255,215,0,0.6), inset 0 0 10px rgba(255,255,255,0.5);
  animation: glowBox 2s infinite alternate;
}

.balance-icon, .jackpot-icon {
  font-size: 2rem;
}

.balance-label, .jackpot-label {
  font-size: 0.9rem;
  color: #222;
}

.balance-value, .jackpot-value {
  font-size: 1.6rem;
  font-weight: bold;
  color: #000;
  text-shadow: 0 0 5px #fff, 0 0 10px gold;
}

.jackpot-info progress {
  width: 100%;
  height: 12px;
  border-radius: 8px;
  margin-top: 6px;
}

.jackpot-info progress::-webkit-progress-value {
  background: linear-gradient(90deg, gold, orange);
  border-radius: 8px;
}

@keyframes glowBox {
  from { box-shadow: 0 0 15px gold, inset 0 0 6px #fff; }
  to   { box-shadow: 0 0 30px orange, inset 0 0 12px #fff8dc; }
}


.stats-box {
  display: flex;
  justify-content: space-between;
  background: linear-gradient(145deg, #111, #222);
  padding: 12px 18px;
  border-radius: 15px;
  border: 2px solid gold;
  box-shadow: 0 0 12px rgba(255,215,0,0.3), inset 0 0 8px rgba(255,255,255,0.1);
  font-weight: bold;
  font-size: 1.1rem;
}

.stat-item {
  display: flex;
  align-items: center;
  gap: 8px;
}

.stat-icon {
  font-size: 1.3rem;
}

.stat-value.profit {
  color: #00ff95;
  text-shadow: 0 0 5px #00ff95, 0 0 10px #0f0;
}

.stat-value.loss {
  color: #ff4d4d;
  text-shadow: 0 0 5px #ff4d4d, 0 0 10px #f00;
}

.flash-update {
 animation: flashUpdate 0.6s ease-in-out;
}

@keyframes flashUpdate {
  0%   { color: #fff; text-shadow: 0 0 10px gold, 0 0 20px orange; transform: scale(1.1); }
  50%  { color: #ffd700; text-shadow: 0 0 20px #fff000, 0 0 30px gold; transform: scale(1.2); }
  100% { color: inherit; text-shadow: none; transform: scale(1); }
}


/* Fade + zoom khi mở */
@keyframes modalFadeIn {
  from { opacity: 0; transform: scale(0.8); }
  to   { opacity: 1; transform: scale(1); }
}

/* Fade-out khi đóng */
@keyframes modalFadeOut {
  from { opacity: 1; transform: scale(1); }
  to   { opacity: 0; transform: scale(0.8); }
}

.modal-box {
  animation: modalFadeIn 0.3s ease forwards;
}

#depositConfirmModal.show .modal-box {
  animation: modalFadeIn 0.3s ease forwards;
}

#depositConfirmModal.hide .modal-box {
  animation: modalFadeOut 0.3s ease forwards;
}

.door .bet-display {
  position: absolute;
  bottom: -5px;
  font-size: 14px;
  font-weight: bold;
  color: #fff;
  background: rgba(0,0,0,0.6);
  padding: 2px 6px;
  border-radius: 8px;
  border: 1px solid gold;
  text-shadow: 0 0 5px gold;
}

.door.locked {
  pointer-events: none;
  opacity: 0.5;
  filter: grayscale(100%);
}

/* Modal History Bet */
.historyBetModal {
  display: none;
  position: fixed;
  top:0; left:0;
  width:100%; height:100%;
  background: rgba(0,0,0,0.6);
  justify-content:center;
  align-items:center;
  z-index:6000;
  opacity: 0;
  transition: opacity 0.3s ease;
}

/* Khi hiển thị */
.historyBetModal.show {
  display: flex;
  opacity: 1;
}

/* Khi ẩn */
.historyBetModal.hide {
  opacity: 0;
}

.arrow-icon {
  cursor: pointer;
  margin-left: 6px;
  transition: transform 0.3s ease;
}

.arrow-icon.open {
  transform: rotate(90deg); /* quay sang xuống dưới */
}

/* Ẩn modal mặc định */
#confirmConvertModal {
  display: none;
  opacity: 0;
  transition: opacity 0.3s ease;
}

/* Hộp modal (zoom-in khi hiện) */
#confirmConvertModal .modal-box {
  transform: scale(0.8);
  transition: transform 0.3s ease;
}

/* Khi modal hiện */
#confirmConvertModal.show {
  display: flex;
  opacity: 1;
}

#confirmConvertModal.show .modal-box {
  transform: scale(1);
}


.user-info {
  display: flex;
  align-items: center;
  gap: 12px;
  padding: 12px 18px;
  border-radius: 15px;
  border: 2px solid #fff8dc;
  background: linear-gradient(145deg, #222, #111);
  box-shadow: 0 0 15px rgba(255,215,0,0.4);
  margin-bottom: 15px;
  text-align: left;
}

.user-avatar {
  width: 60px;
  height: 60px;
  border-radius: 50%;
  border: 2px solid gold;
  box-shadow: 0 0 10px gold;
}

.user-details {
  display: flex;
  flex-direction: column;
  color: #fff;
  font-weight: bold;
}

.user-name, .user-id {
  font-size: 1rem;
}


.avatar-btn {
  margin-top: 6px;
  padding: 5px 10px;
  font-size: 0.85rem;
  border-radius: 8px;
  border: none;
  cursor: pointer;
  background: linear-gradient(145deg, gold, orange);
  color: #000;
  font-weight: bold;
  box-shadow: 0 0 10px gold;
  transition: transform 0.2s ease;
  width: 130px;
  text-align: center;
}

.avatar-btn:hover {
  transform: scale(1.05);
  box-shadow: 0 0 15px #fff000;
}


/* Hiệu ứng modal xuất hiện/biến mất */
#changeNameModal { opacity:0; transition: opacity .25s ease; }
#changeNameModal.show { display:flex !important; opacity:1; }

.rename-box { transform: scale(.94); transition: transform .25s ease; }
#changeNameModal.show .rename-box { transform: scale(1); }

/* Trạng thái lỗi input */
#newNameInput.input-error { border-color:#ff6b6b !important; box-shadow:0 0 0 3px rgba(255,107,107,.15); }

.payout-table {
  background: linear-gradient(145deg, #222, #111);
  border: 2px solid gold;
  border-radius: 18px;
  padding: 20px;
  margin: 20px auto;
  width: 400px;
  color: #fff;
  box-shadow: 0 0 15px rgba(255,215,0,0.3);
}
.payout-table h2 {
  color: gold;
  text-align: center;
  margin-bottom: 10px;
}
.payout-table table {
  width: 100%;
  border-collapse: collapse;
}
.payout-table th, .payout-table td {
  padding: 9px;
  border: 1px solid gold;
  text-align: center;
}
.payout-table th {
  background: #333;
  color: #ffd700;
}


/* Container ngang */
.top-winners-list {
  display: flex;
  gap: 20px;
  justify-content: space-around;
  flex-wrap: nowrap;   /* hoặc wrap nếu muốn xuống dòng khi nhỏ */
  margin-top:10px;
}

/* Mỗi ô top */
.top-winner-card {
  flex: 3;
  min-width: 0;
  background: rgba(255,215,0,0.08);
  border: 1px solid gold;
  border-radius: 12px;
  padding: 12px;
  text-align: center;
  box-shadow:0 0 8px rgba(255,215,0,.3);
}

.top-winner-rank {
  font-weight: bold;
  color: gold;
  font-size: 1.1rem;
}

.top-winner-avatar {
  width: 48px; height: 48px;
  border-radius: 50%;
  border:2px solid gold;
  margin: 4px auto;
  display: block;
}

.top-winner-name {
  font-weight: 800;
  margin-top: 4px;
}

.top-winner-meta {
  font-size: .85rem;
  opacity: .85;
}

.top-winner-amount {
  margin-top: 4px;
  font-weight: 900;
  color: #ffd700;
  text-shadow:0 0 6px #fff000;
}

/* Màu huy chương theo hạng */
.top-winner-card.rank-1 {
  border-color: #FFD700;
  background: linear-gradient(160deg, rgba(255,215,0,.18), rgba(255,215,0,.05));
  box-shadow: 0 0 16px rgba(255,215,0,.35);
}
.top-winner-card.rank-2 {
  border-color: #C0C0C0;
  background: linear-gradient(160deg, rgba(192,192,192,.18), rgba(192,192,192,.05));
  box-shadow: 0 0 12px rgba(192,192,192,.3);
}
.top-winner-card.rank-3 {
  border-color: #CD7F32; /* bronze */
  background: linear-gradient(160deg, rgba(205,127,50,.18), rgba(205,127,50,.05));
  box-shadow: 0 0 10px rgba(205,127,50,.28);
}

/* Hàng đầu nổi bật nhẹ */
.top-winner-card.pulse {
  animation: popPulse .9s ease-in-out;
}
@keyframes popPulse {
  0%   { transform: scale(0.96); }
  60%  { transform: scale(1.02); }
  100% { transform: scale(1); }
}

/* Trang trí tiêu đề hạng */
.top-winner-rank {
  display:flex; align-items:center; justify-content:center; gap:6px;
}
.top-winner-rank .medal {
  font-size: 1.05rem;
}






/* ==== CASINO GAME BACKDROP (toàn trang) ==== */
body::before {
  content: "";
  position: fixed;
  inset: 0;
  z-index: -3;
  /* Ảnh nền casino bokeh (nhẹ, không phân tán mắt) */
  background: url("https://images.unsplash.com/photo-1549918864-48ac978761a0?q=80&w=1920&auto=format&fit=crop") center / cover no-repeat fixed;
  filter: brightness(0.35) saturate(1.15);
}

/* Lớp ánh sáng ambient chuyển động nhẹ */
body::after {
  content: "";
  position: fixed;
  inset: -10%;
  z-index: -2;
  pointer-events: none;
  background:
    radial-gradient(40vmax 40vmax at 15% 25%, rgba(255,215,0,.14), transparent 60%),
    radial-gradient(35vmax 35vmax at 85% 20%, rgba(255,0,80,.12), transparent 60%),
    radial-gradient(45vmax 45vmax at 30% 85%, rgba(0,255,170,.12), transparent 60%),
    radial-gradient(40vmax 40vmax at 80% 80%, rgba(0,120,255,.12), transparent 60%);
  animation: ambientFloat 18s ease-in-out infinite alternate;
  filter: blur(2px);
}

@keyframes ambientFloat {
  0%   { transform: translate3d(0, 0, 0) scale(1); }
  100% { transform: translate3d(1.5%, -1.5%, 0) scale(1.03); }
}

/* ==== GAME CONTAINER: glass + viền vàng sang trọng ==== */
.game-container {
  background: rgba(0,0,0,0.55) !important; /* thay nền đen đặc bằng glass */
  backdrop-filter: blur(8px) saturate(1.2);
  -webkit-backdrop-filter: blur(8px) saturate(1.2);
  border: 2px solid rgba(255,215,0,0.7) !important;
  border-radius: 24px !important;
  box-shadow:
    0 10px 40px rgba(0,0,0,0.6),
    0 0 22px rgba(255,215,0,0.18),
    inset 0 0 15px rgba(255,255,255,0.06) !important;
  padding: 22px !important;
}

/* Vành “đèn mềm” quanh container (nhẹ hơn marquee để không loá) */
.game-container::before {
  content: "";
  position: absolute;
  inset: -6px;
  border-radius: 26px;
  background:
    radial-gradient(12px 12px at 30px 30px, rgba(255,215,0,.25), transparent 70%) repeat,
    radial-gradient(12px 12px at 50% 50%, rgba(255,120,0,.15), transparent 70%) repeat;
  background-size: 120px 120px, 160px 160px;
  mask: linear-gradient(#000 0 0) content-box, linear-gradient(#000 0 0);
  -webkit-mask: linear-gradient(#000 0 0) content-box, linear-gradient(#000 0 0);
  padding: 6px;
  opacity: .35;
  pointer-events: none;
  animation: softRun 8s linear infinite;
}
@keyframes softRun {
  to { background-position: 120px 0, 0 160px; }
}

/* ==== KHU VỰC VÒNG QUAY: hiệu ứng bàn casino / vầng sáng trung tâm ==== */
.stage {
  position: relative;
  border-radius: 50%;
  isolation: isolate;
}

/* Vầng sáng mặt bàn và viền nhung nhẹ */
.stage::before {
  content: "";
  position: absolute;
  inset: -12px;
  border-radius: 50%;
  background:
    radial-gradient(closest-side, rgba(255,215,0,.12), transparent 70%),
    radial-gradient(100% 60% at 50% 40%, rgba(0,0,0,.35), transparent 60%);
  z-index: 0;
  pointer-events: none;
  filter: blur(0.3px);
}

/* Vignette trong bàn: tập trung mắt về tâm */
.stage::after {
  content: "";
  position: absolute;
  inset: 0;
  border-radius: 50%;
  background: radial-gradient(70% 70% at 50% 50%, transparent 60%, rgba(0,0,0,.35) 100%);
  z-index: 1;
  pointer-events: none;
}


/* ==== Chỉnh nhẹ tiêu đề, đồng hồ cho hợp nền mới ==== */
h1 {
  text-shadow: 0 0 14px rgba(255,215,0,.45), 0 0 26px rgba(255,140,0,.25);
}
.time-display {
  text-shadow: 0 0 8px rgba(255,255,255,.25);
}


.game-container {
  position: relative;
  background: rgba(15, 15, 15, 0.6); /* nền trong suốt nhẹ */
  backdrop-filter: blur(10px) saturate(1.3);
  -webkit-backdrop-filter: blur(10px) saturate(1.3);

  border-radius: 28px;
  border: 2px solid rgba(255, 215, 0, 0.8);

  box-shadow:
    0 0 30px rgba(255, 215, 0, 0.25),
    inset 0 0 20px rgba(255, 255, 255, 0.05),
    0 12px 40px rgba(0, 0, 0, 0.7);

  padding: 24px;
  margin: 20px auto;
  max-width: 1250px;

  overflow: hidden; /* để hiệu ứng ánh sáng không tràn */
}

/* Viền vàng gradient động */
.game-container::before {
  content: "";
  position: absolute;
  inset: -2px;
  border-radius: 30px;
  padding: 2px;
  background: linear-gradient(130deg, gold, orange, red, gold);
  background-size: 300% 300%;
  animation: borderShift 12s linear infinite;
  -webkit-mask:
    linear-gradient(#000 0 0) content-box,
    linear-gradient(#000 0 0);
  -webkit-mask-composite: xor;
  mask-composite: exclude;
  z-index: 0;
}

@keyframes borderShift {
  0%   { background-position: 0% 50%; }
  50%  { background-position: 100% 50%; }
  100% { background-position: 0% 50%; }
}

/* Hiệu ứng ánh sáng quét ngang */
.game-container::after {
  content: "";
  position: absolute;
  top: 0;
  left: -75%;
  width: 50%;
  height: 100%;
  background: linear-gradient(
    120deg,
    rgba(255, 255, 255, 0.0) 0%,
    rgba(255, 255, 255, 0.15) 50%,
    rgba(255, 255, 255, 0.0) 100%
  );
  transform: skewX(-20deg);
  animation: shineSweep 8s infinite;
  z-index: 1;
}

@keyframes shineSweep {
  0%   { left: -75%; }
  50%  { left: 125%; }
  100% { left: 125%; }
}

/* Nội dung trong container luôn nổi phía trên */
.game-container > * {
  position: relative;
  z-index: 2;
}

/* LED nhấp nháy quanh game-container */
.game-container::before,
.game-container::after,
.game-container .led-frame {
  pointer-events: none; /* không ảnh hưởng click */
}

.led-frame {
  position: absolute;
  inset: -12px;
  border-radius: 34px;
  padding: 12px;
  z-index: 3;

  /* Tạo LED nhỏ quanh viền bằng radial-gradient */
  background:
    radial-gradient(circle, rgba(255,255,0,0.9) 60%, transparent 62%) top    / 28px 28px repeat-x,
    radial-gradient(circle, rgba(255,0,0,0.9)   60%, transparent 62%) bottom / 28px 28px repeat-x,
    radial-gradient(circle, rgba(0,255,100,0.9) 60%, transparent 62%) left   / 28px 28px repeat-y,
    radial-gradient(circle, rgba(0,120,255,0.9) 60%, transparent 62%) right  / 28px 28px repeat-y;

  animation: ledBlink 1.5s steps(2) infinite;
  border-radius: inherit;
}

/* Nhấp nháy LED */
@keyframes ledBlink {
  0%, 100% {
    filter: brightness(1);
    opacity: 1;
  }
  50% {
    filter: brightness(2);
    opacity: 0.6;
  }
}




/* ====== GREEDY CASINO — Neon Brand Logo ====== */
.brand-logo{
  position:fixed; top:14px; left:16px;
  display:flex; align-items:center; gap:10px;
  text-decoration:none; user-select:none;
  z-index:12000; /* nằm trên video login + game */
  padding:10px 14px;
  border-radius:14px;
  background: rgba(0,0,0,.25);
  backdrop-filter: blur(6px) saturate(1.2);
  -webkit-backdrop-filter: blur(6px) saturate(1.2);
  border:1px solid rgba(255,215,0,.35);
  box-shadow: 0 0 12px rgba(255,215,0,.25), inset 0 0 8px rgba(255,255,255,.06);
}

/* “Greedy” — neon vàng cam, sáng dần nhịp nhàng */
.brand-greedy{
  font-weight:900; letter-spacing:.5px;
  font-size:1.4rem; color:#FFD54A;
  text-shadow:
    0 0 6px #FFD54A,
    0 0 14px #FFA000,
    0 0 24px #FF6D00;
  animation: greedyGlow 2.4s ease-in-out infinite;
}

/* Icon 🎲 — nhấp nháy kiểu đèn bảng hiệu */
.brand-dice{
  font-size:1.35rem; line-height:1;
  filter: drop-shadow(0 0 6px rgba(255,255,255,.7));
  animation: diceBlink 1.2s steps(2,end) infinite;
}

/* “Casino” — neon đỏ hồng, rực hơn khi pulse */
.brand-casino{
  font-weight:800; letter-spacing:.8px;
  font-size:1.1rem; color:#FF4D7E;
  text-shadow:
    0 0 6px #FF4D7E,
    0 0 14px #E91E63,
    0 0 26px #AD1457;
  animation: casinoPulse 3.2s ease-in-out infinite;
}

/* Gạch chân đèn chạy (marquee underline) */
.brand-logo::after{
  content:"";
  position:absolute; left:10px; right:10px; bottom:6px; height:3px;
  border-radius:3px;
  background:
    radial-gradient(circle, rgba(255,215,0,1) 60%, transparent 62%) 0 0/18px 3px repeat-x,
    radial-gradient(circle, rgba(255,64,64,1) 60%, transparent 62%) 9px 0/18px 3px repeat-x;
  animation: underlineRun 2.8s linear infinite;
  opacity:.9;
}

/* ========= Keyframes ========= */
@keyframes greedyGlow{
  0%,100%{ filter:brightness(1); }
  50%{
    filter:brightness(1.35);
    text-shadow:
      0 0 10px #FFE082,
      0 0 22px #FFC107,
      0 0 38px #FF6D00;
  }
}

@keyframes diceBlink{
  0%   { opacity:1;   filter: drop-shadow(0 0 6px rgba(255,255,255,.8)); }
  50%  { opacity:.45; filter: drop-shadow(0 0 2px rgba(255,255,255,.4)); }
  100% { opacity:1;   filter: drop-shadow(0 0 6px rgba(255,255,255,.8)); }
}

@keyframes casinoPulse{
  0%   { transform:translateY(0);   filter:brightness(1); }
  50%  { transform:translateY(-1px);filter:brightness(1.3); }
  100% { transform:translateY(0);   filter:brightness(1); }
}

@keyframes underlineRun{
  0%   { background-position: 0 0, 9px 0; }
  100% { background-position: 180px 0, 189px 0; }
}

/* Responsive: thu nhỏ logo trên màn hình nhỏ */
@media (max-width: 600px){
  .brand-logo{ padding:8px 10px; gap:8px; top:10px; left:10px; }
  .brand-greedy{ font-size:1.15rem; }
  .brand-dice{ font-size:1.1rem; }
  .brand-casino{ font-size:0.95rem; }
}

/* Hỗ trợ người dùng giảm chuyển động */
@media (prefers-reduced-motion: reduce){
  .brand-logo,
  .brand-greedy,
  .brand-casino,
  .brand-dice{ animation:none !important; }
  .brand-logo::after{ display:none; }
}


/* === HUB LUXURY: kim loại + kính + viền vàng + vạch quay === */
.hub{
  position: absolute;           /* giữ nguyên vị trí trung tâm */
  left: 51%; top: 50%;
  width: 120px; height: 120px;  /* to hơn chút cho nổi bật */
  transform: translate(-50%, -50%);
  border-radius: 50%;
  display: flex; align-items: center; justify-content: center;
  z-index: 3;
  /* mặt kim loại xước + kính */
  background:
    radial-gradient(circle at 30% 30%, #ffffff 0%, #d9dde3 35%, #aeb4bf 60%, #8a909b 75%, #6b717d 100%);
  box-shadow:
    0 6px 18px rgba(0,0,0,.45),
    inset 0 3px 10px rgba(255,255,255,.35),
    inset 0 -6px 12px rgba(0,0,0,.35);
  border: 5px solid transparent;               /* tạo khe cho viền vàng qua mask */
  background-clip: padding-box;
}

/* Vòng chia vạch + viền vàng phát sáng (quay rất nhẹ) */
.hub::before{
  content:"";
  position:absolute; inset:-8px;
  border-radius:50%;
  /* viền vàng gradient + conic vạch */
  background:
    conic-gradient(from 0deg,
      rgba(255,215,0,.95) 0 4deg, transparent 4deg 45deg,
      rgba(255,215,0,.95) 45deg 49deg, transparent 49deg 90deg,
      rgba(255,215,0,.95) 90deg 94deg, transparent 94deg 135deg,
      rgba(255,215,0,.95) 135deg 139deg, transparent 139deg 180deg,
      rgba(255,215,0,.95) 180deg 184deg, transparent 184deg 225deg,
      rgba(255,215,0,.95) 225deg 229deg, transparent 229deg 270deg,
      rgba(255,215,0,.95) 270deg 274deg, transparent 274deg 315deg,
      rgba(255,215,0,.95) 315deg 319deg, transparent 319deg 360deg),
    radial-gradient(circle, rgba(255,215,0,.85), rgba(255,140,0,.75) 60%, rgba(255,140,0,0) 62%);
  background-blend-mode: screen;
  box-shadow:
    0 0 18px rgba(255,215,0,.45),
    inset 0 0 12px rgba(255,255,255,.18);
  animation: hubSpin 18s linear infinite;      /* quay chậm */
  filter: drop-shadow(0 0 10px rgba(255,215,0,.45));
}

/* Ánh sáng quét trên mặt hub */
.hub::after{
  content:"";
  position:absolute; inset:8px;
  border-radius:50%;
  background:
    radial-gradient(120% 60% at 30% 20%, rgba(255,255,255,.55), rgba(255,255,255,0) 60%),
    radial-gradient(80% 120% at 70% 80%, rgba(255,255,255,.18), rgba(255,255,255,0) 70%);
  mix-blend-mode: screen;
  animation: hubShine 6.5s ease-in-out infinite;
  pointer-events: none;
}

/* Countdown LED ở tâm: cân giữa & nổi bật */
#countdownValue .led-panel{
  background: linear-gradient(145deg, rgba(0,0,0,.55), rgba(30,30,30,.7));
  border: 1px solid rgba(255,215,0,.35);
  box-shadow: 0 0 10px rgba(255,215,0,.25), inset 0 0 6px rgba(255,255,255,.06);
  padding: 6px 12px !important;
  border-radius: 12px;
}

/* Keyframes */
@keyframes hubSpin{
  0%   { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}
@keyframes hubShine{
  0%,100% { opacity: .9; transform: rotate(0deg) scale(1); }
  50%     { opacity: 1;  transform: rotate(3deg) scale(1.015); }
}

/* Responsive: nhỏ hơn trên mobile */
@media (max-width: 600px){
  .hub{ width: 100px; height: 100px; }
}


/* ====== BASE 3D BUTTON ====== */
.btn-3d{
  --btn-bg: linear-gradient(145deg, #2b2b2b, #1b1b1b);
  --btn-bottom: #0d0d0d;            /* màu “đế” 3D */
  --btn-glow: rgba(255, 215, 0, .35);

  display:inline-flex; align-items:center; justify-content:center; gap:.5rem;
  padding:12px 16px;
  border:none; border-radius:14px;
  font-weight:800; font-size:1.05rem; letter-spacing:.2px;
  color:#111; cursor:pointer; user-select:none;
  background: var(--btn-bg);
  position:relative; isolation:isolate;

  /* 3D: “đế” phía dưới + bóng ngoài */
  box-shadow:
    0 10px 0 var(--btn-bottom),
    0 16px 32px rgba(0,0,0,.45),
    0 0 14px var(--btn-glow);

  transform: translateZ(0); will-change: transform, box-shadow, filter;
  transition: transform .15s ease, box-shadow .15s ease, filter .15s ease;
}

/* highlight bóng kính trên mặt nút */
.btn-3d::before{
  content:""; position:absolute; inset:0; border-radius:inherit; pointer-events:none;
  background: linear-gradient(180deg, rgba(255,255,255,.28), rgba(255,255,255,0) 45%);
  mix-blend-mode: screen; opacity:.7; z-index:0;
}

/* hover: hơi bật lên, bóng sâu hơn */
.btn-3d:hover{
  transform: translateY(-2px);
  box-shadow:
    0 12px 0 var(--btn-bottom),
    0 20px 36px rgba(0,0,0,.5),
    0 0 16px var(--btn-glow);
  filter: brightness(1.03);
}

/* active / ấn xuống: hạ thấp, “đế” mỏng lại */
.btn-3d:active,
.btn-3d.is-pressed{
  transform: translateY(6px);
  box-shadow:
    0 4px 0 var(--btn-bottom),
    0 10px 22px rgba(0,0,0,.45),
    0 0 10px var(--btn-glow);
  filter: brightness(.98);
}

/* focus ring đẹp */
.btn-3d:focus-visible{
  outline:none;
  box-shadow:
    0 10px 0 var(--btn-bottom),
    0 16px 32px rgba(0,0,0,.45),
    0 0 0 3px rgba(255,255,255,.25),
    0 0 0 6px var(--btn-glow);
}

/* disabled */
.btn-3d:disabled,
.btn-3d.is-disabled{
  cursor:not-allowed; opacity:.6;
  filter:grayscale(.2) brightness(.9);
  box-shadow:
    0 8px 0 var(--btn-bottom),
    0 12px 24px rgba(0,0,0,.35);
}

/* ====== COLOR VARIANTS ====== */
.btn-gold{
  --btn-bg: linear-gradient(145deg, #ffd54a, #ffb300);
  --btn-bottom:#b57200; --btn-glow: rgba(255,215,0,.45);
  color:#1a1000;
}
.btn-green{
  --btn-bg: linear-gradient(145deg, #34ef8f, #00c66a);
  --btn-bottom:#017a46; --btn-glow: rgba(0,255,160,.35);
  color:#001a0f;
}
.btn-red{
  --btn-bg: linear-gradient(145deg, #ff6b6b, #e53935);
  --btn-bottom:#8c1313; --btn-glow: rgba(255,80,80,.35);
  color:#1a0000;
}

/* size helpers (tuỳ chọn) */
.btn-sm{ padding:8px 12px; font-size:.95rem; border-radius:12px; }
.btn-lg{ padding:14px 20px; font-size:1.15rem; border-radius:16px; }

/* icon trong nút (svg/emoji) */
.btn-3d .ico{ font-size:1.2em; line-height:1; }


/* ==== TOKEN & RESET NHẸ ==== */
:root{
  --gold-1: rgba(255,215,0,.85);
  --gold-2: rgba(255,175,0,.85);
  --glass-bg: rgba(10,10,10,.45);
  --glass-stroke: rgba(255,215,0,.8);
  --panel-shadow: 0 10px 40px rgba(0,0,0,.55), 0 0 22px rgba(255,215,0,.12);
}

/* Gom card về 1 kiểu để đồng bộ (áp cho .wallet, .result, .history, .historyB, .bet-section...) */
.wallet,
.result,
.history,
.historyB,
.bet-section,
.notification,
.payout-table {
  background: var(--glass-bg) !important;
  border: 2px solid var(--glass-stroke) !important;
  border-radius: 18px !important;
  backdrop-filter: blur(8px) saturate(1.2);
  -webkit-backdrop-filter: blur(8px) saturate(1.2);
  box-shadow: var(--panel-shadow), inset 0 0 16px rgba(255,255,255,.06) !important;
  position: relative;
}

/* Viền gradient động cho card */
.wallet::before,
.result::before,
.history::before,
.historyB::before,
.bet-section::before,
.notification::before,
.payout-table::before{
  content:"";
  position:absolute; inset:-2px; border-radius:20px;
  padding:2px;
  background: linear-gradient(130deg, gold, orange, red, gold);
  background-size: 300% 300%;
  animation: panelBorderShift 12s linear infinite;
  -webkit-mask: linear-gradient(#000 0 0) content-box, linear-gradient(#000 0 0);
  -webkit-mask-composite: xor; mask-composite: exclude;
  z-index: 0;
}
@keyframes panelBorderShift{
  0%{ background-position: 0% 50%; }
  50%{ background-position: 100% 50%; }
  100%{ background-position: 0% 50%; }
}
/* Nội dung luôn nằm trên lớp viền */
.wallet > *, .result > *, .history > *, .historyB > *,
.bet-section > *, .notification > *, .payout-table > * { position: relative; z-index: 1; }

/* ==== LAYOUT PANEL ==== */
.left-panel, .right-panel{
  display: flex;
  flex-direction: column;
  gap: 14px;
  position: relative;
}

/* Vành sáng dịu bao quanh panel */
.left-panel::before,
.right-panel::before{
  content:"";
  position:absolute; inset:-8px; border-radius:24px;
  pointer-events:none;
  background:
    radial-gradient(30vmax 30vmax at 30% 20%, rgba(255,215,0,.10), transparent 60%),
    radial-gradient(24vmax 24vmax at 70% 80%, rgba(255,140,0,.08), transparent 60%);
  filter: blur(2px);
}

/* Khung panel glass riêng, nhẹ hơn cả container */
.left-panel,
.right-panel{
  padding: 10px;
  border-radius: 22px;
  background: rgba(0,0,0,.25);
  border: 1px solid rgba(255,215,0,.35);
  box-shadow: 0 8px 24px rgba(0,0,0,.35), 0 0 12px rgba(255,215,0,.12);
}

/* Header mini có icon cho từng box (thêm class .panel-head vào thẻ con tùy box) */
.panel-head{
  display:flex; align-items:center; gap:8px;
  font-weight:900; letter-spacing:.3px;
  color: #ffd700;
  text-shadow: 0 0 10px rgba(255,215,0,.45);
  margin-bottom: 8px;
}
.panel-head .ico{ font-size:1.2rem; }

/* Divider nhẹ trong card */
.panel-divider{
  height:1px; margin:8px 0;
  background: linear-gradient(90deg, transparent, rgba(255,215,0,.35), transparent);
  border-radius:1px;
}

/* ==== RIGHT PANEL: sticky ví & cuộn mượt ==== */
.right-panel{
  max-height: 100%;
}
.right-panel .wallet{
  position: sticky; top: 0;
  z-index: 5;
  box-shadow: 0 14px 30px rgba(0,0,0,.6), 0 0 16px rgba(255,215,0,.18);
}

/* Cuộn trong cột phải cho các box dài (history/bet-section...) */
.right-panel .history,
.right-panel .historyB,
.right-panel .bet-section{
  max-height: 40vh;
  overflow: auto;
  scrollbar-width: thin;
}
.right-panel .history::-webkit-scrollbar,
.right-panel .historyB::-webkit-scrollbar,
.right-panel .bet-section::-webkit-scrollbar{
  width: 8px; height:8px;
}
.right-panel .history::-webkit-scrollbar-thumb,
.right-panel .historyB::-webkit-scrollbar-thumb,
.right-panel .bet-section::-webkit-scrollbar-thumb{
  background: linear-gradient(180deg, #ffd54a, #ff9800);
  border-radius: 10px;
}

/* ==== LEFT PANEL: nhấn mạnh khu vực vòng quay & kết quả ==== */
.left-panel .stage{
  box-shadow:
    0 12px 42px rgba(0,0,0,.6),
    0 0 26px rgba(255,215,0,.18);
  border-radius: 50%;
}
.left-panel .result{
  transform: translateZ(0);
}

/* ==== HOVER / FOCUS: nhấn trọng tâm nhưng không loá mắt ==== */
.wallet:hover,
.result:hover,
.history:hover,
.historyB:hover,
.bet-section:hover,
.notification:hover,
.payout-table:hover{
  filter: brightness(1.03);
  box-shadow: 0 12px 44px rgba(0,0,0,.6), 0 0 26px rgba(255,215,0,.2);
  transition: filter .15s ease, box-shadow .15s ease;
}

/* ==== RESPONSIVE ==== */
@media (max-width: 900px){
  .left-panel, .right-panel{
    padding: 8px;
  }
  .right-panel .history,
  .right-panel .historyB,
  .right-panel .bet-section{
    max-height: 50vh;
  }
}


/* Lớp hiệu ứng toàn màn khi chuyển cảnh */
#transitionFX{
  position: fixed;
  inset: 0;
  pointer-events: none;
  z-index: 12000; /* trên overlay/game */
  opacity: 0;
  transition: opacity .2s ease;
}

#transitionFX.active{ opacity: 1; }

/* Tia sáng quét chéo toàn màn hình */
#transitionFX .sweep{
  position: absolute;
  top: 0; left: -60%;
  width: 55%;
  height: 100%;
  transform: skewX(-20deg);
  background: linear-gradient(120deg,
    rgba(255,255,255,0.00) 0%,
    rgba(255,255,255,0.22) 50%,
    rgba(255,255,255,0.00) 100%);
  animation: screenSweep 1.35s ease forwards;
  filter: blur(0.5px);
}

@keyframes screenSweep{
  0%   { left: -60%; }
  100% { left: 125%; }
}

/* Fade/Zoom đã đề xuất lần trước – nếu chưa có thì thêm: */
#loginOverlay.fade-out{
  opacity: 0;
  transform: scale(1.05);
  transition: opacity .8s ease, transform .8s ease;
  pointer-events: none;
}
.game-container.fade-in{ opacity: 0; transform: scale(.95); transition: opacity .8s ease, transform .8s ease; }
.game-container.fade-in.show{ opacity: 1; transform: scale(1); }


/* Đồng hồ LED điện tử */
.time-display {
  margin-top: 12px;
  font-size: 2rem;
  font-weight: 900;
  letter-spacing: 2px;
  color: #00ff95;
  text-shadow: 
    0 0 8px #00ff95,
    0 0 16px #00ffaa,
    0 0 24px #00ffcc;
  background: rgba(0, 0, 0, 0.65);
  padding: 8px 18px;
  border-radius: 12px;
  border: 2px solid rgba(0, 255, 150, 0.4);
  display: inline-block;
  animation: glowPulse 1.5s infinite alternate;
}

/* Hiệu ứng sáng nhịp nhàng */
@keyframes glowPulse {
  0% {
    text-shadow: 0 0 8px #00ff95, 0 0 16px #00ffaa;
    filter: brightness(1);
  }
  100% {
    text-shadow: 0 0 14px #00ffaa, 0 0 28px #00ffcc, 0 0 40px #00ffee;
    filter: brightness(1.3);
  }
}




/* ==== LED number (bảng điện tử) ==== */
.led-panel{
  display:inline-flex; align-items:center; gap:8px;
  padding: 6px 10px;
  border-radius: 12px;
  background: linear-gradient(145deg, rgba(0,0,0,.55), rgba(25,25,25,.7));
  border: 1px solid rgba(255,215,0,.35);
  box-shadow: 0 0 10px rgba(255,215,0,.25), inset 0 0 6px rgba(255,255,255,.06);
}

.led-number{
  font-family: 'Share Tech Mono', ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace;
  font-weight: 700;
  font-size: 2rem;             /* bạn có thể tăng 2.2–2.6rem nếu muốn */
  letter-spacing: 1px;
  color: #e8ffcc;
  /* đổ bóng kiểu LED */
  text-shadow:
    0 0 6px rgba(160,255,100,.65),
    0 0 14px rgba(120,255,140,.35),
    0 0 28px rgba(80,255,160,.25);
  /* bề mặt số kiểu LED */
  background: linear-gradient(180deg, rgba(255,255,255,.18), rgba(255,255,255,0) 45%);
  -webkit-background-clip: text;
  background-clip: text;
}

.led-number.small { font-size: 1.6rem; }
.led-sep { opacity:.85; margin: 0 2px; }

/* nhấp nháy nhẹ khi giá trị đổi (tận dụng .flash-update sẵn có) */
.led-number.flash-update { animation: flashUpdate 0.6s ease-in-out; }






/* Ô cửa dạng điện tử */
.door {
  position: absolute;
  width: 100px;
  height: 100px;
  border-radius: 50%;
  background: radial-gradient(circle at 30% 30%, #f5f5f5, #c0c0c0 70%, #a0a0a0);
  border: 3px solid #e0e0e0;
  box-shadow:
    0 0 15px rgba(200,200,200,0.6),
    inset 0 0 12px rgba(255,255,255,0.9),
    inset 0 0 18px rgba(0,0,0,0.25);
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  color: #111;
  font-family: 'Orbitron', sans-serif;
  font-weight: bold;
  transition: all 0.3s ease;
  overflow: hidden;
  z-index: 0;
}


@keyframes doorShine {
  0%   { transform: translateX(-200%) rotate(25deg); }
  100% { transform: translateX(200%) rotate(25deg); }
}

/* Hover = sáng rực */
.door:hover {
  transform: scale(1.1);
  box-shadow:
    0 0 25px #00ffe0,
    inset 0 0 20px rgba(255,255,255,0.95);
  border-color: #00ffcc;
}


@keyframes winnerPulse {
  0%, 100% { transform: scale(1); }
  50% { transform: scale(1.2); }
}


/* Hub trung tâm LED */
.hub {
  background: radial-gradient(circle, #111, #000);
  border: 3px solid #ff0044;
  box-shadow: 0 0 15px #ff0044, inset 0 0 20px rgba(255,0,80,0.3);
  color: #ff0044;
  font-family: 'Orbitron', sans-serif;
  text-shadow: 0 0 8px #ff0044, 0 0 14px #ff3366;
}

/* Spokes dạng LED xanh */
.spoke {
  background: linear-gradient(to bottom, #00f, #0ff);
  box-shadow: 0 0 12px #00f, 0 0 25px #0ff;
  animation: spokeGlow 1.5s infinite alternate;
}

@keyframes spokeGlow {
  from { opacity: 0.6; filter: brightness(0.8); }
  to   { opacity: 1; filter: brightness(1.3); }
}


/* Coin điện tử */
.chip {
  width: 70px;
  height: 70px;
  border-radius: 50%;
  background: radial-gradient(circle, #0f0f0f 30%, #1a1a1a 100%);
  color: #00ffcc;
  font-weight: bold;
  font-size: 18px;
  font-family: 'Orbitron', sans-serif; /* font điện tử */
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  border: 2px solid #00ffcc;
  box-shadow:
    0 0 10px #00ffcc,
    0 0 20px rgba(0, 255, 204, 0.6),
    inset 0 0 12px rgba(0, 255, 204, 0.3);
  transition: transform 0.25s ease, box-shadow 0.25s ease;
}

/* Hover: phát sáng mạnh hơn */
.chip:hover {
  transform: scale(1.2);
  box-shadow:
    0 0 20px #00ffff,
    0 0 35px #00ffaa,
    inset 0 0 15px rgba(0,255,200,0.6);
}

/* Khi chọn coin */
.chip.active {
  border: 3px solid #ff0044;
  color: #ff0044;
  box-shadow:
    0 0 20px #ff0044,
    0 0 40px rgba(255,0,80,0.8),
    inset 0 0 20px rgba(255,0,80,0.4);
  transform: scale(1.25);
}





/* ========== DIGITAL CASINO TILE ========== */
.door.door--digital{
  /* size giống cũ để khỏi lệch layout */
  width: 106px; height: 100px; border-radius: 50%;
  position: absolute; display:flex; flex-direction:column; align-items:center; justify-content:center;
  border: 3px solid rgba(255,215,0,.85);
  background:
    radial-gradient(120% 90% at 30% 25%, rgba(255,255,255,.22), rgba(255,255,255,0) 60%),
    linear-gradient(155deg, rgba(18,18,18,.9), rgba(30,30,30,.85) 40%, rgba(0,0,0,.9));
  box-shadow:
    0 2px 12px rgba(0,0,0,.55),
    0 0 18px rgba(255,215,0,.25),
    inset 0 0 10px rgba(255,255,255,.08);
  overflow:hidden;
  transition: transform .2s ease, box-shadow .2s ease, filter .2s ease;
  isolation:isolate;
}

/* Vòng LED quanh viền */
.door.door--digital::before{
  content:""; position:absolute; inset:-5px; border-radius:50%;
  background:
    conic-gradient(from 0deg,
      rgba(255,215,0,.95) 0 6deg, transparent 6deg 45deg,
      rgba(255,215,0,.95) 45deg 51deg, transparent 51deg 90deg,
      rgba(255,215,0,.95) 90deg 96deg, transparent 96deg 135deg,
      rgba(255,215,0,.95) 135deg 141deg, transparent 141deg 180deg,
      rgba(255,215,0,.95) 180deg 186deg, transparent 186deg 225deg,
      rgba(255,215,0,.95) 225deg 231deg, transparent 231deg 270deg,
      rgba(255,215,0,.95) 270deg 276deg, transparent 276deg 315deg,
      rgba(255,215,0,.95) 315deg 321deg, transparent 321deg 360deg);
  filter: drop-shadow(0 0 10px rgba(255,215,0,.45));
  z-index:0; opacity:.9; animation: ledRing 12s linear infinite;
}
@keyframes ledRing{ to{ transform: rotate(360deg); } }

/* Scan line (LCD) */
.door.door--digital::after{
  content:""; position:absolute; inset:8px; border-radius:50%;
  background:
    repeating-linear-gradient(180deg, rgba(255,255,255,.05), rgba(255,255,255,.05) 1px, transparent 1px, transparent 3px),
    radial-gradient(120% 60% at 30% 20%, rgba(255,255,255,.28), rgba(255,255,255,0) 60%);
  mix-blend-mode: screen; opacity:.6;
  z-index:1; animation: scanDown 3.6s linear infinite;
}
@keyframes scanDown{
  0%{ background-position: 0 -40px, 0 0; }
  100%{ background-position: 0 80px, 0 0; }
}

/* Icon & label */
.door.door--digital img{
  width: 55px; height: 55px; margin-bottom: 6px; z-index:2;
  filter: drop-shadow(0 0 6px rgba(255,255,255,.25));
}
.door.door--digital span{
  z-index:2; font-weight:800; font-size:18px; color:#eaeaea;
  background: rgba(0,0,0,.45); padding: 2px 8px; border-radius: 8px;
  border:1px solid rgba(255,255,255,.15);
  text-shadow: 0 0 10px rgba(255,255,255,.25);
}

/* Hover sang rực */
.door.door--digital:hover{
  transform: scale(1.08);
  box-shadow:
    0 4px 18px rgba(0,0,0,.6),
    0 0 26px rgba(255,215,0,.35),
    inset 0 0 14px rgba(255,255,255,.12);
}

/* Dim/Highlight khớp rule hiện có */
.door.door--digital.dim{ opacity:.22; filter: grayscale(85%) brightness(.9); }
.door.door--digital.highlight{ opacity:1!important; filter:none!important; }


/* ——— Theme theo nhóm (dùng data-type hoặc class) ——— */
.door.door--digital{ --acc:#FFD700; }
.door.door--digital[data-type="rau"], .door.door--digital.door--rau { --acc:#34ef8f; }
.door.door--digital[data-type="thit"], .door.door--digital.door--thit{ --acc:#ff6b6b; }
.door.door--digital[data-type="special"], .door.door--digital.door--special{ --acc:#ffe066; }

.door.door--digital{
  border-color: var(--acc);
  box-shadow: 0 2px 12px rgba(0,0,0,.55), 0 0 18px color-mix(in oklab, var(--acc) 35%, transparent);
}
.door.door--digital::before{
  filter: drop-shadow(0 0 12px color-mix(in oklab, var(--acc) 55%, transparent));
}
.door.door--digital span{
  border-color: color-mix(in oklab, var(--acc) 30%, rgba(255,255,255,.15));
  text-shadow: 0 0 10px color-mix(in oklab, var(--acc) 45%, rgba(255,255,255,.25));
}

/* Mobile tinh gọn */
@media (max-width:600px){
  .door.door--digital{ width: 96px; height: 96px; }
  .door.door--digital img{ width:44px; height:44px; }
}


/* ===== THEME: ELECTRONIC / LED ===== */
.wallet--digital{
  background: linear-gradient(145deg, #0b0b0b, #141414) !important;
  border-color: rgba(255,215,0,0.0) !important; /* bỏ viền vàng */
  box-shadow: 0 10px 32px rgba(0,0,0,.55), inset 0 0 14px rgba(255,255,255,.04) !important;
}

/* Hộp số dư & jackpot: bỏ nền vàng, chuyển sang “kính tối” */
.wallet--digital .balance-box,
.wallet--digital .jackpot-box{
  background: linear-gradient(160deg, #0e0e0e, #1a1a1a) !important;
  border: 1px solid rgba(255,255,255,.08) !important;
  box-shadow: inset 0 0 12px rgba(255,255,255,.06), 0 0 10px rgba(0,0,0,.35) !important;
}

/* Nhãn mờ, số neon xanh */
.wallet--digital .balance-label,
.wallet--digital .jackpot-label{
  color: #a9b0b3 !important;
  text-shadow: none !important;
}
.wallet--digital .balance-value,
.wallet--digital .jackpot-value{
  color: #00ff95 !important;
  text-shadow: 0 0 6px #00ff95, 0 0 14px #00ffaa, 0 0 26px #00ffcc !important;
  font-weight: 900 !important;
}

/* Icon dịu lại */
.wallet--digital .balance-icon,
.wallet--digital .jackpot-icon{
  filter: drop-shadow(0 0 6px rgba(255,255,255,.3));
}

/* Progress xanh ngọc thay vì vàng */
.wallet--digital .jackpot-info progress{
  background: #1f1f1f !important;
  border: 1px solid rgba(255,255,255,.12) !important;
  height: 12px !important;
  border-radius: 10px !important;
}
.wallet--digital .jackpot-info progress::-webkit-progress-value{
  background: linear-gradient(90deg, #00ff95, #00cc88) !important;
  border-radius: 10px !important;
}
.wallet--digital .jackpot-info progress::-moz-progress-bar{
  background: linear-gradient(90deg, #00ff95, #00cc88) !important;
}

/* Hiệu ứng nhấp nháy khi cập nhật (tận dụng .flash-update sẵn có) */
.wallet--digital .balance-value.flash-update,
.wallet--digital .jackpot-value.flash-update{
  animation: flashUpdate 0.6s ease-in-out;
}

/* Phần “vàng” cũ – vô hiệu hoá trong theme digital */
.wallet--digital .balance-box,
.wallet--digital .jackpot-box,
.wallet--digital .wallet-display{
  animation: none !important;
}


/* Nền ví điện tử sáng hơn */
.wallet--digital{
  background: linear-gradient(145deg, rgba(15,20,25,0.85), rgba(30,40,45,0.9)) !important;
  border: 1px solid rgba(0,255,150,0.25) !important;
  box-shadow: 0 6px 22px rgba(0,0,0,.45), inset 0 0 14px rgba(0,255,150,.08) !important;
  backdrop-filter: blur(6px); /* hiệu ứng kính mờ */
}

/* Hộp số dư & jackpot sáng hơn */
.wallet--digital .balance-box,
.wallet--digital .jackpot-box{
  background: linear-gradient(160deg, rgba(255,255,255,0.05), rgba(0,0,0,0.35)) !important;
  border: 1px solid rgba(0,255,150,0.3) !important;
  box-shadow: inset 0 0 12px rgba(0,255,150,.08), 0 0 14px rgba(0,0,0,.35) !important;
}

/* Nhãn sáng hơn */
.wallet--digital .balance-label,
.wallet--digital .jackpot-label{
  color: #d2fbe7 !important;
  text-shadow: 0 0 4px rgba(0,255,150,.25) !important;
}

.wallet--digital .wallet-display{
  background:
    repeating-linear-gradient(180deg, rgba(255,255,255,.04) 0px, rgba(255,255,255,.04) 1px, transparent 1px, transparent 4px),
    linear-gradient(160deg, rgba(0,255,150,.08), rgba(0,0,0,.1));
  border-radius: 12px;
}

/* Ánh sáng quét ngang panel */
.wallet--digital .wallet-display{
  position: relative;
  overflow: hidden;
  border-radius: 12px;
  background:
    repeating-linear-gradient(180deg, rgba(255,255,255,.04) 0px, rgba(255,255,255,.04) 1px, transparent 1px, transparent 4px),
    linear-gradient(160deg, rgba(0,255,150,.08), rgba(0,0,0,.1));
}

/* Vệt sáng quét */
.wallet--digital .wallet-display::after{
  content:"";
  position:absolute;
  top:0; left:-60%;
  width:60%; height:100%;
  background: linear-gradient(90deg, transparent, rgba(0,255,150,.15), transparent);
  transform: skewX(-25deg);
  animation: panelSweep 6s linear infinite;
  pointer-events:none;
  z-index:1;
}

@keyframes panelSweep{
  0%   { left:-60%; }
  100% { left:120%; }
}

/* Nút mũi tên phong cách điện tử */
.wallet--digital .wallet-toggle{
  background: linear-gradient(145deg, #101010, #181818);
  border: 1px solid rgba(0,255,150,.35);
  border-radius: 8px;
  width: 34px; height: 34px;
  display:flex; align-items:center; justify-content:center;
  cursor: pointer;
  transition: all .25s ease;
  box-shadow:
    0 2px 6px rgba(0,0,0,.6),
    inset 0 0 6px rgba(0,255,150,.1);
}
.wallet--digital .wallet-toggle .arrow{
  color: #00ff95;
  font-size: 18px;
  text-shadow:
    0 0 6px #00ff95,
    0 0 12px #00ffaa;
  transition: transform .25s ease, color .25s ease;
}
.wallet--digital .wallet-toggle:hover{
  border-color: #00ffaa;
  box-shadow:
    0 0 12px rgba(0,255,150,.5),
    inset 0 0 8px rgba(0,255,150,.2);
}
.wallet--digital .wallet-toggle:hover .arrow{
  color:#00ffaa;
  transform: scale(1.2);
}

/* Khi đang mở → xoay mũi tên xuống */
.wallet--digital .wallet-toggle.open .arrow{
  transform: rotate(90deg);
  color: #00ffaa;
}


/* ===== GHI ĐÈ TRỰC TIẾP HUB ===== */
.hub{
  width: 120px; height: 120px;
  border-radius: 50%;
  background: radial-gradient(circle at 30% 30%, #1a2f1f 0%, #0f2417 40%, #06140b 100%) !important;
  border: 3px solid #00cc88 !important;
  box-shadow:
    0 0 12px rgba(0,255,150,.45),
    inset 0 0 18px rgba(0,255,150,.25),
    inset -4px -4px 8px rgba(0,0,0,.6),
    inset 3px 3px 6px rgba(255,255,255,.15) !important;
  position: relative;
  display:flex; align-items:center; justify-content:center;
  overflow:hidden;
  z-index:5;
}
.hub::before{
  content:"";
  position:absolute;
  top:-30%; left:-30%;
  width:80%; height:80%;
  border-radius:50%;
  background: radial-gradient(circle, rgba(0,255,150,.35) 0%, transparent 70%);
  filter: blur(12px);
  pointer-events:none;
}
.hub::after{
  content:"";
  position:absolute; top:0; left:-60%;
  width:60%; height:100%;
  background: linear-gradient(90deg, transparent, rgba(0,255,150,.25), transparent);
  transform: skewX(-25deg);
  animation: hubSweep 7s linear infinite;
}
@keyframes hubSweep{
  0%   { left:-60%; }
  100% { left:120%; }
}


/* Đồng hồ LED trong HUB */
#countdownValue {
  font-family: 'Digital-7 Mono', monospace; /* font LED điện tử (nếu có) */
  font-size: 2rem;
  color: #39ff14; /* xanh neon */
  text-shadow:
    0 0 5px #39ff14,
    0 0 10px #39ff14,
    0 0 20px #39ff14,
    0 0 40px #39ff14;
  letter-spacing: 2px;
  animation: ledPulse 1.2s infinite alternate;
}

@keyframes ledPulse {
  from { text-shadow: 0 0 5px #39ff14, 0 0 10px #39ff14; }
  to   { text-shadow: 0 0 15px #39ff14, 0 0 30px #39ff14; }
}


/* === Vành ngoài phong cách casino thay cho vòng tròn đen === */
.stage {
  position: relative;
  border-radius: 50%;
  isolation: isolate; /* giữ lớp xếp chồng gọn gàng */
}

/* Vành tổng: mặt nỉ + viền vàng, đứng sau doors/hub */
.casino-ring{
  position:absolute; inset:-20px;      /* mở rộng ra ngoài cho hoành tráng */
  border-radius:50%;
  z-index:1;                           /* dưới doors(2) & hub(3) */
  pointer-events:none;

  /* Mặt nỉ tối có chiều sâu */
  background:
    radial-gradient(85% 85% at 50% 40%, rgba(0,0,0,.45), rgba(0,0,0,.85) 70%),
    radial-gradient(closest-side, rgba(10,10,10,.85), rgba(0,0,0,.95));
  box-shadow:
    inset 0 25px 60px rgba(255,255,255,.04),
    inset 0 -35px 80px rgba(0,0,0,.45);

  /* Cắt thành “vành”: giữ phần rìa 26px (thay đổi được) */
  -webkit-mask: radial-gradient(closest-side, transparent calc(100% - 26px), #000 0);
          mask: radial-gradient(closest-side, transparent calc(100% - 26px), #000 0);
}

/* Viền kim loại vàng đa lớp + ánh sáng quét */
.casino-ring::before{
  content:"";
  position:absolute; inset:-4px; border-radius:inherit;
  background:
    linear-gradient(135deg, #f7d36a, #e6a52a 35%, #fce07c 55%, #b8750a 75%, #ffd36a) border-box;
  filter: drop-shadow(0 0 14px rgba(255,215,0,.35));
  -webkit-mask: radial-gradient(closest-side, transparent calc(100% - 22px), #000 0);
          mask: radial-gradient(closest-side, transparent calc(100% - 22px), #000 0);
  z-index:0;
}

/* Dải LED chạy quanh vành */
.casino-ring::after{
  content:"";
  position:absolute; inset:-10px; border-radius:inherit;

  /* Hạt LED cách đều nhờ repeating-conic-gradient */
  background:
    repeating-conic-gradient(
      from 0deg,
      rgba(0,255,170,1) 0 7deg,     /* màu LED xanh điện tử */
      rgba(0,255,170,0) 7deg 16deg
    );

  /* chỉ hiện trên vành mỏng */
  -webkit-mask: radial-gradient(closest-side, transparent calc(100% - 26px), #000 0);
          mask: radial-gradient(closest-side, transparent calc(100% - 26px), #000 0);

  /* hiệu ứng quét sáng xoay */
  mix-blend-mode: screen;
  filter: blur(.6px);
  animation: ringSweep 3.8s linear infinite;
  opacity:.95;
}

/* Tùy chọn: viền phát sáng nền nhẹ bên ngoài cho “điện tử” */
.stage::before{
  content:"";
  position:absolute; inset:-26px; border-radius:50%;
  background: radial-gradient(closest-side, rgba(0,255,170,.16), transparent 70%);
  z-index:0;
  pointer-events:none;
  filter: blur(.8px);
}

/* Khi còn ≤3s: chuyển sang cảnh báo đỏ (bạn có countdown sẵn trong HUB) */
.casino-ring.danger::after{
  background:
    repeating-conic-gradient(
      from 0deg,
      rgba(255,70,70,1) 0 7deg,
      rgba(255,70,70,0) 7deg 16deg
    );
  filter: drop-shadow(0 0 10px rgba(255,70,70,.45));
}

@keyframes ringSweep{
  to { transform: rotate(360deg); }
}


/* === Vành ngoài phong cách casino thay cho vòng đen === */
.stage{ position:relative; border-radius:50%; isolation:isolate; } /* giữ lớp xếp chồng gọn */

.casino-ring{
  position:absolute; inset:-20px; border-radius:50%;
  z-index:1; pointer-events:none;
  /* mặt nỉ tối có chiều sâu */
  background:
    radial-gradient(85% 85% at 50% 40%, rgba(0,0,0,.45), rgba(0,0,0,.85) 70%),
    radial-gradient(closest-side, rgba(10,10,10,.85), rgba(0,0,0,.95));
  box-shadow:
    inset 0 25px 60px rgba(255,255,255,.04),
    inset 0 -35px 80px rgba(0,0,0,.45);
  /* cắt thành “vành”: giữ rìa 26px */
  -webkit-mask: radial-gradient(closest-side, transparent calc(100% - 26px), #000 0);
          mask: radial-gradient(closest-side, transparent calc(100% - 26px), #000 0);
}

/* Viền kim loại vàng + ánh sáng quét */
.casino-ring::before{
  content:""; position:absolute; inset:-4px; border-radius:inherit; z-index:0;
  background: linear-gradient(135deg,#f7d36a,#e6a52a 35%,#fce07c 55%,#b8750a 75%,#ffd36a) border-box;
  filter: drop-shadow(0 0 14px rgba(255,215,0,.35));
  -webkit-mask: radial-gradient(closest-side, transparent calc(100% - 22px), #000 0);
          mask: radial-gradient(closest-side, transparent calc(100% - 22px), #000 0);
}

/* LED chạy vòng */
.casino-ring::after{
  content:""; position:absolute; inset:-10px; border-radius:inherit;
  background:
    repeating-conic-gradient(from 0deg, rgba(0,255,170,1) 0 7deg, rgba(0,255,170,0) 7deg 16deg);
  -webkit-mask: radial-gradient(closest-side, transparent calc(100% - 26px), #000 0);
          mask: radial-gradient(closest-side, transparent calc(100% - 26px), #000 0);
  mix-blend-mode: screen; filter: blur(.6px);
  animation: ringSweep 3.8s linear infinite; opacity:.95;
}
@keyframes ringSweep{ to{ transform: rotate(360deg); } }

/* Hào quang nhẹ bên ngoài cho vibe “điện tử” */
.stage::before{
  content:""; position:absolute; inset:-10px; border-radius:50%;
  background: radial-gradient(closest-side, rgba(0,255,170,.16), transparent 70%);
  z-index:0; pointer-events:none; filter: blur(.8px);
}



/* ===== SPIN COUNTER — Bảng điện tử ===== */
/* Ghi đè style cũ của #spinCounter để thay giao diện:contentReference[oaicite:1]{index=1} */
#spinCounter {
  margin: 8px auto 12px;
  min-width: 220px;
  max-width: 420px;
  padding: 10px 14px;
  text-align: center;
  border-radius: 14px;
  background: linear-gradient(145deg, rgba(10,10,10,.55), rgba(22,22,22,.85));
  border: 2px solid rgba(255,215,0,.85);
  box-shadow:
    0 10px 30px rgba(0,0,0,.55),
    0 0 16px rgba(255,215,0,.18),
    inset 0 0 12px rgba(255,255,255,.06);
  position: relative;
  overflow: hidden;
}

/* Viền vàng chạy */
#spinCounter::before{
  content:"";
  position:absolute; inset:-2px; border-radius:16px; padding:2px;
  background: linear-gradient(130deg, gold, orange, red, gold);
  background-size: 300% 300%;
  animation: scBorder 10s linear infinite;
  -webkit-mask: linear-gradient(#000 0 0) content-box, linear-gradient(#000 0 0);
  -webkit-mask-composite: xor; mask-composite: exclude;
  pointer-events:none; z-index:0;
}
@keyframes scBorder{ 0%{background-position:0 50%} 50%{background-position:100% 50%} 100%{background-position:0 50%} }

/* Dải LED chấm mép trong */
#spinCounter::after{
  content:"";
  position:absolute; inset:8px; border-radius:10px;
  background:
    repeating-conic-gradient(from 0deg, rgba(0,255,170,.95) 0 8deg, rgba(0,255,170,0) 8deg 18deg);
  -webkit-mask: radial-gradient(closest-side, transparent calc(100% - 7px), #000 0);
          mask: radial-gradient(closest-side, transparent calc(100% - 7px), #000 0);
  filter: blur(.45px);
  animation: scLeds 3.4s linear infinite;
  opacity:.9; mix-blend-mode: screen; pointer-events:none; z-index:1;
}
@keyframes scLeds{ to{ transform: rotate(360deg); } }

/* Chữ số LED */
#spinCounter.sc-led{
  font-family: 'Digital-7 Mono', monospace;
  letter-spacing: 2px;
  font-size: 1.6rem;
  position: relative; z-index: 2;
}

/* Màu mặc định: xanh điện tử */
#spinCounter.sc-green{
  color: #39ff14;
  text-shadow: 0 0 6px #39ff14, 0 0 14px #39ff14, 0 0 28px #39ff14;
  animation: scPulseG 1.2s infinite alternate;
}
@keyframes scPulseG{ from{ text-shadow:0 0 6px #39ff14,0 0 14px #39ff14 } to{ text-shadow:0 0 16px #39ff14,0 0 30px #39ff14 } }

/* Cảnh báo: đỏ casino */
#spinCounter.sc-red{
  color: #ff2a2a;
  text-shadow: 0 0 6px #ff2a2a, 0 0 12px #ff0000, 0 0 24px #ff0000;
  animation: scPulseR 1s infinite alternate;
}
#spinCounter.sc-red::after{
  /* đồng bộ LED mép sang tông đỏ */
  background: repeating-conic-gradient(from 0deg, rgba(255,70,70,.95) 0 8deg, rgba(255,70,70,0) 8deg 18deg);
  filter: drop-shadow(0 0 10px rgba(255,70,70,.5));
}
@keyframes scPulseR{ from{ text-shadow:0 0 6px #ff2a2a,0 0 12px #ff0000 } to{ text-shadow:0 0 16px #ff2a2a,0 0 28px #ff0000 } }

/* Scanline nhẹ (tuỳ chọn): thêm 1 lớp nền LED */
#spinCounter .scan{
  position:absolute; inset:0; z-index:1; pointer-events:none;
  background: linear-gradient(to bottom, rgba(255,255,255,.06) 0 1px, transparent 1px 3px);
  background-size: 100% 4px;
  opacity:.32; mix-blend-mode: screen;
}



/* ===== BUTTON ĐIỆN TỬ LED ===== */
.btn-led{
  --bg1: rgba(10,10,10,.55);
  --bg2: rgba(22,22,22,.85);
  --stroke: rgba(255,215,0,.9);
  --glow: rgba(255,215,0,.35);
  --txt: #eaeaea;
  --led: rgba(0,255,170,.95); /* màu LED viền trong mặc định (xanh điện tử) */

  display:inline-flex; align-items:center; justify-content:center; gap:.5rem;
  padding: 10px 14px;
  border-radius: 14px;
  border: 2px solid var(--stroke);
  background: linear-gradient(145deg, var(--bg1), var(--bg2));
  color: var(--txt);
  font-weight: 800; letter-spacing:.3px;
  position: relative; isolation:isolate;
  cursor: pointer; user-select: none;

  box-shadow:
    0 10px 30px rgba(0,0,0,.55),
    0 0 18px var(--glow),
    inset 0 0 12px rgba(255,255,255,.06);
  transition: transform .15s ease, box-shadow .15s ease, filter .15s ease;
  overflow: hidden;
}

/* Viền vàng gradient chạy quanh */
.btn-led::before{
  content:"";
  position:absolute; inset:-2px; border-radius:16px; padding:2px;
  background: linear-gradient(130deg, gold, orange, red, gold);
  background-size: 300% 300%;
  animation: ledBorderShift 10s linear infinite;
  -webkit-mask: linear-gradient(#000 0 0) content-box, linear-gradient(#000 0 0);
  -webkit-mask-composite: xor; mask-composite: exclude;
  pointer-events:none; z-index:0;
}
@keyframes ledBorderShift{
  0%{background-position:0 50%} 50%{background-position:100% 50%} 100%{background-position:0 50%}
}

/* Dải chấm LED mép trong */
.btn-led::after{
  content:"";
  position:absolute; inset:8px; border-radius:10px;
  background:
    repeating-conic-gradient(from 0deg, var(--led) 0 8deg, rgba(0,0,0,0) 8deg 18deg);
  -webkit-mask: radial-gradient(closest-side, transparent calc(100% - 7px), #000 0);
          mask: radial-gradient(closest-side, transparent calc(100% - 7px), #000 0);
  filter: blur(.45px);
  animation: ledDotsSweep 3.2s linear infinite;
  opacity:.9; mix-blend-mode: screen; pointer-events:none; z-index:1;
}
@keyframes ledDotsSweep{ to{ transform: rotate(360deg); } }

/* Nội dung nổi trên lớp trang trí */
.btn-led > *{ position: relative; z-index: 2; }

/* Icon trong nút */
.btn-led .ico{ font-size:1.1em; line-height:1; filter: drop-shadow(0 0 6px rgba(255,255,255,.25)); }

/* Hover/Active: 3D nhấn */
.btn-led:hover{
  transform: translateY(-2px);
  box-shadow:
    0 12px 34px rgba(0,0,0,.6),
    0 0 22px var(--glow),
    inset 0 0 14px rgba(255,255,255,.08);
  filter: brightness(1.03);
}
.btn-led:active{
  transform: translateY(6px);
  box-shadow:
    0 6px 20px rgba(0,0,0,.5),
    0 0 12px var(--glow),
    inset 0 0 8px rgba(255,255,255,.05);
  filter: brightness(.98);
}
.btn-led:disabled{
  opacity:.6; cursor:not-allowed; filter: grayscale(.15) brightness(.95);
}

/* ===== Biến thể màu chữ/LED nhanh ===== */
.btn-led-green{  --txt:#0aff9d; --led: rgba(0,255,170,.95); }
.btn-led-cyan{   --txt:#00ffd0; --led: rgba(0,255,208,.95); }
.btn-led-amber{  --txt:#ffd54a; --led: rgba(255,215,0,.95); }
.btn-led-red{    --txt:#ff6b6b; --led: rgba(255,70,70,.95); }

/* ===== Trạng thái danger (≤3s): LED & chữ đỏ, nháy nhanh hơn ===== */
.btn-led.danger{
  --txt:#ff2a2a; --led: rgba(255,70,70,.98);
  animation: btnPulseDanger .9s ease-in-out infinite alternate;
}
@keyframes btnPulseDanger{
  0%  { filter: brightness(1); }
  100%{ filter: brightness(1.06); }
}




/* ===== USER-INFO LED BAR ===== */
.userinfo-led{
  position: relative;
  display:flex; align-items:center; justify-content:space-between;
  gap:12px;
  padding:10px 12px;
  border-radius:14px;
  background: linear-gradient(145deg, rgba(10,10,10,.55), rgba(22,22,22,.88));
  border: 2px solid rgba(255,215,0,.9);
  box-shadow:
    0 10px 30px rgba(0,0,0,.55),
    0 0 18px rgba(255,215,0,.2),
    inset 0 0 12px rgba(255,255,255,.06);
  overflow:hidden; z-index:2;
}
.userinfo-led::before{
  content:""; position:absolute; inset:-2px; border-radius:16px; padding:2px;
  background: linear-gradient(130deg, gold, orange, red, gold);
  background-size:300% 300%; animation: uibBorder 12s linear infinite;
  -webkit-mask:linear-gradient(#000 0 0) content-box, linear-gradient(#000 0 0);
  -webkit-mask-composite:xor; mask-composite:exclude; pointer-events:none; z-index:0;
}
@keyframes uibBorder{0%{background-position:0 50%} 50%{background-position:100% 50%} 100%{background-position:0 50%}}

.userinfo-led::after{
  content:""; position:absolute; inset:8px; border-radius:10px;
  background: repeating-conic-gradient(from 0deg, rgba(0,255,170,.95) 0 8deg, rgba(0,0,0,0) 8deg 18deg);
  -webkit-mask: radial-gradient(closest-side, transparent calc(100% - 7px), #000 0);
          mask: radial-gradient(closest-side, transparent calc(100% - 7px), #000 0);
  filter: blur(.45px); animation: uibLeds 3.2s linear infinite;
  opacity:.9; mix-blend-mode: screen; pointer-events:none; z-index:1;
}
@keyframes uibLeds{to{transform:rotate(360deg)}}

.userinfo-led .scanlines{
  position:absolute; inset:0; z-index:2; pointer-events:none;
  background: linear-gradient(to bottom, rgba(255,255,255,.06) 0 1px, transparent 1px 3px);
  background-size:100% 4px; opacity:.28; mix-blend-mode: screen;
}

/* left */
.u-left{ position:relative; z-index:3; display:flex; align-items:center; gap:10px; min-width:0; }
.u-ava{
  width:40px; height:40px; border-radius:50%; background:#111 center/cover no-repeat;
  border:2px solid rgba(255,215,0,.85);
  box-shadow:0 0 12px rgba(255,215,0,.25), inset 0 0 8px rgba(255,255,255,.06);
}
.u-meta{ display:flex; flex-direction:column; min-width:0; }
.u-name{
  font-weight:900; color:#eaeaea; white-space:nowrap; overflow:hidden; text-overflow:ellipsis;
  text-shadow:0 0 6px rgba(255,255,255,.18);
}
.u-id{ font-size:.86rem; opacity:.8; color:#9ad7c4; letter-spacing:.02em; }

/* balance LED */
.u-balance{
  position:relative; z-index:3; display:flex; align-items:center; gap:8px;
}
.u-balance .lbl{
  font-weight:800; color:#FFD54A; text-shadow:0 0 6px #FFB300; letter-spacing:.06em;
}
.u-balance .val{
  font-family:'Digital-7 Mono', monospace;
  font-size:1.6rem; letter-spacing:2px; line-height:1;
  color:#39ff14; text-shadow:0 0 6px #39ff14, 0 0 14px #39ff14, 0 0 28px #39ff14;
}

/* actions (tái dùng btn-led đã có) */
.u-actions{ position:relative; z-index:3; display:flex; gap:8px; }

/* danger ≤3s: chuyển đỏ */
.userinfo-led.danger::after{
  background: repeating-conic-gradient(from 0deg, rgba(255,70,70,.95) 0 8deg, rgba(0,0,0,0) 8deg 18deg);
  filter: drop-shadow(0 0 10px rgba(255,70,70,.5));
}
.userinfo-led.danger .u-balance .val{
  color:#ff2a2a; text-shadow:0 0 6px #ff2a2a, 0 0 12px #ff0000;
}

/* responsive */
@media (max-width: 680px){
  .userinfo-led{ flex-wrap:wrap; gap:8px; }
  .u-actions{ width:100%; justify-content:flex-end; }
}
/* ====== CASINO ELECTRONIC UPGRADE for Result Modal ====== */

/* Lớp khung LED viền quanh modal (điện tử) */
#resultModal .led-bezel {
  position: absolute;
  inset: 0;
  pointer-events: none;
  background:
    radial-gradient(circle, rgba(255,255,150,.95) 55%, transparent 58%) top    / 22px 22px repeat-x,
    radial-gradient(circle, rgba(255,90,90,.95)   55%, transparent 58%) bottom / 22px 22px repeat-x,
    radial-gradient(circle, rgba(110,255,190,.95) 55%, transparent 58%) left   / 22px 22px repeat-y,
    radial-gradient(circle, rgba(90,160,255,.95)  55%, transparent 58%) right  / 22px 22px repeat-y;
  filter: drop-shadow(0 0 8px rgba(255,255,150,.35));
  animation: ledBlink2 1.4s steps(2,end) infinite;
  border-radius: 22px;
}

/* Viền neon chạy quanh modal */
#resultModal .neon-border {
  position: absolute; inset: -2px; border-radius: 24px; padding: 2px;
  background: linear-gradient(120deg, gold, #ff7a00, #ff3d3d, gold);
  background-size: 300% 300%;
  -webkit-mask: linear-gradient(#000 0 0) content-box, linear-gradient(#000 0 0);
  -webkit-mask-composite: xor; mask-composite: exclude;
  animation: borderShiftModal 10s linear infinite;
  pointer-events: none;
}

/* Màn LED hiển thị số (điện tử) */
#resultModal .led-panel {
  font-family: 'Digital-7 Mono', 'Poppins', monospace;
  letter-spacing: 2px;
  padding: 8px 14px;
  border-radius: 12px;
  background: linear-gradient(145deg, rgba(0,0,0,.6), rgba(22,22,22,.65));
  border: 1px solid rgba(255,215,0,.35);
  box-shadow: inset 0 0 8px rgba(255,255,255,.06), 0 0 12px rgba(255,215,0,.25);
  display: inline-block;
}

/* Header ticker kiểu bảng điện tử */
#resultModal .ticker {
  display: inline-block;
  padding: 4px 10px;
  border-radius: 10px;
  background: linear-gradient(145deg, #0c0c0c, #1b1b1b);
  box-shadow: inset 0 0 8px rgba(255,255,255,.08), 0 0 12px rgba(255,215,0,.18);
  border: 1px solid rgba(255,215,0,.3);
  font-weight: 800;
  text-transform: uppercase;
  letter-spacing: 1px;
}

/* Nâng cấp .modal-box sẵn có -> glass + nổi bật */
#resultModal .modal-box {
  background: rgba(10,10,10,.65);
  backdrop-filter: blur(12px) saturate(1.2);
  -webkit-backdrop-filter: blur(12px) saturate(1.2);
  position: relative;
  overflow: hidden;
}

/* Khung nội dung để thêm neon + led */
#resultModal .modal-inner {
  position: relative;
  z-index: 2;
}

/* Trạng thái màu hoá */
#resultModal.is-jackpot .modal-box { box-shadow: 0 0 40px rgba(255,215,0,.7), inset 0 0 18px rgba(255,255,255,.18); }
#resultModal.is-salad   .modal-box { box-shadow: 0 0 40px rgba(0,255,170,.55), inset 0 0 18px rgba(255,255,255,.18); }
#resultModal.is-lose    .modal-box { box-shadow: 0 0 40px rgba(255,60,60,.4),   inset 0 0 18px rgba(255,255,255,.12); }

/* Icon kết quả to + nhịp điện tử */
#modalResult {
  text-shadow: 0 0 10px gold;
  animation: pulseIcon 0.9s infinite alternate;
}

/* Pháo hoa */
#resultModal .fw-dot {
  position: absolute; width: 10px; height: 10px; border-radius: 50%;
  background: var(--c, gold); opacity: 0;
  animation: fw 900ms ease-out forwards;
}
@keyframes fw {
  0%   { transform: translate(0,0) scale(1); opacity: 1; }
  100% { transform: translate(var(--x,40px), var(--y,-60px)) scale(0.1); opacity: 0; }
}

/* Mưa chip */
#resultModal .chip-rain {
  position: absolute; top: -40px; width: 28px; height: 28px;
  background: url('https://cdn-icons-png.flaticon.com/512/523/523442.png') center/contain no-repeat;
  animation: chipFall 1.8s linear forwards;
  filter: drop-shadow(0 0 6px rgba(255,255,255,.5));
}
@keyframes chipFall {
  to { transform: translateY(640px) rotate(540deg); opacity: 0; }
}

/* LED + border animation */
@keyframes ledBlink2 { 0%,100% { opacity: 1; } 50% { opacity: 0.6; } }
@keyframes borderShiftModal {
  0% { background-position: 0% 50%; }
  50% { background-position: 100% 50%; }
  100%{ background-position: 0% 50%; }
}

/* Jackpot rung nhẹ */
#resultModal.is-jackpot .modal-box { animation: jackpotShake 600ms ease-in-out infinite; }
@keyframes jackpotShake {
  0%,100% { transform: translate(0,0); }
  25%     { transform: translate(-4px, 3px) rotate(-0.4deg); }
  50%     { transform: translate(5px, -3px) rotate(0.4deg); }
  75%     { transform: translate(-3px,-4px) rotate(-0.3deg); }
}




/* ========= AUTO BET – LED CASINO ========= */
:root{
  --ab-bg: rgba(10,12,20,0.75);
  --ab-border: #34d399;      /* xanh ngọc */
  --ab-border2:#0ea5a4;      /* teal */
  --ab-glow: #22d3ee;        /* cyan glow */
  --ab-text: #e5e7eb;
  --ab-muted:#94a3b8;
  --ab-card:#0b1020cc;
  --ab-accent:#38bdf8;
  --ab-success:#22c55e;
  --ab-danger:#ef4444;
  --ab-ghost:#64748b;
}

.historyBetModal{
  backdrop-filter: blur(6px);
  background: radial-gradient(60% 80% at 50% 50%, rgba(0,255,210,0.08), rgba(0,0,0,0.65));
}

.ab-modal{
  width: 680px;
  max-width: calc(100vw - 24px);
  max-height: calc(100vh - 24px);
  overflow: hidden;
  display: flex; flex-direction: column;
  background: linear-gradient(180deg, var(--ab-bg), rgba(6,9,16,0.9));
  border: 1px solid var(--ab-border);
  border-radius: 16px;
  box-shadow:
    0 0 0 1px rgba(34,211,238,0.25) inset,
    0 0 24px rgba(34,211,238,0.25),
    0 12px 40px rgba(0,0,0,0.6);
  position: relative;
  animation: abPop .18s ease-out;
}
@keyframes abPop{
  from{ transform: translateY(8px) scale(.98); opacity: 0; }
  to  { transform: translateY(0)   scale(1);   opacity: 1; }
}

.ab-header{
  display:flex; align-items:center; justify-content:space-between;
  padding: 12px 14px;
  border-bottom: 1px solid rgba(56,189,248,0.25);
  background: linear-gradient(90deg, rgba(56,189,248,0.08), rgba(56,189,248,0));
  cursor: move; user-select:none;
}
.ab-title{ display:flex; align-items:center; gap:10px; color: var(--ab-text); font-weight:700; }
.ab-icon{ filter: drop-shadow(0 0 8px var(--ab-glow)); }
.ab-badge{
  margin-left: 8px; font-size: 11px; letter-spacing:.3px; color:#a7f3d0;
  border:1px solid rgba(52,211,153,0.35); padding:2px 6px; border-radius:999px;
  background: linear-gradient(180deg, rgba(11,17,20,.35), rgba(11,17,20,.15));
  box-shadow: inset 0 0 10px rgba(34,211,238,.15);
}

.ab-subtitle{
  padding: 10px 14px; color: var(--ab-muted); font-size: 13px;
}

.ab-card{
  margin: 0 14px 12px; padding: 12px;
  border:1px solid rgba(56,189,248,.2);
  background: linear-gradient(180deg, var(--ab-card), rgba(8,12,18,.75));
  border-radius: 12px;
  box-shadow: inset 0 0 30px rgba(34,211,238,.06);
}
.ab-card-title{
  color: var(--ab-accent); font-weight: 700; font-size: 13px; margin-bottom:10px;
  text-shadow: 0 0 12px rgba(56,189,248,.35);
}

.ab-grid{
  display: grid; grid-template-columns: repeat(2, minmax(0,1fr));
  gap: 10px;
}
@media (min-width: 680px){
  .ab-grid{ grid-template-columns: repeat(4, minmax(0,1fr)); }
}
.ab-field{
  display:flex; align-items:center; justify-content:space-between; gap:10px;
  padding:8px 10px; color: var(--ab-text); font-size: 14px;
  background: linear-gradient(180deg, rgba(18,26,40,.65), rgba(8,12,18,.35));
  border:1px solid rgba(148,163,184,.2);
  border-radius:10px;
}

.ab-input{
  width: 120px; max-width: 45%;
  background: rgba(2,6,12,.5);
  border:1px solid rgba(56,189,248,.25);
  color: var(--ab-text);
  padding:8px 10px; border-radius:10px; font-weight:700;
  box-shadow: inset 0 0 10px rgba(34,211,238,.12);
  outline: none;
}
.ab-input::placeholder{ color: rgba(148,163,184,.6); font-weight:500; }
/* Ẩn spinner số (trình duyệt webkit) */
.ab-input::-webkit-outer-spin-button,
.ab-input::-webkit-inner-spin-button{ -webkit-appearance: none; margin: 0; }
.ab-input[type=number]{ -moz-appearance: textfield; }

.ab-row{
  display:flex; gap:12px; align-items:flex-end; padding: 0 14px 8px;
}
@media (max-width: 520px){
  .ab-row{ flex-direction: column; align-items: stretch; }
  .ab-input{ max-width: 100%; width: 100%; }
}

.ab-switch{ position: relative; display:flex; align-items:center; gap:10px; }
.ab-switch input{ display:none; }
.ab-switch-slider{
  width: 46px; height: 26px; border-radius:999px;
  background: rgba(71,85,105,.6);
  border:1px solid rgba(148,163,184,.3);
  box-shadow: inset 0 0 8px rgba(0,0,0,.5);
  position: relative; transition: all .18s ease;
}
.ab-switch-slider::after{
  content:""; position:absolute; top:2px; left:2px; width:22px; height:22px; border-radius:50%;
  background: radial-gradient(circle at 30% 30%, #fff, #e2e8f0);
  box-shadow: 0 2px 8px rgba(0,0,0,.45);
  transition: all .18s ease;
}
.ab-switch input:checked + .ab-switch-slider{
  background: linear-gradient(90deg, #34d399, #22d3ee);
  box-shadow: 0 0 14px rgba(34,211,238,.45);
  border-color: rgba(34,211,238,.5);
}
.ab-switch input:checked + .ab-switch-slider::after{ transform: translateX(20px); }
.ab-switch-label{ color: var(--ab-text); font-weight:600; font-size: 13px; }

.ab-actions{
  display:flex; gap:10px; padding: 10px 14px 2px; flex-wrap: wrap;
}
.ab-btn{
  padding:10px 14px; border-radius:12px; font-weight:800; letter-spacing:.2px;
  border:1px solid rgba(148,163,184,.25);
  background: linear-gradient(180deg, rgba(15,23,42,.85), rgba(2,6,23,.85));
  color: var(--ab-text);
  box-shadow:
    inset 0 0 12px rgba(34,211,238,.12),
    0 6px 18px rgba(0,0,0,.45);
  transform: translateY(0); transition: transform .08s ease, box-shadow .2s ease, border-color .2s ease;
}
.ab-btn:hover{ box-shadow: 0 0 18px rgba(34,211,238,.25), 0 8px 26px rgba(0,0,0,.6); }
.ab-btn:active{ transform: translateY(1px); }
.ab-btn-primary{ border-color: rgba(56,189,248,.45); }
.ab-btn-success{
  border-color: rgba(34,197,94,.45);
  background: linear-gradient(180deg, rgba(20,83,45,.7), rgba(2,44,34,.85));
}
.ab-btn-danger{
  border-color: rgba(239,68,68,.45);
  background: linear-gradient(180deg, rgba(80,18,26,.7), rgba(44,2,11,.85));
}
.ab-btn-ghost{
  border-color: rgba(100,116,139,.4);
  background: linear-gradient(180deg, rgba(15,23,42,.4), rgba(15,23,42,.2));
  color:#cbd5e1;
}

.ab-note{
  padding: 8px 14px 14px; color: #a7f3d0; font-size: 12px;
  text-shadow: 0 0 10px rgba(34,211,238,.25);
}

/* ánh sáng quét ngang */
.ab-scanline{
  pointer-events:none; position:absolute; left:0; right:0; top:0; height: 80px;
  background: linear-gradient(180deg, rgba(34,211,238,.25), rgba(34,211,238,0));
  filter: blur(10px); opacity:.5; animation: abScan 3s linear infinite;
}
@keyframes abScan{
  0%{ transform: translateY(-60px); opacity:.0; }
  10%{opacity:.5;}
  50%{ transform: translateY(120%); opacity:.25; }
  100%{ transform: translateY(140%); opacity:0; }
}


/* Rung nhẹ khi thiếu tiền */
@keyframes shakeX { 0%,100%{transform:translateX(0)} 20%{transform:translateX(-4px)} 40%{transform:translateX(4px)} 60%{transform:translateX(-3px)} 80%{transform:translateX(3px)} }
.shake-x{ animation: shakeX .6s ease; }

/* Nhấp nháy ghi chú cảnh báo */
@keyframes warnPulse { 0%{text-shadow:0 0 0 rgba(239,68,68,0)} 50%{text-shadow:0 0 12px rgba(239,68,68,.9)} 100%{text-shadow:0 0 0 rgba(239,68,68,0)} }
.ab-warn-pulse{ color:#fecaca !important; animation: warnPulse 1.2s ease; }

/* ====== AUTO BET LAUNCH BUTTON – LED CASINO ====== */
.ab-launch{
  --ab1:#34d399; --ab2:#22d3ee; --ab3:#38bdf8; --txt:#e5e7eb;
  position:relative; display:inline-flex; align-items:center; gap:10px;
  padding:10px 16px; border-radius:16px; font-weight:800; letter-spacing:.2px;
  color:var(--txt); background:rgba(7,12,22,.75); border:1px solid rgba(56,189,248,.35);
  box-shadow:
    inset 0 0 12px rgba(34,211,238,.12),
    0 6px 16px rgba(0,0,0,.45), 0 0 22px rgba(34,211,238,.15);
  cursor:pointer; transform:translateY(0);
  transition: box-shadow .2s ease, transform .08s ease, border-color .2s ease, background .2s ease;
  backdrop-filter: blur(3px);
  overflow:hidden;
}
.ab-launch::before{
  /* viền gradient động */
  content:""; position:absolute; inset:-2px; border-radius:18px; z-index:0;
  background:conic-gradient(from 0deg, var(--ab1), var(--ab2), var(--ab3), var(--ab1));
  filter: blur(10px); opacity:.35; transition:opacity .2s linear;
  animation: abGrad 3s linear infinite;
}
@keyframes abGrad{ to{ transform: rotate(360deg);} }
.ab-launch::after{
  /* viền mảnh nổi */
  content:""; position:absolute; inset:0; border-radius:16px; z-index:0;
  border:1px solid rgba(148,163,184,.2);
  box-shadow: inset 0 0 12px rgba(34,211,238,.12);
}
.ab-launch:hover{
  box-shadow:
    inset 0 0 18px rgba(34,211,238,.18),
    0 10px 26px rgba(0,0,0,.6),
    0 0 28px rgba(34,211,238,.3);
}
.ab-launch:active{ transform:translateY(1px); }

.ab-launch__icon{ position:relative; z-index:1; filter: drop-shadow(0 0 10px rgba(34,211,238,.6)); }
.ab-launch__label{ position:relative; z-index:1; font-size:14px; }

/* LED trạng thái */
.ab-launch__led{
  position:relative; z-index:1; width:11px; height:11px; border-radius:50%;
  box-shadow: 0 0 8px rgba(2,6,23,.6) inset, 0 0 0 1px rgba(148,163,184,.25);
  background: radial-gradient(circle at 30% 30%, #94a3b8, #475569);
}
.ab-launch.is-on .ab-launch__led{
  background: radial-gradient(circle at 30% 30%, #dcfce7, #22c55e);
  box-shadow:
    0 0 10px rgba(34,197,94,.9),
    0 0 0 1px rgba(34,197,94,.45),
    inset 0 0 10px rgba(34,197,94,.6);
}
.ab-launch.is-on{
  border-color: rgba(34,197,94,.5);
  background: linear-gradient(180deg, rgba(7,20,14,.75), rgba(3,14,10,.75));
}

/* Ripple click */
.ab-launch .ab-ripple{
  position:absolute; border-radius:999px; transform:translate(-50%,-50%) scale(0);
  background: radial-gradient(circle, rgba(56,189,248,.35), rgba(56,189,248,0) 60%);
  width:220px; height:220px; pointer-events:none; z-index:0;
  animation: abRipple .45s ease-out forwards;
}
@keyframes abRipple{
  to{ transform:translate(-50%,-50%) scale(1); opacity:0; }
}


/* ===== Lux balance box (drop-in) ===== */
.balance-box {
  position: relative;
  align-items: center;
  gap: 45px;
  padding: 20px 26px;
  border-radius: 16px;
  background: linear-gradient(160deg, #151515, #1f1f1f);
  border: 1px solid rgba(255,255,255,.12);
  box-shadow:
    inset 0 0 14px rgba(255,255,255,.06),
    0 10px 28px rgba(0,0,0,.45);
}

/* logo xu tròn kim loại */
.balance-icon {
  width: 44px; height: 44px; border-radius: 50%;
  display: grid; place-items: center;
  background:
    radial-gradient(circle at 30% 30%, #fff, #cfd3da 55%, #9aa1ac 75%, #6b717d 100%);
  box-shadow:
    inset 0 2px 6px rgba(255,255,255,.35),
    inset 0 -6px 12px rgba(0,0,0,.35),
    0 0 12px rgba(255,215,0,.25);
  border: 2px solid rgba(255,215,0,.35);
  font-size: 1.2rem; color:#111;
}

/* nhãn và số */
.balance-label {
  font-size:.9rem; color:#a9b0b3;
  letter-spacing:.2px;
}
.balance-value {
  font: 900 1.7rem/1 "Digital-7 Mono", monospace; /* đã import sẵn */
  color:#00ff95;
  text-shadow: 0 0 8px #00ff95, 0 0 18px #00ffaa, 0 0 36px #00ffcc;
}

/* ánh sáng quét nhẹ */
.balance-box::after{
  content:"";
  position:absolute; inset:0; border-radius:inherit;
  background: linear-gradient(120deg, rgba(255,255,255,0) 0%,
                                         rgba(255,255,255,.12) 50%,
                                         rgba(255,255,255,0) 100%);
  transform: translateX(-120%) skewX(-18deg);
  animation: sweep 6s ease-in-out infinite;
  pointer-events:none;
}
@keyframes sweep{
  0%{ transform: translateX(-120%) skewX(-18deg); }
  55%,100%{ transform: translateX(120%) skewX(-18deg); }
}

/* nhấp nháy khi số dư cập nhật */
.balance-value.balance-bounce{
  animation: balancePop .5s ease;
}
@keyframes balancePop{
  0%{ transform: scale(1); filter:brightness(1); }
  50%{ transform: scale(1.08); filter:brightness(1.3); }
  100%{ transform: scale(1); filter:brightness(1); }
}

/* gọn trên mobile */
@media (max-width:600px){
  .balance-box{ padding:12px 14px; }
  .balance-value{ font-size:1.5rem; }
  .balance-icon{ width:200px; height:200px; }
}
/* ========== HISTORY v2 (casino neon + glass) ========== */
.history{
  --bg:#0a0f1a;
  --glass:rgba(10,15,26,.55);
  --glass2:rgba(255,255,255,.06);
  --neon:#32ffe6;
  --gold:#ffd76a;
  --danger:#ff5d6c;
  --win:#00f5a4;
  --lose:#ff6b6b;
  --txt:#eef3ff;
  --sub:#a6b0c8;
  --radius:18px;

  position:relative;
  border-radius:var(--radius);
  overflow:hidden;
  color:var(--txt);
  background: linear-gradient(180deg, rgba(17,26,40,.8), rgba(7,12,24,.6));
  box-shadow:
    0 20px 50px rgba(0,0,0,.55),
    inset 0 0 0 1px rgba(255,255,255,.05);
}

/* viền ánh kim chạy */
.history::before{
  content:"";
  position:absolute; inset:0; pointer-events:none;
  padding:1.5px; border-radius:calc(var(--radius) + 6px);
  background: conic-gradient(from 0deg, var(--neon), var(--gold), #9b59ff, var(--neon));
  background-size:200% 200%;
  animation: hxBorder 10s linear infinite;
  -webkit-mask:linear-gradient(#000 0 0) content-box, linear-gradient(#000 0 0);
  -webkit-mask-composite:xor; mask-composite:exclude;
}
@keyframes hxBorder{ 0%{background-position:0% 50%} 50%{background-position:100% 50%} 100%{background-position:0% 50%} }

/* Header */
.history__hdr{
  display:flex; align-items:center; justify-content:space-between;
  padding:12px 14px;
  background:
    radial-gradient(1200px 40px at 0% 0%, rgba(50,255,230,.12), transparent 60%),
    linear-gradient(180deg, rgba(255,255,255,.06), rgba(255,255,255,.02));
  border-bottom:1px solid var(--glass2);
}
.hdr-left{ display:flex; align-items:center; gap:10px }
.hdr-led{
  width:10px; height:10px; border-radius:999px;
  background: #39ff14; box-shadow: 0 0 10px #39ff14, 0 0 22px rgba(57,255,20,.6);
  animation: ledPulse 1.2s ease-in-out infinite;
}
@keyframes ledPulse{ 50%{ transform:scale(1.2); filter:brightness(1.6) } }
.hdr-title{
  font-weight:900; letter-spacing:.4px;
  text-shadow:0 0 10px rgba(50,255,230,.35);
}
.hdr-spark{
  margin-left:6px; color:var(--gold); text-shadow:0 0 10px rgba(255,215,106,.6);
  animation:spark 2.2s ease-in-out infinite;
}
@keyframes spark{ 50%{ transform:translateY(-1px) scale(1.25) } }

.hdr-actions{ display:flex; gap:8px }
.hx-btn{
  font:600 12px/1 system-ui; padding:8px 10px; border-radius:10px;
  background:rgba(255,255,255,.06); color:var(--txt);
  border:1px solid rgba(255,255,255,.12); cursor:pointer;
  transition:.2s ease; backdrop-filter:blur(6px);
}
.hx-btn:hover{ transform:translateY(-1px); box-shadow:0 8px 18px rgba(0,0,0,.25) }
.hx-btn.ghost{ background:transparent }
.hx-btn.danger{ border-color:rgba(255,93,108,.45); color:#ffdfe2 }

/* Toolbar: filters + stats */
.history__toolbar{
  display:flex; gap:16px; align-items:center; justify-content:space-between;
  padding:10px 14px; border-bottom:1px solid var(--glass2);
  background:rgba(255,255,255,.02);
}
.hx-seg{ display:flex; gap:6px; background:rgba(255,255,255,.04); padding:4px; border-radius:999px; }
.seg-btn{
  padding:6px 12px; border-radius:999px; border:1px solid transparent;
  background:transparent; color:var(--txt); font-weight:700; letter-spacing:.2px; cursor:pointer;
  transition:.2s;
}
.seg-btn.active{ background:linear-gradient(145deg, rgba(50,255,230,.18), rgba(50,255,230,.06)); border-color:rgba(50,255,230,.35) }
.seg-btn:hover{ transform:translateY(-1px) }

.hx-stats{ display:flex; gap:14px }
.stat{ min-width:88px; padding:6px 10px; border-radius:12px; background:rgba(255,255,255,.04); border:1px solid rgba(255,255,255,.06) }
.stat-k{ font-size:11px; color:var(--sub); letter-spacing:.3px }
.stat-v{ font-weight:900; margin-top:2px }
.stat-v.pl{ color:var(--win) }

/* List */
.history__listwrap{ position:relative }
.history__list{
  max-height:260px; overflow:auto; padding:12px 12px 14px;
  scrollbar-width: thin;
}
.history__list::-webkit-scrollbar{ width:8px }
.history__list::-webkit-scrollbar-thumb{
  background: linear-gradient(180deg, var(--neon), #8a7bff);
  border-radius: 8px;
}

/* Empty state */
.history__empty{
  position:absolute; inset:0; display:none; align-items:center; justify-content:center;
  flex-direction:column; gap:8px; color:var(--sub);
}
.empty-ico{ font-size:28px; opacity:.9 }

/* Item card */
.history__item{
  --glow: rgba(50,255,230,.25);
  display:flex; align-items:center; justify-content:space-between; gap:10px;
  padding:12px 10px; margin-bottom:10px;
  background: linear-gradient(180deg, rgba(255,255,255,.05), rgba(255,255,255,.02));
  border:1px solid rgba(255,255,255,.06); border-radius:14px;
  box-shadow:
    inset 0 0 10px rgba(255,255,255,.03),
    0 6px 20px rgba(0,0,0,.25);
  transform: translateZ(0);
  animation: slideIn .25s ease;
}
.history__item:hover{ box-shadow:0 10px 28px rgba(0,0,0,.35), 0 0 16px var(--glow) }
@keyframes slideIn{ from{ opacity:0; transform:translateY(6px)} to{opacity:1; transform:none} }

.item-left{ display:flex; align-items:center; gap:12px; min-width:0 }
.item-ico{ font-size:1.1rem; filter: drop-shadow(0 0 6px rgba(255,255,255,.25)) }
.item-main{ min-width:0 }
.item-line{ font-weight:900; white-space:nowrap; overflow:hidden; text-overflow:ellipsis }
.item-sub{ font-size:.82rem; color:var(--sub) }

.item-amount{ font-weight:1000; letter-spacing:.2px; white-space:nowrap }
.history__item.win{ --glow: rgba(0,245,164,.3) }
.history__item.win .item-amount{ color:var(--win); text-shadow:0 0 10px rgba(0,245,164,.35) }
.history__item.lose{ --glow: rgba(255,107,107,.25) }
.history__item.lose .item-amount{ color:var(--lose) }

/* trạng thái flash */
.history__item.flash{ animation: flash .6s ease }
@keyframes flash{
  0%{ filter:brightness(1.25) saturate(1.1); transform:scale(.98) }
  60%{ filter:none; transform:scale(1.01) }
  100%{ transform:none }
}

/* collapse */
.history.collapsed .history__toolbar,
.history.collapsed .history__listwrap{ display:none }
.history.collapsed .hdr-actions .ghost{ transform:rotate(-90deg) }

/* ==== LEFT PANEL BACKDROP ==== */
.left-panel{
  position: relative;
  overflow: hidden;                 /* giữ nền không tràn ra ngoài */
  border-radius: 18px;              /* bo góc đồng bộ */
  background: rgba(0,0,0,0.4);      /* lớp kính nhẹ */
  backdrop-filter: blur(6px) saturate(1.2);
  -webkit-backdrop-filter: blur(6px) saturate(1.2);
  border: 1.5px solid rgba(255,215,0,0.5);
}



/* Ảnh nền + làm tối để nội dung nổi bật */
.left-panel::before{
  content:"";
  position:absolute; inset:0;
  background:
    linear-gradient(rgba(0,0,0,.55), rgba(0,0,0,.55)),
    url("https://i.pinimg.com/736x/e7/1a/9c/e71a9c9078963c9f146d7af141dbaf02.jpg")
      center/cover no-repeat;
  z-index:-1;
  filter:saturate(1.1);             /* màu rực hơn chút */
}

/* Ánh sáng ambient chuyển động nhẹ tạo cảm giác “điện tử” */
.left-panel::after{
  content:"";
  position:absolute; inset:-10%;
  background:
    radial-gradient(35vmax 35vmax at 20% 25%, rgba(255,215,0,.14), transparent 60%),
    radial-gradient(35vmax 35vmax at 80% 75%, rgba(0,180,255,.12), transparent 60%);
  animation: lpAmbient 16s ease-in-out infinite alternate;
  pointer-events:none;
  z-index:-1;
  filter: blur(2px);
}
@keyframes lpAmbient{
  0%{ transform:translate3d(0,0,0) scale(1); }
  100%{ transform:translate3d(2%, -2%, 0) scale(1.03); }
}



/* ==== RIGHT PANEL – CASINO BACKDROP ==== */
.right-panel{
  /* đổi URL này thành ảnh bạn thích */
  --rp-bg: url("https://wallpaper.dog/large/20503711.jpg");

  position: relative;
  z-index: 0;                 /* để ::before/-1 không rơi ra ngoài */
  overflow: hidden;
  border-radius: 18px;
  min-height: 320px;          /* quan trọng để thấy nền nếu content ít */
  background: rgba(0,0,0,0.4);
  backdrop-filter: blur(6px) saturate(1.15);
  -webkit-backdrop-filter: blur(6px) saturate(1.15);
  border: 1.5px solid rgba(255,215,0,0.5);
}

/* Ảnh nền + lớp tối để chữ/element nổi bật */
.right-panel::before{
  content:"";
  position:absolute; inset:0;
  z-index:-1;
  background:
    linear-gradient(rgba(0,0,0,.55), rgba(0,0,0,.55)),
    var(--rp-bg) center/cover no-repeat;
  filter: saturate(1.1);
  pointer-events:none;
}

/* Ánh sáng ambient “điện tử” */
.right-panel::after{
  content:"";
  position:absolute; inset:-10%;
  z-index:-1; pointer-events:none; filter: blur(2px);
  background:
    radial-gradient(35vmax 35vmax at 22% 28%, rgba(255,215,0,.14), transparent 60%),
    radial-gradient(35vmax 35vmax at 80% 72%, rgba(0,180,255,.12), transparent 60%);
  animation: rpAmbient 16s ease-in-out infinite alternate;
}
@keyframes rpAmbient{
  0%{ transform:translate3d(0,0,0) scale(1); }
  100%{ transform:translate3d(-2%,2%,0) scale(1.03); }
}

/* ======= (Tuỳ chọn) Preset skins giống left panel ======= */
.right-panel.skin-roulette    { --rp-bg: url("https://images.pexels.com/photos/33267/casino-roulette-game-gambling.jpg?auto=compress&cs=tinysrgb&w=1600"); }
.right-panel.skin-lobby-neon  { --rp-bg: url("https://images.pexels.com/photos/340152/pexels-photo-340152.jpeg?auto=compress&cs=tinysrgb&w=1600"); }
.right-panel.skin-chips-bokeh { --rp-bg: url("https://cdn.pixabay.com/photo/2015/11/07/11/48/poker-1039289_1280.jpg"); }
.right-panel.skin-wiki        { --rp-bg: url("https://upload.wikimedia.org/wikipedia/commons/0/0a/Roulette_-_Christiansborg_Casino.jpg"); }

/* ======= (Tuỳ chọn) Fallback không ảnh: nền lưới neon ======= */
.right-panel.neon-grid::before{
  background:
    linear-gradient(rgba(0,0,0,.55), rgba(0,0,0,.55)),
    repeating-linear-gradient(0deg, rgba(0,255,200,.08) 0 1px, transparent 1px 40px),
    repeating-linear-gradient(90deg, rgba(0,255,200,.08) 0 1px, transparent 1px 40px),
    radial-gradient(circle at 30% 20%, rgba(255,0,120,.18), transparent 45%),
    radial-gradient(circle at 70% 80%, rgba(0,180,255,.18), transparent 45%),
    #000;
}

/* ============ CASINO CHIPS v2 (polish hơn) ============ */
:root{
  --chip-size: 76px;                    /* 60–92 tuỳ layout */
  --chip-font: "Inter", system-ui, -apple-system, Segoe UI, Roboto, Arial;
}

.chip{
  --c:#0ea5a4;                          /* màu nền chính (override theo mệnh giá) */
  --edge:#075a5a;                        /* viền đậm */
  --metal:#f6f7fb;                       /* vòng kim loại */
  --neon: rgba(0,255,200,.35);           /* glow khi chọn */
  width:var(--chip-size); height:var(--chip-size);
  border-radius:50%;
  position:relative; isolation:isolate; border:0; cursor:pointer;
  display:inline-grid; place-items:center;
  transition: transform .14s ease, filter .14s ease, box-shadow .14s ease;
  transform: translateZ(0);
  /* thân + khía ven (notches) */
  background:
    /* highlight mềm */
    radial-gradient(120% 120% at 28% 26%, rgba(255,255,255,.18), transparent 48%),
    /* vệt bóng viền */
    radial-gradient(110% 110% at 72% 78%, rgba(0,0,0,.15), transparent 50%),
    /* khía ven (kim loại/ màu xen kẽ) */
    conic-gradient(
      from -6deg,
      var(--metal) 0 8deg, var(--c) 8deg 22deg,
      var(--metal) 22deg 30deg, var(--c) 30deg 44deg,
      var(--metal) 44deg 52deg, var(--c) 52deg 66deg,
      var(--metal) 66deg 74deg, var(--c) 74deg 88deg,
      var(--metal) 88deg 96deg, var(--c) 96deg 110deg,
      var(--metal) 110deg 118deg, var(--c) 118deg 132deg,
      var(--metal) 132deg 140deg, var(--c) 140deg 154deg,
      var(--metal) 154deg 162deg, var(--c) 162deg 176deg,
      var(--metal) 176deg 184deg, var(--c) 184deg 198deg,
      var(--metal) 198deg 206deg, var(--c) 206deg 220deg,
      var(--metal) 220deg 228deg, var(--c) 228deg 242deg,
      var(--metal) 242deg 250deg, var(--c) 250deg 264deg,
      var(--metal) 264deg 272deg, var(--c) 272deg 286deg,
      var(--metal) 286deg 294deg, var(--c) 294deg 308deg,
      var(--metal) 308deg 316deg, var(--c) 316deg 330deg,
      var(--metal) 330deg 338deg, var(--c) 338deg 352deg,
      var(--metal) 352deg 360deg
    ),
    radial-gradient(circle at 50% 50%, var(--c) 0 60%, var(--edge) 60% 100%);
  box-shadow:
    0 10px 18px rgba(0,0,0,.35),
    inset 0 0 0 2px rgba(255,255,255,.22),
    inset 0 0 0 8px rgba(0,0,0,.10);
}

/* vòng kim loại + hoa văn “pips” nhỏ tạo cảm giác dập */
.chip::before{
  content:"";
  position:absolute; inset:12%;
  border-radius:50%;
  background:
    /* ánh sáng mềm */
    radial-gradient(circle at 30% 30%, rgba(255,255,255,.45), transparent 48%),
    radial-gradient(circle at 70% 70%, rgba(0,0,0,.18), transparent 58%),
    /* lấm chấm rất mịn như dập */
    radial-gradient(circle, rgba(0,0,0,.08) 1px, transparent 2px) 0 0/6px 6px,
    var(--metal);
  box-shadow:
    inset 0 0 0 2px rgba(0,0,0,.08),
    inset 0 8px 18px rgba(0,0,0,.20);
  z-index:1;
  mask:
    radial-gradient(circle at 50% 50%, #000 62%, transparent 63%),
    radial-gradient(circle at 50% 50%, transparent 0 0); /* giữ mép mịn */
}

/* số mệnh giá (dập nổi) */
.chip::after{
  content: attr(data-value);
  position:absolute; inset:0; display:grid; place-items:center;
  font: 800 20px/1 var(--chip-font);
  letter-spacing:.4px;
  color:#222;
  text-shadow:
    0 1px 0 rgba(255,255,255,.95),
    0 -1px 0 rgba(0,0,0,.22),
    0 0 18px rgba(255,255,255,.25);
  z-index:2;
}

/* viền ánh kim mảnh (foil) chạy quanh mép trong */
.chip .foil{
  position:absolute; inset:9.5%;
  border-radius:50%;
  box-shadow: inset 0 0 0 1.5px rgba(255,255,255,.55);
  background:
    conic-gradient(from 0deg,
      rgba(255,255,255,.0) 0 20%,
      rgba(255,255,255,.35) 20% 24%,
      rgba(255,255,255,.0) 24% 50%,
      rgba(255,255,255,.35) 50% 54%,
      rgba(255,255,255,.0) 54% 100%);
  mix-blend-mode: screen;
  pointer-events:none; z-index:3;
  opacity:.9;
}

/* highlight quét */
.chip .glint{
  position:absolute; inset:-30%;
  background: linear-gradient(75deg, transparent 42%, rgba(255,255,255,.28) 50%, transparent 58%);
  transform: translateX(-120%) rotate(8deg);
  filter: blur(1px);
  pointer-events:none; z-index:4;
}
.chip:hover .glint{ animation: chipGlint 1s ease forwards; }
@keyframes chipGlint{ to{ transform: translateX(120%) rotate(8deg); } }

/* hover/active */
.chip:hover{ transform: translateY(-2px); }
.chip:active{ transform: translateY(1px) scale(.985); filter: brightness(.98); }

/* chọn (đang dùng) */
.chip.is-selected{
  box-shadow:
    0 0 0 3px rgba(255,255,255,.24),
    0 0 26px var(--neon),
    inset 0 0 0 8px rgba(0,0,0,.10);
}

/* disable theo số dư */
.chip.is-disabled{ filter: grayscale(.9) brightness(.75); cursor:not-allowed; }

/* ===== MÀU THEO MỆNH GIÁ ===== */
.chip-10   { --c:#22c55e; --edge:#126b38; }
.chip-50   { --c:#0ea5a4; --edge:#075a5a; }
.chip-100  { --c:#3b82f6; --edge:#1e40af; }
.chip-500  { --c:#a855f7; --edge:#5b21b6; }
.chip-1k   { --c:#f59e0b; --edge:#92400e; }
.chip-5k   { --c:#ef4444; --edge:#7f1d1d; }

/* ===== BIẾN THỂ “PREMIUM GOLD” (cho 10k, jackpot…) ===== */
.chip-premium{
  --c: #c8a24a; --edge:#7a5a12; --metal:#fff9e6; --neon: rgba(255,215,0,.45);
  background:
    radial-gradient(120% 120% at 28% 26%, rgba(255,240,200,.3), transparent 48%),
    radial-gradient(110% 110% at 72% 78%, rgba(120,80,10,.25), transparent 50%),
    conic-gradient(from -6deg,
      #fff1b0 0 8deg, #c8a24a 8deg 22deg,
      #fff1b0 22deg 30deg, #c8a24a 30deg 44deg,
      #fff1b0 44deg 52deg, #c8a24a 52deg 66deg,
      #fff1b0 66deg 74deg, #c8a24a 74deg 88deg,
      #fff1b0 88deg 96deg, #c8a24a 96deg 110deg,
      #fff1b0 110deg 118deg, #c8a24a 118deg 132deg,
      #fff1b0 132deg 140deg, #c8a24a 140deg 154deg,
      #fff1b0 154deg 162deg, #c8a24a 162deg 176deg,
      #fff1b0 176deg 184deg, #c8a24a 184deg 198deg,
      #fff1b0 198deg 206deg, #c8a24a 206deg 220deg,
      #fff1b0 220deg 228deg, #c8a24a 228deg 242deg,
      #fff1b0 242deg 250deg, #c8a24a 250deg 264deg,
      #fff1b0 264deg 272deg, #c8a24a 272deg 286deg,
      #fff1b0 286deg 294deg, #c8a24a 294deg 308deg,
      #fff1b0 308deg 316deg, #c8a24a 316deg 330deg,
      #fff1b0 330deg 338deg, #c8a24a 338deg 352deg,
      #fff1b0 352deg 360deg
    ),
    radial-gradient(circle at 50% 50%, #d8b459 0 60%, #7a5a12 60% 100%);
}
.chip-premium::after{ content: attr(data-value) "★"; }

/* ===== BIẾN THỂ “RAINBOW/NEON” (sự kiện đặc biệt) ===== */
.chip-rainbow{
  --edge:#1f2937;
  background:
    radial-gradient(120% 120% at 28% 26%, rgba(255,255,255,.18), transparent 48%),
    conic-gradient(from 0deg,
      #22c55e, #0ea5a4, #3b82f6, #a855f7, #f59e0b, #ef4444, #22c55e);
  background-blend-mode: normal, overlay;
  box-shadow:
    0 10px 18px rgba(0,0,0,.35),
    inset 0 0 0 2px rgba(255,255,255,.22),
    inset 0 0 0 8px rgba(0,0,0,.10);
}

/* size */
.chip.sm{ --chip-size: 60px; }
.chip.lg{ --chip-size: 90px; }

/* truy cập: giảm motion */
@media (prefers-reduced-motion: reduce){
  .chip:hover{ transform:none; }
  .chip .glint{ animation:none !important; }
}


/* ========== OUTER RING CHO Ô QUAY ==========
   - .wheel-ring là khung tròn bao ngoài
   - .wheel-core chứa ô quay hiện có
   - thêm .neon .metal .marquee để bật hiệu ứng
============================================= */

.wheel-ring{
  /* tuỳ biến nhanh */
  --size: 380px;               /* đường kính vòng ngoài */
  --rim1:#101827;              /* nền khung */
  --rim2:#0b1324;              /* bóng tối viền */
  --foil:#ffffffcc;            /* đường foil mảnh */
  --led:#32f5d2;               /* màu LED */
  --glow:rgba(0,255,200,.35);  /* ánh sáng lan */
  --gap: 26px;                 /* khoảng cách LED */
  --led-size:14px;             /* kích thước LED */

  position: relative;
  width: var(--size); height: var(--size);
  border-radius: 50%;
  background:
    radial-gradient(120% 120% at 28% 22%, rgba(255,255,255,.08), transparent 40%),
    radial-gradient(circle at 70% 80%, rgba(0,0,0,.35), transparent 55%),
    conic-gradient(from 0deg, #0c1427, #0c1020 25%, #0a0f1b 50%, #0c1020 75%, #0c1427);
  box-shadow:
    inset 0 0 0 12px var(--rim2),
    inset 0 0 0 2px rgba(255,255,255,.08),
    0 20px 40px rgba(0,0,0,.45),
    0 0 48px var(--glow);
  display:grid; place-items:center;
  isolation:isolate; overflow:visible;
}

/* viền kim loại mảnh (foil) */
.wheel-ring::before{
  content:"";
  position:absolute; inset:12px;
  border-radius:50%;
  box-shadow: inset 0 0 0 1.5px var(--foil);
  mix-blend-mode:screen; pointer-events:none;
  opacity:.9;
}

/* LED chạy quanh mép (4 lớp để phủ đủ 4 cạnh, scale theo size) */
.wheel-ring::after{
  content:"";
  position:absolute; inset:0; border-radius:50%; pointer-events:none;
  background:
    /* vòng LED */
    radial-gradient(circle at 10px 10px, var(--led) 0 40%, transparent 42%) 
      0 0/ var(--gap) var(--gap) repeat;
  -webkit-mask:
    radial-gradient(circle, transparent calc(50% - 1.2*var(--gap)), #000 calc(50% - 0.9*var(--gap)),
                            #000 calc(50% + 0.9*var(--gap)), transparent calc(50% + 1.2*var(--gap)));
  mask:
    radial-gradient(circle, transparent calc(50% - 1.2*var(--gap)), #000 calc(50% - 0.9*var(--gap)),
                            #000 calc(50% + 0.9*var(--gap)), transparent calc(50% + 1.2*var(--gap)));
  filter:
    drop-shadow(0 0 6px var(--glow))
    drop-shadow(0 0 14px var(--glow));
  z-index:2;
}

/* rãnh khắc đánh dấu (tick marks) */
.wheel-ring .ticks{
  position:absolute; inset:0; border-radius:50%; z-index:1; pointer-events:none;
  background:
    conic-gradient(from -90deg,
      rgba(255,255,255,.14) 0deg 2deg, transparent 2deg 45deg) repeat;
  -webkit-mask:
    radial-gradient(circle, transparent 0 58%, #000 58.2% 100%);
  mask:
    radial-gradient(circle, transparent 0 58%, #000 58.2% 100%);
  opacity:.6;
}

/* lõi trong — chứa wheel hiện có */
.wheel-core{
  width: calc(var(--size) - 64px);
  height: calc(var(--size) - 64px);
  border-radius:50%;
  background:
    radial-gradient(120% 120% at 25% 20%, rgba(255,255,255,.10), transparent 45%),
    radial-gradient(circle at 70% 80%, rgba(0,0,0,.25), transparent 55%),
    var(--rim1);
  box-shadow:
    inset 0 0 0 10px rgba(0,0,0,.35),
    inset 0 0 0 2px rgba(255,255,255,.08);
  display:grid; place-items:center;
  overflow:hidden;
}

/* neon mode */
.wheel-ring.neon{ box-shadow: 0 0 52px var(--glow), inset 0 0 0 12px var(--rim2); }
.wheel-ring.neon .wheel-core{ box-shadow: inset 0 0 0 10px rgba(0,0,0,.35), 0 0 24px var(--glow); }

/* metal mode (thêm chiều sâu) */
.wheel-ring.metal{
  background:
    radial-gradient(120% 120% at 28% 22%, rgba(255,255,255,.10), transparent 40%),
    conic-gradient(from 0deg, #121a2d, #0c1325 25%, #0a0f1b 50%, #0c1325 75%, #121a2d);
}

/* LED marquee: thêm class .marquee để LED “chạy vòng” */
.wheel-ring.marquee::after{
  animation: ringChase 1.25s linear infinite;
  background-position: 0 0;
}
@keyframes ringChase{
  to{ background-position: var(--gap) var(--gap); }
}

/* kim chỉ (optional) */
.wheel-pointer{
  --ptr: 18px;
  width:0; height:0;
  border-left: var(--ptr) solid transparent;
  border-right: var(--ptr) solid transparent;
  border-bottom: calc(var(--ptr) * 1.6) solid #ffd166;
  filter: drop-shadow(0 0 8px rgba(255,209,102,.6));
  margin:12px auto 0;
}

/* theme nhanh */
.wheel-ring.gold  { --led:#ffd166; --glow: rgba(255,209,102,.34); }
.wheel-ring.pink  { --led:#ff5db1; --glow: rgba(255,93,177,.34); }
.wheel-ring.blue  { --led:#60a5fa; --glow: rgba(96,165,250,.34); }

/* responsive gọn nhẹ */
@media (max-width: 480px){
  .wheel-ring{ --size: 300px; --gap:22px; }
}

/* ===== BET HISTORY – LED CASINO ===== */
:root{
  --bh-glow:#22d3ee; --bh-accent:#38bdf8; --bh-border:#34d399;
  --bh-text:#e5e7eb; --bh-muted:#94a3b8; --bh-card:#0b1020cc;
  --bh-win:#22c55e; --bh-lose:#ef4444;
}
.bh-btn{ padding:10px 14px; border-radius:12px; font-weight:800; letter-spacing:.2px; color:#e5e7eb;
  background: linear-gradient(180deg, rgba(15,23,42,.85), rgba(2,6,23,.85));
  border:1px solid rgba(148,163,184,.25);
  box-shadow: inset 0 0 12px rgba(34,211,238,.12), 0 6px 18px rgba(0,0,0,.45);
}
.bh-btn-ghost{ padding:8px 12px; border-radius:10px; color:#cbd5e1; border:1px solid rgba(100,116,139,.35);
  background: linear-gradient(180deg, rgba(15,23,42,.4), rgba(15,23,42,.2));
}
.bh-btn-primary{ border-color: rgba(56,189,248,.45); }
.bh-btn-danger{ border-color: rgba(239,68,68,.45); background: linear-gradient(180deg, rgba(80,18,26,.7), rgba(44,2,11,.85)); }

.historyBetModal{ backdrop-filter: blur(6px);
  background: radial-gradient(60% 80% at 50% 50%, rgba(0,255,210,0.08), rgba(0,0,0,0.65));
}
.bh-modal{
  width: 860px; max-width: calc(100vw - 24px); max-height: calc(100vh - 24px);
  display:flex; flex-direction:column; overflow:hidden; color: var(--bh-text);
  background: linear-gradient(180deg, rgba(10,12,20,.78), rgba(6,9,16,.92));
  border:1px solid var(--bh-border); border-radius:16px;
  box-shadow: 0 0 0 1px rgba(34,211,238,.2) inset, 0 12px 40px rgba(0,0,0,.6), 0 0 24px rgba(34,211,238,.22);
  position:relative; animation: bhPop .18s ease-out;
}
@keyframes bhPop{ from{transform:translateY(8px) scale(.98);opacity:0} to{transform:translateY(0) scale(1);opacity:1} }

.bh-header{
  display:flex; align-items:center; justify-content:space-between;
  padding:12px 14px; border-bottom:1px solid rgba(56,189,248,.25);
  background: linear-gradient(90deg, rgba(56,189,248,.08), rgba(56,189,248,0));
  cursor:move; user-select:none;
}
.bh-title{ display:flex; gap:10px; align-items:center; font-weight:800; }
.bh-icon{ filter: drop-shadow(0 0 8px var(--bh-glow)); }
.bh-badge{
  margin-left:6px; font-size:11px; color:#a7f3d0; border:1px solid rgba(52,211,153,.35);
  padding:2px 6px; border-radius:999px; background: linear-gradient(180deg, rgba(11,17,20,.35), rgba(11,17,20,.15));
  box-shadow: inset 0 0 10px rgba(34,211,238,.15);
}

.bh-toolbar{ display:flex; gap:12px; justify-content:space-between; padding:10px 12px 0; flex-wrap:wrap; }
.bh-filters{ display:flex; gap:10px; flex-wrap:wrap; }
.bh-field{
  display:flex; align-items:center; gap:8px; padding:8px 10px; border-radius:10px;
  background: linear-gradient(180deg, rgba(18,26,40,.65), rgba(8,12,18,.35));
  border:1px solid rgba(148,163,184,.2); color:var(--bh-text);
}
.bh-input{
  min-width: 180px; background: rgba(2,6,12,.5); border:1px solid rgba(56,189,248,.25); color:var(--bh-text);
  padding:8px 10px; border-radius:10px; font-weight:700; outline:none; box-shadow: inset 0 0 10px rgba(34,211,238,.12);
}
.bh-actions{ display:flex; gap:10px; flex-wrap:wrap; }

.bh-summary{
  display:grid; grid-template-columns: repeat(4, minmax(0,1fr)); gap:10px;
  padding:10px 12px; margin-top:8px;
}
.bh-s-item{
  text-align:center; padding:10px; border-radius:10px;
  border:1px solid rgba(56,189,248,.2);
  background: linear-gradient(180deg, var(--bh-card), rgba(8,12,18,.75));
  box-shadow: inset 0 0 30px rgba(34,211,238,.06);
}

.bh-list{ padding:10px 12px 14px; }
.bh-group{
  margin-top:12px; border-left:3px solid rgba(56,189,248,.35); padding-left:10px;
}
.bh-group-title{
  color:var(--bh-accent); font-weight:800; text-shadow:0 0 12px rgba(56,189,248,.35);
  margin-bottom:6px;
}

/* Item card */
.bh-item{
  position:relative; overflow:hidden;
  border:1px solid rgba(148,163,184,.25); border-radius:12px; padding:10px 12px; margin-bottom:8px;
  background: linear-gradient(180deg, rgba(15,23,42,.6), rgba(2,6,23,.6));
  box-shadow: inset 0 0 12px rgba(34,211,238,.1);
}
.bh-item .bh-top{
  display:flex; justify-content:space-between; gap:8px; flex-wrap:wrap; font-size:13px; color:var(--bh-muted);
}
.bh-item .bh-main{
  display:flex; gap:10px; align-items:center; flex-wrap:wrap; margin-top:6px;
}
.bh-dot{
  width:10px; height:10px; border-radius:50%;
  box-shadow: 0 0 10px rgba(34,211,238,.35);
  background: radial-gradient(circle at 30% 30%, #94a3b8, #475569);
}
.bh-item.win .bh-dot{ background: radial-gradient(circle at 30% 30%, #dcfce7, #22c55e); box-shadow: 0 0 10px rgba(34,197,94,.8); }
.bh-item.lose .bh-dot{ background: radial-gradient(circle at 30% 30%, #fecaca, #ef4444); box-shadow: 0 0 10px rgba(239,68,68,.8); }

.bh-badge{
  border:1px solid rgba(148,163,184,.3); padding:2px 6px; border-radius:999px; font-size:12px; color:#cbd5e1;
  background: linear-gradient(180deg, rgba(15,23,42,.4), rgba(15,23,42,.2));
}
.bh-badge-win{ border-color: rgba(34,197,94,.5); color:#bbf7d0; }
.bh-badge-lose{ border-color: rgba(239,68,68,.5); color:#fecaca; }

.bh-amt{ font-weight:800; }
.bh-kq b{ color:#e5e7eb; }
.bh-pl{ font-weight:800; }
.bh-pl.plus{ color:#bbf7d0; }
.bh-pl.minus{ color:#fecaca; }

.scroll-y{ max-height: 55vh; overflow:auto; }

.bh-scanline{
  pointer-events:none; position:absolute; left:0; right:0; top:0; height:80px;
  background: linear-gradient(180deg, rgba(34,211,238,.25), rgba(34,211,238,0));
  filter: blur(10px); opacity:.5; animation: bhScan 3s linear infinite;
}
@keyframes bhScan{
  0%{ transform: translateY(-60px); opacity:.0; }
  10%{opacity:.5;}
  50%{ transform: translateY(120%); opacity:.25; }
  100%{ transform: translateY(140%); opacity:0; }
}


/* ===== RESKIN .chip → PHÍM BẤM ĐIỆN TỬ ===== */
:root{
  --key-w: 88px;          /* rộng */
  --key-h: 64px;          /* cao */
  --key-r: 16px;          /* bo góc */
  --key-font: "Inter", system-ui, -apple-system, Segoe UI, Roboto, Arial;
}

/* base: biến chip tròn → nút vuông điện tử */
.chip{
  width: var(--key-w); height: var(--key-h);
  border-radius: var(--key-r);
  background: #0b1220 !important;
  border: 0;
  position: relative; isolation: isolate;
  display: inline-grid; place-items: center;
  cursor: pointer; overflow: hidden;
  box-shadow:
    0 14px 30px rgba(0,0,0,.35),     /* đổ bóng ngoài */
    inset 0 0 0 1px rgba(255,255,255,.10);  /* viền mảnh */
  transition: transform .12s ease, box-shadow .12s ease, filter .12s ease;
  /* theme mặc định; các mệnh giá sẽ override */
  --key-on:  #32f5d2;    /* neon */
  --key-off: #0f172a;    /* nền tối */
  --key-glow: rgba(0,255,200,.35);
}

/* mặt kính + lưới mạch điện */
.chip::before{
  content:"";
  position:absolute; inset:0;
  background:
    /* scanline mịn */
    repeating-linear-gradient(0deg, rgba(255,255,255,.03) 0 1px, transparent 1px 3px),
    /* grid neon rất nhẹ */
    repeating-linear-gradient(90deg, rgba(0,255,200,.06) 0 1px, transparent 1px 18px),
    repeating-linear-gradient(0deg,   rgba(0,255,200,.06) 0 1px, transparent 1px 18px),
    linear-gradient(180deg, #0d1628, #0a1020);
  mix-blend-mode: screen;
  opacity:.9;
  z-index:0;
}

/* ánh sáng viền + nhịp thở nhẹ */
.chip{
  box-shadow:
    0 14px 30px rgba(0,0,0,.35),
    0 0 26px var(--key-glow),
    inset 0 0 0 1px rgba(255,255,255,.10);
  animation: keyBreath 2.6s ease-in-out infinite;
}
@keyframes keyBreath{
  0%,100%{ box-shadow: 0 14px 30px rgba(0,0,0,.35), 0 0 16px var(--key-glow), inset 0 0 0 1px rgba(255,255,255,.10); }
  50%    { box-shadow: 0 14px 30px rgba(0,0,0,.35), 0 0 28px var(--key-glow), inset 0 0 0 1px rgba(255,255,255,.12); }
}

/* highlight quét */
.chip::after{
  content:""; position:absolute; inset:-30%;
  background: linear-gradient(75deg, transparent 45%, rgba(255,255,255,.22) 50%, transparent 55%);
  transform: translateX(-120%) rotate(8deg);
  filter: blur(1px); pointer-events:none; z-index:2;
}
.chip:hover::after{ animation: shineSweep 1.2s ease; }
@keyframes shineSweep{ to{ transform: translateX(120%) rotate(8deg); } }

/* text mệnh giá (LED) — dùng span.denom cũ nếu có, ngược lại tạo ảo bằng data-value */
.chip > .denom{
  position: relative; z-index:3; padding:0 6px;
  font: 800 18px/1 var(--key-font); letter-spacing: .6px;
  color: var(--key-on); text-shadow:
    0 0 8px var(--key-glow),
    0 0 14px var(--key-glow);
  transform: translateY(1px);
}
.chip:not(:has(.denom))::marker{} /* noop để tránh lint */
.chip:not(:has(.denom))::before{ } /* giữ slot */

/* state */
.chip:hover{ transform: translateY(-2px); }
.chip:active{ transform: translateY(1px) scale(.985); filter: brightness(.98); }
.chip.is-selected{
  outline: 0;
  box-shadow:
    0 14px 30px rgba(0,0,0,.35),
    0 0 36px var(--key-glow),
    inset 0 0 0 2px rgba(255,255,255,.14);
}
.chip.is-disabled{ filter: grayscale(.85) brightness(.8); cursor: not-allowed; }

/* ===== MÀU THEO MỆNH GIÁ (giữ class cũ: chip-10, chip-50, …) ===== */
.chip-10   { --key-on:#22c55e; --key-glow: rgba(34,197,94,.35); }
.chip-50   { --key-on:#0ea5a4; --key-glow: rgba(14,165,164,.35); }
.chip-100  { --key-on:#3b82f6; --key-glow: rgba(59,130,246,.35); }
.chip-500  { --key-on:#a855f7; --key-glow: rgba(168,85,247,.35); }
.chip-1k   { --key-on:#f59e0b; --key-glow: rgba(245,158,11,.35); }
.chip-2k   { --key-on:#fb7185; --key-glow: rgba(251,113,133,.35); }
.chip-5k   { --key-on:#ef4444; --key-glow: rgba(239,68,68,.35); }
.chip-10k  { --key-on:#c8a24a; --key-glow: rgba(255,215,0,.38); }

/* size biến thể nếu cần */
.chip.sm{ --key-w:74px; --key-h:52px; --key-r:12px; }
.chip.lg{ --key-w:104px; --key-h:74px; --key-r:18px; }

/* trợ năng: tắt motion */
@media (prefers-reduced-motion: reduce){
  .chip{ animation:none; }
  .chip:hover::after{ animation:none; }
}



/* LED FRAME: minimal */
.led-frame.minimal{
  --radius:18px; --glow: rgba(0,255,200,.28);
  position:relative; border-radius:var(--radius); padding:16px;
  background: linear-gradient(180deg,#0c1222,#0a0f1b);
  box-shadow: 0 0 24px var(--glow), inset 0 0 0 1px rgba(255,255,255,.12);
}
.led-frame.minimal::before{
  content:""; position:absolute; inset:6px; border-radius:calc(var(--radius)-6px);
  box-shadow: inset 0 0 0 2px rgba(255,255,255,.55);
  mix-blend-mode:screen; pointer-events:none;
}


/* LED FRAME: dots */
.led-frame.dots{
  --radius:18px; --dot:#32f5d2; --glow:rgba(0,255,200,.32);
  position:relative; border-radius:var(--radius); padding:18px;
  background:#0b1220; box-shadow:0 0 28px var(--glow), inset 0 0 0 1px rgba(255,255,255,.1);
}
.led-frame.dots::after{
  content:""; position:absolute; inset:0; border-radius:inherit; pointer-events:none;
  background:
    radial-gradient(circle at 10px 10px, var(--dot) 0 40%, transparent 42%) 0 0/22px 22px repeat;
  -webkit-mask: radial-gradient(circle, transparent calc(50% - 14px), #000 calc(50% - 10px),
                                          #000 calc(50% + 10px), transparent calc(50% + 14px));
          mask: radial-gradient(circle, transparent calc(50% - 14px), #000 calc(50% - 10px),
                                          #000 calc(50% + 10px), transparent calc(50% + 14px));
  filter: drop-shadow(0 0 10px var(--glow));
}

.ui-neo-btn{
  padding:8px 12px;border-radius:12px;border:1px solid #2dffb6;background:#0b1320;color:#eafff7;
  box-shadow:0 0 12px rgba(45,255,182,.25);font-weight:600;letter-spacing:.3px;cursor:pointer
}
.ui-neo-btn:hover{box-shadow:0 0 16px rgba(45,255,182,.45)}


#howToOverlay[hidden]{ display:none !important; }

.howto-overlay{
  position:fixed;inset:0;background:rgba(0,0,0,.6);backdrop-filter:blur(4px);display:flex;align-items:center;justify-content:center;z-index:1100
}
.howto-modal{
  width:min(820px,92vw);max-height:min(86vh,980px);overflow:auto;
  background:linear-gradient(180deg,#0e1a2b,#0a1220);border:1px solid rgba(255,255,255,.12);
  border-radius:18px;box-shadow:0 10px 40px rgba(0,0,0,.5),0 0 24px rgba(0,255,170,.18);
  color:#e9fff8;padding:18px 18px 14px;position:relative
}
.howto-close{
  position:absolute;top:8px;right:10px;width:36px;height:36px;border-radius:50%;border:1px solid rgba(255,255,255,.2);
  background:#0c1626; color:#fff; font-size:20px; line-height:34px; cursor:pointer
}
.howto-modal h2{font-size:20px;margin:0 0 12px}
.howto-content{display:flex;flex-direction:column;gap:14px}
.howto-content h3{font-size:16px;margin:6px 0 6px;color:#bfffe8}
.howto-list{margin:6px 0 0 18px}
.howto-grid{display:grid;grid-template-columns:repeat(2,minmax(0,1fr));gap:8px;margin:8px 0 0}
.howto-grid div{background:rgba(255,255,255,.04);padding:8px;border-radius:10px;border:1px solid rgba(255,255,255,.08)}
@media (max-width:520px){.howto-grid{grid-template-columns:1fr}}


/* Ẩn hoàn toàn con trỏ hệ thống */
* { cursor: none !important; }

/* Tôn trọng trạng thái bận (đang quay/khóa cược) từ code hiện có */
.spin-animating, .lock-bets { cursor: progress !important; } /* giữ nguyên luồng UX gốc :contentReference[oaicite:1]{index=1} */

/* Container cursor */
#customCursor{
  position: fixed; top:0; left:0;
  width: 34px; height: 34px;
  transform: translate(-50%, -50%);
  pointer-events: none; z-index: 99999;
}

/* Mặc định hiển thị joystick, ẩn crosshair */
#customCursor .c-joy   { display: block;  filter: drop-shadow(0 0 6px #00eaff) drop-shadow(0 0 14px #00c8ff); }
#customCursor .c-cross { display: none;   filter: drop-shadow(0 0 8px #00fff6) drop-shadow(0 0 20px #00eaff); }

/* Khi hover vào .door: chuyển sang crosshair neon */
.door:hover ~ #customCursor .c-joy   { display: none; }
.door:hover ~ #customCursor .c-cross { display: block; animation: crossPulse 1.2s ease-in-out infinite; }

/* Nhấn chuột: nảy nhẹ (cả 2 chế độ) */
#customCursor.is-press { transform: translate(-50%, -50%) scale(1.16); transition: transform .08s ease; }

/* Nhấp nháy neon nhẹ cho crosshair */
@keyframes crossPulse {
  0%,100% { filter: drop-shadow(0 0 6px #00fff6) drop-shadow(0 0 14px #00c8ff); }
  50%     { filter: drop-shadow(0 0 10px #00fff6) drop-shadow(0 0 24px #00c8ff); }
}

/* Trên thiết bị cảm ứng: ẩn cursor custom */
@media (hover:none) and (pointer:coarse) { #customCursor{ display:none; } }





/* ===== RESULT MODAL — Greedy Neon Glass ===== */
#resultModal{
  position: fixed; inset: 0;
  display: none; justify-content: center; align-items: center;
  background: radial-gradient(120% 120% at 50% 50%, rgba(0,0,0,.72), rgba(0,0,0,.88));
  z-index: 13000;
  opacity: 0; transition: opacity .28s ease;
}
#resultModal.show{ display:flex; opacity:1; }
#resultModal.hide{ opacity:.0; }

#resultModal .modal-box{
  width: min(800px, 92vw);
  background: linear-gradient(160deg, rgba(10,10,12,.85), rgba(22,22,28,.9));
  backdrop-filter: blur(10px) saturate(1.15);
  -webkit-backdrop-filter: blur(10px) saturate(1.15);
  border-radius: 18px;
  padding: 18px;
  color: #fff;
  position: relative;
  overflow: hidden;
  animation: rsPop .22s ease;
  border: 2px solid rgba(255,215,0,.75);
  box-shadow: 0 18px 60px rgba(0,0,0,.55), 0 0 30px rgba(255,215,0,.25), inset 0 0 12px rgba(255,255,255,.07);
}

/* viền chuyển sắc chạy vòng */
#resultModal .modal-box::before{
  content:"";
  position:absolute; inset:-2px;
  border-radius: 20px;
  padding: 2px;
  background: conic-gradient(from 0deg, gold, #ff6a00, #ff2d55, #00eaff, gold);
  background-size: 200% 200%;
  animation: rsBorder 8s linear infinite;
  -webkit-mask: linear-gradient(#000 0 0) content-box, linear-gradient(#000 0 0);
  -webkit-mask-composite: xor; mask-composite: exclude;
  pointer-events:none; opacity:.45;
}

@keyframes rsBorder{ to{ transform: rotate(360deg); } }
@keyframes rsPop{ from{ transform: scale(.94); opacity:.75; } to{ transform: scale(1); opacity:1; } }

/* header */
.rs-head{
  display:flex; align-items:center; gap:12px;
  padding-bottom:8px; margin-bottom:12px;
  border-bottom: 1px solid rgba(255,215,0,.25);
}
.rs-icon{
  font-size: 2rem; line-height:1;
  filter: drop-shadow(0 0 10px rgba(255,215,0,.45));
}
.rs-title{
  font-weight: 900; font-size: 1.25rem;
  color: #ffd700;
  text-shadow: 0 0 12px #ffd700, 0 0 24px #ff9800;
}

/* số thắng lớn */
.rs-amount{
  margin: 8px 0 2px;
  font-weight: 900; font-size: 2.1rem; letter-spacing:.5px;
  color: #fff;
  text-align:center;
  text-shadow: 0 0 16px rgba(255,255,255,.35), 0 0 30px rgba(255,215,0,.3);
}

/* Grid thông tin phụ */
.rs-grid{
  display:grid; grid-template-columns: 1fr 1fr; gap:10px;
  margin: 10px 0 6px;
}
.rs-card{
  background: linear-gradient(160deg, rgba(255,255,255,.06), rgba(255,255,255,.02));
  border: 1px solid rgba(255,215,0,.3);
  border-radius: 12px; padding: 10px 12px; text-align:center;
  box-shadow: inset 0 0 10px rgba(255,255,255,.06);
}
.rs-label{ font-size:.8rem; opacity:.85; }
.rs-value{ font-size:1.15rem; font-weight:800; margin-top:4px; color:#fff; }

/* badge sự kiện đặc biệt (Salad/Pizza) */
.rs-badge{
  display:inline-flex; align-items:center; gap:6px;
  padding:6px 10px; border-radius:999px;
  border:1px solid rgba(0,255,170,.6);
  background: radial-gradient(120% 120% at 30% 30%, rgba(0,255,170,.18), rgba(0,0,0,.1));
  color:#00ff95; font-weight:800; margin: 6px auto 2px;
  box-shadow: 0 0 16px rgba(0,255,170,.25);
}

/* Action */
.rs-actions{ display:flex; gap:10px; justify-content:center; margin-top: 12px; }
.rs-actions .btn-3d{ min-width: 120px; }

/* Trạng thái thắng/thua */
#resultModal .modal-box.win .rs-amount{ color:#00ffb3; text-shadow: 0 0 14px #00ffb3, 0 0 28px #00ffa5; }
#resultModal .modal-box.lose .rs-amount{ color:#ff5c7a; text-shadow: 0 0 14px #ff5c7a, 0 0 28px #ff2d55; }

/* Confetti mưa xu khi win (tuỳ chọn) */
.rs-confetti{
  position:absolute; inset:0; pointer-events:none; overflow:hidden; z-index:1;
}



/* ===== SPIN COUNTER (LED Neon Glass) ===== */
#spinCounter.sc-led{
  display:inline-block;
  min-width: 140px;
  padding: 10px 14px;
  border-radius: 14px;
  text-align: center;
  font-family: "Digital-7 Mono","DS-Digital","Orbitron",monospace;
  font-size: 42px;
  font-weight: 900;
  letter-spacing: 1.5px;

  color:#eaffff;
  background: linear-gradient(180deg, rgba(15,18,28,.85), rgba(10,12,20,.92));
  border: 2px solid rgba(255,215,0,.6);
  box-shadow:
    0 10px 24px rgba(0,0,0,.45),
    0 0 18px rgba(0,238,255,.25),
    inset 0 0 14px rgba(255,255,255,.06);

  position: relative;
  overflow: hidden;
  user-select: none;
}

/* Vệt sáng quét ngang */
#spinCounter.sc-led::before{
  content:"";
  position:absolute; inset:-40% -60%;
  background: conic-gradient(from 0deg, rgba(0,238,255,.18), rgba(255,215,0,.12), transparent 60%);
  animation: scSweep 6s linear infinite;
  pointer-events:none; mix-blend-mode: screen;
}
@keyframes scSweep { to { transform: rotate(360deg); } }

/* Scanline nhẹ như màn CRT */
#spinCounter.sc-led::after{
  content:"";
  position:absolute; inset:0;
  background: repeating-linear-gradient(
    to bottom,
    rgba(255,255,255,.06), rgba(255,255,255,.06) 2px,
    transparent 2px, transparent 5px
  );
  opacity:.08; pointer-events:none;
}

/* Màu/Glow theo trạng thái */
#spinCounter.sc-green{
  text-shadow: 0 0 8px rgba(0,255,200,.9), 0 0 18px rgba(0,238,255,.5);
  border-color: rgba(0,238,255,.55);
  box-shadow:
    0 10px 24px rgba(0,0,0,.45),
    0 0 18px rgba(0,238,255,.35),
    inset 0 0 14px rgba(0,255,200,.08);
}
#spinCounter.sc-amber{
  color:#fff3d2;
  text-shadow: 0 0 8px rgba(255,185,0,.9), 0 0 20px rgba(255,160,0,.55);
  border-color: rgba(255,185,0,.55);
}
#spinCounter.sc-red{
  color:#ffd7df;
  text-shadow: 0 0 8px rgba(255,45,85,.95), 0 0 22px rgba(255,45,85,.55);
  border-color: rgba(255,45,85,.6);
}

/* 3 giây cuối: chớp cảnh báo */
#spinCounter.sc-blink{
  animation: scBlink .65s steps(2,end) infinite;
}
@keyframes scBlink {
  0% { opacity: 1; filter: brightness(1.15); }
  50%{ opacity: .35; filter: none; }
  100%{ opacity: 1; filter: brightness(1.15); }
}

/* Phụ đề nhỏ dưới counter (nếu dùng) */
#spinCounter + .sc-sub{
  display:block; margin-top:4px; font-size:12px; letter-spacing:.3px;
  color:#bfefff; opacity:.9; text-align:center;
}


/* ===== RESULT SUMMARY (Neon Glass) ===== */
.rs-summary{
  margin-top: 6px;
  display: grid;
  gap: 10px;
  padding: 12px;
  border-radius: 16px;
  background: linear-gradient(160deg, rgba(255,255,255,.06), rgba(255,255,255,.02));
  border: 1px solid rgba(255,215,0,.28);
  box-shadow: inset 0 0 14px rgba(255,255,255,.06);
}

.rs-row{
  display: grid;
  grid-template-columns: 1fr auto;
  align-items: center;
  gap: 12px;
  padding: 10px 12px;
  border-radius: 12px;
  background: linear-gradient(180deg, rgba(10,14,22,.45), rgba(10,14,22,.25));
  position: relative;
  overflow: hidden;
}
.rs-row::before{
  content:"";
  position:absolute; inset:-60% -80%;
  background: conic-gradient(from 0deg, rgba(0,238,255,.15), rgba(255,215,0,.12), transparent 60%);
  mix-blend-mode: screen; opacity:.6;
  animation: rsRowShine 8s linear infinite;
  pointer-events:none;
}
@keyframes rsRowShine { to { transform: rotate(360deg); } }

.rs-label{
  font-weight: 800;
  font-size: .95rem;
  letter-spacing: .3px;
  color: #e9f6ff;
  padding: 6px 10px;
  border-radius: 999px;
  border: 1px solid rgba(0,238,255,.45);
  background: radial-gradient(120% 120% at 30% 30%, rgba(0,238,255,.16), rgba(0,0,0,.05));
  box-shadow: 0 0 12px rgba(0,238,255,.22);
  justify-self: start;
  white-space: nowrap;
}

/* Giá trị bên phải */
.rs-value{
  font-weight: 900;
  font-size: 1.15rem;
  letter-spacing: .3px;
  color: #fff;
  padding: 4px 10px;
  border-radius: 10px;
  text-shadow:
     0 0 6px rgba(255,255,255,.35),
     0 0 14px rgba(255,215,0,.25);
  background: linear-gradient(180deg, rgba(255,255,255,.05), rgba(255,255,255,.02));
  border: 1px solid rgba(255,215,0,.22);
  justify-self: end;
}

/* Nhấn mạnh kết quả cửa trúng */
.rs-value.highlight{
  color: #b8fff2;
  text-shadow:
     0 0 8px rgba(0,255,204,.75),
     0 0 18px rgba(0,238,255,.45);
  border-color: rgba(0,238,255,.45);
}

/* Số thắng & tiền đã cược */
.rs-value.win{
  color: #b8ffd9;
  text-shadow: 0 0 8px rgba(0,255,179,.8), 0 0 18px rgba(0,255,149,.5);
  border-color: rgba(0,255,170,.45);
}
.rs-value.bet{
  color: #ffe9bf;
  text-shadow: 0 0 8px rgba(255,185,0,.8), 0 0 18px rgba(255,160,0,.5);
  border-color: rgba(255,185,0,.45);
}

/* Responsive nhỏ gọn trên mobile */
@media (max-width: 420px){
  .rs-summary{ padding:10px; gap:8px; }
  .rs-row{ padding:8px 10px; }
  .rs-label{ font-size:.88rem; padding:5px 9px; }
  .rs-value{ font-size:1.05rem; padding:4px 8px; }
}



/* ===== Horizontal layout for Top Winners ===== */
.top-winners-modal.tw-horizontal {
  padding-bottom: 6px;
  position: relative;
}

/* Thanh danh sách chuyển sang ngang, kéo được */
.top-winners-modal.tw-horizontal .top-winners-list{
  display: flex;
  gap: 12px;
  overflow-x: auto;
  overflow-y: hidden;
  padding: 4px 2px 12px;
  scroll-snap-type: x mandatory;
  -webkit-overflow-scrolling: touch;
}

/* Ẩn/thẩm mỹ scrollbar */
.top-winners-modal.tw-horizontal .top-winners-list::-webkit-scrollbar { height: 8px; }
.top-winners-modal.tw-horizontal .top-winners-list::-webkit-scrollbar-thumb {
  background: linear-gradient(90deg, #00eaff66, #ffd70066);
  border-radius: 999px;
}
.top-winners-modal.tw-horizontal .top-winners-list::-webkit-scrollbar-track {
  background: rgba(255,255,255,.06); border-radius: 999px;
}

/* Mỗi item là 1 card chiều dọc, snap trúng giữa */
.top-winners-modal.tw-horizontal .top-winners-list li{
  scroll-snap-align: center;
  min-width: 200px;
  max-width: 220px;
  display: grid;
  grid-template-rows: auto auto auto auto;
  grid-template-columns: 1fr;
  gap: 8px;
  padding: 12px;
  border-radius: 14px;
  background: linear-gradient(180deg, rgba(10,14,22,.5), rgba(10,14,22,.3));
  border: 1px solid rgba(255,215,0,.22);
  position: relative;
  overflow: hidden;
}

/* Huy chương xếp hạng đặt ở góc trên trái */
.top-winners-modal.tw-horizontal .top-winners-list li::before{
  position: absolute;
  left: 10px; top: 10px;
  width: 28px; height: 28px;
  display: grid; place-items: center;
  font-weight: 900; font-size: 16px; color: #111;
  border-radius: 999px; background: #ffd700;
  box-shadow: 0 0 12px rgba(255,215,0,.6);
}
/* Top 1-3 dùng emoji medal */
.top-winners-modal.tw-horizontal .top-winners-list li:nth-child(1)::before{ content:"🥇"; background: transparent; box-shadow:none; font-size: 22px; color: #fff; text-shadow: 0 0 10px rgba(255,215,0,.6); }
.top-winners-modal.tw-horizontal .top-winners-list li:nth-child(2)::before{ content:"🥈"; background: transparent; box-shadow:none; font-size: 22px; color: #fff; text-shadow: 0 0 10px rgba(200,200,220,.6); }
.top-winners-modal.tw-horizontal .top-winners-list li:nth-child(3)::before{ content:"🥉"; background: transparent; box-shadow:none; font-size: 22px; color: #fff; text-shadow: 0 0 10px rgba(255,180,90,.6); }

/* Header user (avatar + tên) đẩy xuống cách medal 6px */
.top-winners-modal.tw-horizontal .tw-user{
  margin-top: 6px;
  display: flex; align-items: center; gap: 10px;
  min-width: 0;
}
.top-winners-modal.tw-horizontal .tw-ava{ flex: 0 0 30px; }
.top-winners-modal.tw-horizontal .tw-name{
  font-size: .98rem;
  overflow: hidden; white-space: nowrap; text-overflow: ellipsis;
}

/* Số xu thắng hiển thị lớn, nằm giữa */
.top-winners-modal.tw-horizontal .tw-amt{
  justify-self: start;
  font-size: 1.05rem;
  padding-left: 0;
}

/* Thanh tiến độ nằm cuối card */
.top-winners-modal.tw-horizontal .tw-bar-wrap{
  grid-column: 1 / -1;
  height: 8px; border-radius: 999px; overflow: hidden;
  background: rgba(255,255,255,.08); margin-top: 2px;
}

/* Nổi bật người chơi hiện tại */
.top-winners-modal.tw-horizontal .top-winners-list li.me{
  border-color: rgba(0,255,170,.55);
  box-shadow: 0 0 16px rgba(0,255,170,.25), inset 0 0 12px rgba(0,255,170,.08);
}

/* Gợi ý “kéo ngang” (fade mép) */
.top-winners-modal.tw-horizontal::after{
  content:"";
  position:absolute; right:0; top:0; bottom:0; width:36px;
  background: linear-gradient(90deg, transparent, rgba(0,0,0,.4));
  pointer-events:none;
}



/* ===== OVERLAY ===== */
.hb-overlay{
  display:none; position:fixed; inset:0; z-index: 12000;
  background: radial-gradient(120% 120% at 50% 50%, rgba(0,0,0,.70), rgba(0,0,0,.88));
  opacity:0; transition: opacity .25s ease;
  justify-content:center; align-items:center; padding: 18px;
}
.hb-overlay.show{ display:flex; opacity:1; }

/* ===== BOX ===== */
.hb-box{
  width: min(780px, 94vw);
  background: linear-gradient(160deg, rgba(10,10,15,.85), rgba(20,22,30,.92));
  border: 2px solid rgba(255,215,0,.75);
  border-radius: 18px; color:#fff; padding: 14px 14px 12px;
  position: relative; overflow: hidden;
  box-shadow: 0 18px 60px rgba(0,0,0,.55), 0 0 30px rgba(255,215,0,.22), inset 0 0 12px rgba(255,255,255,.06);
  animation: hbPop .22s ease;
}
@keyframes hbPop{ from{transform:scale(.94);opacity:.75} to{transform:scale(1);opacity:1} }
.hb-box::before{
  content:""; position:absolute; inset:-2px; border-radius:20px;
  background: conic-gradient(from 0deg, gold, #ff6a00, #ff2d55, #00eaff, gold);
  opacity:.35; animation: hbBorder 10s linear infinite;
  -webkit-mask: linear-gradient(#000 0 0) content-box, linear-gradient(#000 0 0);
  -webkit-mask-composite: xor; mask-composite: exclude; padding:2px; pointer-events:none;
}
@keyframes hbBorder{ to{ transform: rotate(360deg); } }

/* ===== HEAD ===== */
.hb-head{
  display:flex; align-items:center; justify-content:space-between;
  padding-bottom:8px; margin-bottom:10px; border-bottom:1px solid rgba(255,215,0,.28);
}
.hb-head h3{
  margin:0; font-weight:900; letter-spacing:.4px; font-size:1.15rem;
  background: linear-gradient(92deg, #fff7cc, #ffd700, #ff9800, #fff7cc);
  background-size:200% 100%; -webkit-background-clip:text; background-clip:text; color:transparent;
  animation: hbTitle 6s linear infinite; text-shadow:0 0 10px rgba(255,215,0,.45);
}
@keyframes hbTitle{ 0%{background-position:0 50%} 100%{background-position:200% 50%} }
.hb-close{
  background: transparent; border:none; color:#fff; font-size:1.2rem; cursor: pointer;
  filter: drop-shadow(0 0 6px gold); border-radius:10px; padding:6px 10px;
}
.hb-close:hover{ filter: drop-shadow(0 0 10px gold) brightness(1.1); }

/* ===== TOOLBAR ===== */
.hb-toolbar{
  display:flex; gap:8px; align-items:center; flex-wrap:wrap; margin-bottom:10px;
}
.hb-chip{
  padding:6px 10px; border-radius:999px; cursor:pointer; user-select:none;
  border:1px solid rgba(0,238,255,.45);
  background: radial-gradient(120% 120% at 30% 30%, rgba(0,238,255,.16), rgba(0,0,0,.05));
  color:#e9f6ff; font-weight:800; font-size:.9rem;
  box-shadow: 0 0 12px rgba(0,238,255,.22);
}
.hb-chip-on{
  border-color: rgba(0,255,170,.6);
  background: radial-gradient(120% 120% at 30% 30%, rgba(0,255,170,.18), rgba(0,0,0,.05));
  box-shadow: 0 0 14px rgba(0,255,170,.3);
}
#hbSearch{
  margin-left:auto; flex:1 1 220px; min-width:200px;
  padding:8px 10px; border-radius:10px; border:1px solid rgba(255,255,255,.15);
  background:#0f1522; color:#e9f6ff; outline:none;
  box-shadow: inset 0 0 10px rgba(255,255,255,.06);
}

/* ===== LIST ===== */
.hb-list{
  max-height: 380px; overflow:auto;
  background: linear-gradient(180deg, rgba(255,255,255,.04), rgba(255,255,255,.02));
  border:1px solid rgba(255,255,255,.08); border-radius:12px; padding:10px;
}

/* Scrollbar đẹp */
.hb-list::-webkit-scrollbar{ width:10px; }
.hb-list::-webkit-scrollbar-thumb{
  background: linear-gradient(180deg, #00eaff66, #ffd70066);
  border-radius:999px;
}
.hb-list::-webkit-scrollbar-track{ background: rgba(255,255,255,.06); border-radius:999px; }

/* ===== ACTIONS ===== */
.hb-actions{
  display:flex; gap:10px; justify-content:flex-end; margin-top:12px;
}

/* ===== MOBILE ===== */
@media (max-width: 520px){
  .hb-box{ width:96vw; padding:12px; }
  #hbSearch{ flex-basis:100%; min-width:0; }
}




/* ===== GROUP HEADER (by date) ===== */
.hb-group{
  margin: 10px 0 8px;
  padding: 8px 12px;
  border-radius: 12px;
  background: linear-gradient(160deg, rgba(255,255,255,.06), rgba(255,255,255,.02));
  border: 1px solid rgba(255,215,0,.22);
  display:flex; gap:12px; align-items:center; justify-content:space-between;
}
.hb-group .g-date{
  font-weight:900; color:#ffd76a;
  text-shadow:0 0 10px rgba(255,215,0,.45);
}
.hb-group .g-sum{
  display:flex; gap:10px; flex-wrap:wrap; font-size:.92rem;
}
.hb-group .g-pill{
  padding:4px 8px; border-radius:999px; white-space:nowrap;
  border:1px solid rgba(255,255,255,.15);
  background: rgba(0,0,0,.2);
}
.g-pill.bet{ color:#ffe9bf; border-color: rgba(255,185,0,.45); }
.g-pill.win{ color:#b8ffd9; border-color: rgba(0,255,170,.50); }
.g-pill.plp{ color:#b8ffd9; border-color: rgba(0,255,170,.50); }
.g-pill.pln{ color:#ffd0da; border-color: rgba(255,45,85,.50); }

/* ===== Empty state ===== */
.hb-empty{
  display:grid; place-items:center; gap:6px;
  padding:24px; border-radius:12px;
  border:1px dashed rgba(255,255,255,.18);
  color:#bfefff; text-align:center;
  background: linear-gradient(160deg, rgba(255,255,255,.03), rgba(255,255,255,.015));
}
.hb-empty .ico{ font-size: 28px; filter: drop-shadow(0 0 8px rgba(0,238,255,.5)); }

/* ===== Tiny badge cho “Phiên #id” bên trong card ===== */
.hist-spin.badge{
  padding:3px 8px; border-radius:999px;
  border:1px solid rgba(255,215,0,.35);
  background: radial-gradient(120% 120% at 30% 30%, rgba(255,215,0,.12), rgba(0,0,0,.06));
  color:#ffd76a; font-weight:800; font-size:.86rem;
}



/* ===== BET LOG (Neon) ===== */
.bet-log{
  display:grid; grid-template-columns: 42px 1fr auto;
  gap:10px; padding:10px 12px; margin:8px 0;
  border-radius:14px;
  background: linear-gradient(180deg, rgba(10,14,22,.5), rgba(10,14,22,.3));
  border:1px solid rgba(255,215,0,.22);
  box-shadow: inset 0 0 10px rgba(255,255,255,.05);
}
.bet-log .log-ico{
  width:42px; height:42px; border-radius:10px; display:grid; place-items:center;
  font-size:20px; background: radial-gradient(120% 120% at 30% 30%, #00eaff, #006b93);
  border:1px solid rgba(0,234,255,.5); box-shadow:0 0 10px rgba(0,234,255,.3);
}
.bet-log .log-main{ min-width:0; }
.bet-log .log-row{ display:flex; flex-wrap:wrap; gap:8px 12px; align-items:center; line-height:1.25; }
.log-time{
  font-size:.82rem; color:#cfe9ff; opacity:.9;
  padding:3px 8px; border-radius:999px;
  border:1px solid rgba(0,234,255,.35);
  background: radial-gradient(120% 120% at 30% 30%, rgba(0,234,255,.14), rgba(0,0,0,.06));
}
.log-spin{ font-weight:800; color:#ffd76a; text-shadow:0 0 8px rgba(255,215,0,.45); }
.log-bets{ display:flex; flex-wrap:wrap; gap:6px; }
.log-bets .chip{
  display:inline-flex; align-items:center; gap:6px;
  padding:4px 8px; border-radius:999px; font-weight:800; color:#e9f6ff;
  background: rgba(255,255,255,.06); border:1px solid rgba(255,255,255,.18);
}
.log-bets .chip b{ color:#fff; text-shadow:0 0 6px rgba(255,255,255,.35); }
.log-sum{
  font-weight:900; color:#ffe9bf; text-align:right; white-space:nowrap;
  text-shadow:0 0 8px rgba(255,185,0,.8), 0 0 18px rgba(255,160,0,.5);
}

/* Kết quả (bên phải) */
.log-outcome{
  text-align:right; min-width:160px; display:flex; flex-direction:column; gap:6px;
}
.log-result{
  font-weight:900; color:#b8fff2;
  text-shadow:0 0 8px rgba(0,255,204,.75), 0 0 18px rgba(0,238,255,.45);
}
.log-result.win{ color:#b8ffd9; text-shadow:0 0 8px rgba(0,255,179,.8), 0 0 18px rgba(0,255,149,.5); }
.log-result.lose{ color:#ffd0da; text-shadow:0 0 8px rgba(255,45,85,.85), 0 0 18px rgba(255,45,85,.5); }

/* Mobile */
@media (max-width:460px){
  .bet-log{ grid-template-columns: 36px 1fr; }
  .log-outcome{ grid-column:1 / -1; flex-direction:row; justify-content:space-between; }
}


/* Chip icon cho lựa chọn đặt */
.log-bets .chip{
  display:inline-flex; align-items:center; gap:6px;
  padding:4px 8px; border-radius:999px; font-weight:800; color:#e9f6ff;
  background: rgba(255,255,255,.06); border:1px solid rgba(255,255,255,.18);
}
.chip .ico{
  width:18px; height:18px; display:inline-grid; place-items:center; font-size:16px;
  filter: drop-shadow(0 0 4px rgba(255,255,255,.25));
}
.log-spin.badge{
  padding:3px 8px; border-radius:999px;
  border:1px solid rgba(255,215,0,.35);
  background: radial-gradient(120% 120% at 30% 30%, rgba(255,215,0,.12), rgba(0,0,0,.06));
  color:#ffd76a; font-weight:800; font-size:.86rem;
}


.door:hover{
  transform: translateZ(0) scale(1.06) translate(0,-150px); /* giữ offset vị trí đã có */
  box-shadow:
    0 12px 28px rgba(0,0,0,.45),
    0 0 22px rgba(0,238,255,.25),
    inset 0 0 12px rgba(255,255,255,.08);
  border-color: rgba(0,238,255,.45);
}




/* ===== Transfer History – Mini Neon ===== */
.txh{padding:10px 6px;font-family:Inter,system-ui,Segoe UI,Roboto,Arial}
.txh-empty{opacity:.85;color:#aab0c6;text-align:center;padding:16px 0}

.txh-day{position:sticky;top:0;z-index:1;margin:14px 0 8px}
.txh-day__label{
  display:inline-block;padding:6px 10px;border-radius:999px;font-weight:900;letter-spacing:.2px;
  color:#0c0d10;background:linear-gradient(135deg,#ffd54a,#48eaff);
  box-shadow:0 2px 12px rgba(72,234,255,.35), 0 0 0 1px rgba(255,255,255,.18) inset;
}

.txh-card{
  position:relative;display:grid;grid-template-columns:44px 1fr auto;gap:12px;align-items:center;
  margin:10px 0;padding:12px;border-radius:16px;
  background:linear-gradient(145deg,rgba(255,255,255,.03),rgba(0,0,0,.22));
  border:1px solid rgba(255,255,255,.12);
  box-shadow:inset 0 0 12px rgba(255,255,255,.05);
  transition:transform .18s ease, box-shadow .18s ease;
}
.txh-card:hover{transform:translateY(-2px);box-shadow:0 14px 30px rgba(0,0,0,.35), inset 0 0 16px rgba(255,255,255,.06)}
.txh-rail{position:absolute;left:22px;top:-10px;bottom:-10px;width:2px;background:linear-gradient(180deg,#ffd54a,transparent);opacity:.6}

.txh-ico{
  height:44px;width:44px;border-radius:12px;display:flex;align-items:center;justify-content:center;
  border:1px solid rgba(255,255,255,.18);background:#0f1117;font-size:1.05rem;
  box-shadow:inset 0 0 8px rgba(255,255,255,.06)
}

.txh-title{font-weight:900;color:#fff}
.txh-meta{font-size:.9rem;color:#bfc3d6;display:flex;gap:10px;flex-wrap:wrap}
.txh-amt{
  font-weight:900;color:#ffd54a;text-shadow:0 0 6px rgba(255,215,0,.35);
  padding:3px 8px;border-radius:999px;border:1px solid rgba(255,255,255,.16);
  background:linear-gradient(145deg,rgba(255,213,74,.18),rgba(72,234,255,.12));
}

.txh-right{display:flex;flex-direction:column;gap:6px;align-items:flex-end}
.txh-pill{padding:3px 8px;border-radius:999px;border:1px solid;font-weight:800;font-size:.78rem}
.txh-pill.out{color:#ffad3b;border-color:rgba(255,173,59,.5);background:rgba(255,173,59,.12)}
.txh-pill.in{color:#38ef7d;border-color:rgba(56,239,125,.45);background:rgba(56,239,125,.12)}
.txh-pill.failed{color:#ff5c7a;border-color:rgba(255,92,122,.5);background:rgba(255,92,122,.12)}

.txh-mini{font-size:.84rem;color:#9ea5bf}
@media (max-width:640px){ .txh-card{grid-template-columns:44px 1fr}.txh-right{align-items:flex-start} }




/* ===== Transfer History – Neon Glass ===== */
:root{
  --gold:#ffd54a; --cyan:#48eaff; --text:#f6f8ff; --dim:#aab0c6; --border:rgba(255,255,255,.12);
}
.thx-modal{display:none;position:fixed;inset:0;z-index:7000;font-family:Inter,system-ui,Segoe UI,Roboto,Arial}
.thx-modal.show{display:flex;align-items:center;justify-content:center;animation:thxIn .18s ease}
@keyframes thxIn{from{opacity:0;transform:scale(.98)}to{opacity:1;transform:scale(1)}}
.thx-backdrop{position:absolute;inset:0;background:rgba(0,0,0,.6);backdrop-filter:blur(2px)}

.thx-box{
  position:relative;width:min(720px,92vw);max-height:82vh;display:flex;flex-direction:column;overflow:hidden;
  background:linear-gradient(160deg,rgba(18,19,26,.92),rgba(10,12,18,.92));
  color:var(--text); border-radius:18px; border:1px solid transparent; background-clip:padding-box, border-box;
  box-shadow:0 20px 50px rgba(0,0,0,.6), inset 0 0 0 100vmax rgba(255,255,255,.02);
}
.thx-box::before{
  content:"";position:absolute;inset:0;border-radius:18px;padding:1px;pointer-events:none;
  background:linear-gradient(135deg,var(--gold),var(--cyan));
  -webkit-mask:linear-gradient(#000 0 0) content-box, linear-gradient(#000 0 0);
  -webkit-mask-composite:xor; mask-composite:exclude; opacity:.85;
}
.thx-noise{position:absolute;inset:-20%;background:url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" width="120" height="120"><filter id="n"><feTurbulence type="fractalNoise" baseFrequency="0.9" numOctaves="2" stitchTiles="stitch"/></filter><rect width="100%" height="100%" filter="url(%23n)" opacity="0.02"/></svg>') repeat;mix-blend-mode:overlay;pointer-events:none}
.thx-scan{position:absolute;inset:0;background:linear-gradient(180deg,transparent,rgba(255,255,255,.05),transparent);animation:thxScan 6s linear infinite;pointer-events:none}
@keyframes thxScan{0%{transform:translateY(-100%)}100%{transform:translateY(100%)}}

.thx-header,.thx-footer{
  position:sticky;top:0;z-index:2;backdrop-filter:blur(6px);
  background:linear-gradient(to bottom, rgba(255,213,74,.08), rgba(255,213,74,0));
  border-bottom:1px solid rgba(255,213,74,.25); padding:12px 14px; display:flex; align-items:center; justify-content:space-between;
}
.thx-footer{top:auto;bottom:0;border-top:1px solid rgba(255,213,74,.22);border-bottom:none;justify-content:flex-end}
.thx-header h3{margin:0;color:var(--gold);font-weight:900;letter-spacing:.2px;text-shadow:0 0 10px rgba(255,213,74,.45)}

.thx-btn{border:none;border-radius:12px;padding:9px 12px;font-weight:800;cursor:pointer}
.thx-btn--gold{background:linear-gradient(145deg,var(--gold),#ffb300);color:#1a1000;box-shadow:0 10px 22px rgba(255,213,74,.25)}
.thx-btn--gold:hover{filter:brightness(1.06)}
.thx-btn--ghost{background:rgba(255,255,255,.06);color:#fff;border:1px solid var(--border)}
.thx-btn--ghost:hover{background:rgba(255,255,255,.12)}

.thx-stats{display:grid;grid-template-columns:repeat(3,1fr);gap:10px;padding:10px 14px}
.thx-stat{background:linear-gradient(145deg,rgba(255,255,255,.03),rgba(0,0,0,.2));border:1px solid var(--border);border-radius:14px;padding:10px 12px}
.thx-stat__label{font-size:.85rem;color:var(--dim)}
.thx-stat__value{font-weight:900;color:var(--gold);text-shadow:0 0 8px rgba(255,215,0,.35)}

.thx-list{padding:10px 14px 16px;overflow:auto}
.thx-item{
  display:grid;grid-template-columns:44px 1fr auto;gap:12px;align-items:center;
  margin:10px 0;padding:12px;border-radius:14px;
  background:linear-gradient(145deg,rgba(255,255,255,.03),rgba(0,0,0,.22));
  border:1px solid var(--border); box-shadow:inset 0 0 12px rgba(255,255,255,.05);
}
.thx-rail{position:absolute;left:22px;top:-10px;bottom:-10px;width:2px;background:linear-gradient(180deg,var(--gold),transparent);opacity:.55}
.thx-ico{
  height:44px;width:44px;border-radius:12px;display:flex;align-items:center;justify-content:center;
  border:1px solid rgba(255,255,255,.18);background:#0f1117;font-size:1.05rem;box-shadow:inset 0 0 8px rgba(255,255,255,.06)
}
.thx-title{font-weight:900;color:#fff}
.thx-meta{font-size:.9rem;color:#bfc3d6;display:flex;gap:10px;flex-wrap:wrap}
.thx-amt{font-weight:900;color:var(--gold);text-shadow:0 0 6px rgba(255,215,0,.35);padding:3px 8px;border-radius:999px;border:1px solid var(--border);background:linear-gradient(145deg,rgba(255,213,74,.18),rgba(72,234,255,.12))}
.thx-right{display:flex;flex-direction:column;gap:6px;align-items:flex-end}
.thx-pill{padding:3px 8px;border-radius:999px;border:1px solid;font-weight:800;font-size:.78rem}
.thx-pill.out{color:#ffad3b;border-color:rgba(255,173,59,.5);background:rgba(255,173,59,.12)}
.thx-pill.in{color:#38ef7d;border-color:rgba(56,239,125,.45);background:rgba(56,239,125,.12)}
.thx-pill.failed{color:#ff5c7a;border-color:rgba(255,92,122,.5);background:rgba(255,92,122,.12)}

@media (max-width:640px){
  .thx-stats{grid-template-columns:1fr}
  .thx-item{grid-template-columns:44px 1fr}
  .thx-right{align-items:flex-start}
}




 </style>
</head>
<body>

<!-- Overlay Đăng nhập / Đăng ký -->
  <div id="loginOverlay">
 <video autoplay muted loop playsinline id="bgVideo">
    <source src="https://cdn.coverr.co/videos/coverr-roulette-wheel-4414/1080p.mp4" type="video/mp4">
 </video>
  <div class="login-box">
   
    <!-- Form Đăng nhập -->
    <div id="loginForm">
    <h2 class="neon-title login-title">🔑 Đăng nhập</h2>
    <input type="text" id="loginUser" placeholder="Tài khoản" 
    style="width:100%; padding:10px; margin:10px 0; border-radius:8px; border:1px solid #555;" autocomplete="off">
    <input type="password" id="loginPass" placeholder="Mật khẩu"
    style="width:100%; padding:10px; margin:10px 0; border-radius:8px; border:1px solid #555;" autocomplete="new-password">
    <button class="neon-btn btn-3d login-btn" onclick="handleLogin()"
    style="width:100%; padding:10px; margin-top:10px; border:none;
    border-radius:8px; font-weight:bold;
    background:linear-gradient(145deg,gold,orange);">
    Đăng nhập
    </button>
    <p style="margin-top:10px; font-size:14px;">
    Chưa có tài khoản? 
    <a href="#" onclick="showRegister()" style="color:deepskyblue;">Đăng ký</a>
    </p>
    <p id="loginMsg" style="margin-top:10px; color:red;"></p>
    </div>

    <!-- Form Đăng ký -->
    <div id="registerForm" style="display:none;">
    <h2 class="neon-title register-title">📝 Đăng ký</h2>
    <input type="text" id="regUser" placeholder="Tài khoản mới" 
    style="width:100%; padding:10px; margin:10px 0; border-radius:8px; border:1px solid #555;" autocomplete="off">
    <input type="password" id="regPass" placeholder="Mật khẩu"
    style="width:100%; padding:10px; margin:10px 0; border-radius:8px; border:1px solid #555;" autocomplete="new-password">
    <input type="password" id="regPass2" placeholder="Xác nhận mật khẩu"
    style="width:100%; padding:10px; margin:10px 0; border-radius:8px; border:1px solid #555;" autocomplete="new-password">
    <input type="text" id="regKeycode" placeholder="Nhập keycode"
    style="width:100%; padding:10px; margin:10px 0; border-radius:8px; border:1px solid #555;" autocomplete="off">

    <button class="neon-btn btn-3d register-btn" onclick="handleRegister()"
    style="width:100%; padding:10px; margin-top:10px; border:none;
    border-radius:8px; font-weight:bold; background:deepskyblue;">
    Đăng ký
    </button>
    <p style="margin-top:10px; font-size:14px;">
    Đã có tài khoản? 
    <a href="#" onclick="showLogin()" style="color:gold;">Đăng nhập</a>
    </p>
    <p id="registerMsg" style="margin-top:10px; color:red;"></p>
    </div>
</div>
</div>


 <div class="game-container">

<!-- Brand Logo
<a class="brand-logo" href="#" aria-label="Greedy Casino Home">
  <span class="brand-greedy">Greedy King</span>
  <span class="brand-dice" aria-hidden="true">🥗</span>
  <span class="brand-casino">VIP GAME</span>
</a>
-->

<div class="left-panel">

<!--
<br>
 <h1>🥗Greedy🥗</h1>
-->
 
<div class="time-display" style = "display:none"> <span id="currentTime">--:--:--</span></div>
<div id="spinCounter" class="sc-led sc-green"></div> <br>
<div style="display:none" id="wheel-container">
<div style="display:none" id="wheel">
</div>
</div>


<div class="stage">

<div class="halo-min-bright theme-bright-cyan" aria-hidden="true"></div>



<!--
<div class="casino-ring"></div>
-->

    <!-- Nan -->
    <div class="spokes">
      <div class="spoke" style="transform: rotate(0deg);"></div>
      <div class="spoke" style="transform: rotate(45deg);"></div>
      <div class="spoke" style="transform: rotate(90deg);"></div>
      <div class="spoke" style="transform: rotate(135deg);"></div>
      <div class="spoke" style="transform: rotate(180deg);"></div>
      <div class="spoke" style="transform: rotate(225deg);"></div>
      <div class="spoke" style="transform: rotate(270deg);"></div>
      <div class="spoke" style="transform: rotate(315deg);"></div>
    </div>


    <!-- Trục giữa-->
    <div class="hub">
    <div id="autoCountdown" style="margin-top:10px; font-weight:bold; color:#00ff95;"><span id="countdownValue"></span></div>
    </div>


   <!-- 8 cửa xung quanh -->
    <div class="doors">
      <div class="door" data-name="Mỳ" style="transform: rotate(0deg) translate(0, -150px)  rotate(0deg);">
        <img src="https://i.ibb.co/xq6ygsYt/hot-dog-hamburger-clip-art-png-favpng-p-Aw-Fevru-AWag-Bt-Mu-Dzw-Hv-Ucd-Z-removebg-preview.png" alt="Mỳ"> 
        <span class="bet-display">0</span>    
      </div>
      <div class="door" data-name="Xiên" style="transform: rotate(45deg) translate(0, -150px)  rotate(-45deg);">
        <img src="https://i.ibb.co/C5nLv53K/vector-cooked-food-illustration-design-2-263274-804-removebg-preview.png" alt="Xiên">   
        <span class="bet-display">0</span>       
      </div>
      <div class="door" data-name="Đùi" style="transform: rotate(90deg) translate(0, -150px)  rotate(-90deg);">
        <img src="https://i.ibb.co/TqtK3Ycw/healthy-food-daily-protein-pork-steak-fresh-nutrition-line-and-fill-style-icon-free-vector-removebg.png" alt="Đùi"> 
        <span class="bet-display">0</span>        
      </div>
      <div class="door" data-name="Bò" style="transform: rotate(135deg) translate(0, -150px)  rotate(-135deg);">
        <img src="https://i.ibb.co/SD1MD5xq/Meat-Graphics-22531436-1-580x387-removebg-preview.png" alt="Bò">
        <span class="bet-display">0</span>          
      </div>
      <div class="door" data-name="Rốt" style="transform: rotate(180deg) translate(0, -150px)  rotate(-180deg);">
        <img src="https://img.icons8.com/?size=100&id=6f2WYNoYqbXP&format=png&color=000000" alt="Rốt">  
        <span class="bet-display">0</span>       
      </div>
      <div class="door" data-name="Ngô" style="transform: rotate(225deg) translate(0, -150px)  rotate(-225deg);">
        <img src="https://img.icons8.com/?size=100&id=8Sli9YJl0SaW&format=png&color=000000" alt="Ngô">  
        <span class="bet-display">0</span>        
      </div>
      <div class="door" data-name="Cải" style="transform: rotate(270deg) translate(0, -150px)  rotate(-270deg);">
        <img src="https://img.icons8.com/?size=100&id=Bql9wRM8Aqkv&format=png&color=000000" alt="Cải"> 
        <span class="bet-display">0</span>         
      </div>
      <div class="door" data-name="Chua" style="transform: rotate(315deg) translate(0, -150px)  rotate(-315deg);">
        <img src="https://img.icons8.com/?size=100&id=lPmL0NaypRwo&format=png&color=000000" alt="Chua"> 
        <span class="bet-display">0</span>         
      </div>
    </div>
  </div>




<br> 


<div class="balance-box">
  <div class="chip-selector">
  <div class="chip" data-value="10"> <span class="denom">10</span> </div>
  <div class="chip" data-value="50"> <span class="denom">50</span> </div>
  <div class="chip" data-value="100"> <span class="denom">100</span> </div>
  <div class="chip" data-value="1000"> <span class="denom">1000</span>  </div>
 </div>


<div>
<button id="openAutoBetBtn" class="ab-launch" type="button">
  <span class="ab-launch__icon">⚙️</span>
  <span class="ab-launch__label">Auto Bet</span>
  <span class="ab-launch__led" aria-hidden="true"></span>
</button>
</div>

</div>



<div id="totalBetDisplay" style ="display:none"></div>


<div class="wallet-display">
<div class="balance-box">
<div class="balance-icon">💰</div>
<div class="balance-info">
<div class="balance-label">Số dư xu</div>
<div class="led-panel">
<div class="balance-value">
<span class="led-number" id="balance">0</span>
  </div>
  <svg id="openDepositArrow" class="arrow-icon" width="14" height="14" viewBox="0 0 24 24">
  <path d="M8 5l8 7-8 7" fill="none" stroke="black" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
  </svg>
</div>
</div>
</div>

<div class="history" id="history"><b>Result</b><br></div>

<div class="balance-box" id="stats">
<div class="stat-item">
<span class="stat-icon">📈</span>
<span class="stat-label">Lãi:</span>
<span class="stat-value profit">0 xu</span>
</div>
<div class="stat-item">
<span class="stat-icon">📉</span>
<span class="stat-label">Lỗ:</span>
<span class="stat-value loss">0 xu</span>
</div>
</div>
<br>
<div>
<h4 class="brand-greedy" >🥗 GREEDY KING 🥗</h4>
</div>

<!--

<div class="jackpot-box">
<div class="jackpot-icon">🎰</div>
<div class="jackpot-info">
<div class="jackpot-label">Jackpot</div>
 <div class="led-panel">
<div class="jackpot-value"><span id="jackpot">0</span></div>
  </div>
<progress id="jackpotProgress" max="1000000" value="0"></progress>
</div>
</div>
-->

</div>

<div class="result" id="result" style="display:none"></div>
<div id="suggestion" style="font-weight:bold; color:#00ccff; margin:10px 0;">
</div>
</div>


<div class="right-panel">

<div class="time-display">
<h1 class="brand-dice" aria-hidden="true">🎰 GREAT PARTY🎰</h1> 
<h2 class="brand-dice" aria-hidden="true">BIG WIN 1.000.000 COIN </h2>
<div class="brand-greedy">  </div>
<div class="jackpot-info">
<div class="brand-casino">  </div>
<div class="led-panel">
<div class="jackpot-value"><span id="jackpot">0</span></div>
</div>
<progress id="jackpotProgress" max="1000000" value="0"></progress>
</div>
</div>


<!--  class="bh-btn"  -->

<!-- Nút mở lịch sử -->
<button id="openHistoryBtn"  class="bh-btn">📜 Lịch sử cược</button>
<button id="openHistoryModal" class="bh-btn">📜 Lịch sử code</button>
<button id="openTransferHistoryBtn" class="bh-btn">💸 Lịch sử chuyển xu</button>
<button id="openHowToBtn" class="bh-btn">❓ Hướng dẫn</button>
<button id="logoutBtn" class="bh-btn">🚪 Đăng xuất</button>




 <form id="betForm" class="bet-section" style ="display:none">
  <div  class="bet-box" data-name="Chua"><span class="icon">🍅</span><span class="bet-amount">0</span><br><small>Win 5 times</small></div>  
  <div  class="bet-box" data-name="Cải"><span class="icon">🥦</span><span class="bet-amount">0</span><br><small>Win 5 times</small></div>  
  <div  class="bet-box" data-name="Ngô"><span class="icon">🌽</span><span class="bet-amount">0</span><br><small>Win 5 times</small></div>  
  <div  class="bet-box" data-name="Rốt"><span class="icon">🥕</span><span class="bet-amount">0</span><br><small>Win 5 times</small></div>  
  <div  class="bet-box" data-name="Mỳ"><span class="icon">🌭</span><span class="bet-amount">0</span><br><small>Win 10 times</small></div>
  <div  class="bet-box" data-name="Xiên"><span class="icon">🍢</span><span class="bet-amount">0</span><br><small>Win 15 times</small></div>
  <div  class="bet-box" data-name="Đùi"><span class="icon">🍖</span><span class="bet-amount">0</span><br><small>Win 25 times</small></div>
  <div  class="bet-box" data-name="Bò"><span class="icon">🥩</span><span class="bet-amount">0</span><br><small>Win 45 times</small></div>
</form>






<!-- Thông tin người dùng -->
<div class="ui-neo-btn" id="userInfoBar">
<img src="https://i.pravatar.cc/80" alt="Avatar" class="user-avatar">
<input type="file" id="avatarUpload" accept="image/*" style="display:none;">
<div class="user-details">
<div class="user-name">👤 Tên: <span id="userNameDisplay"></span></div>
<div class="user-id">🆔: <span id="userIdDisplay"></span></div>
<button id="changeNameBtn" class="ui-neo-btn">✏️ Đổi tên</button>
</div>
</div>
<div class="ui-neo-btn" id="notification"></div>

<br><br><br><br><br><br><br><br><br<br><br><br<br><br><br<br><br><br<br><br><br><br><br<br><br><br<br><br><br<br><br><br<br><br><br<br><br><br<br><br><br<br><br>



</div>

<!-- Modal lịch sử cược, lịch sử code, lịch sử chuyển xu, hướng dẫn, đăng xuất -->

<!-- Modal History Bet -->
<div id="historyBetModal" class="hb-overlay" aria-hidden="true">
<div class="hb-box" role="dialog" aria-modal="true" aria-labelledby="hbTitle">
<div class="hb-head">
<h3 id="hbTitle">📜 Lịch sử cược</h3>
<button id="closeHistoryBtn" class="hb-close" aria-label="Đóng">✕</button>
</div>
<div id="betHistory" class="hb-list">
<!-- bạn render các thẻ lịch sử vào đây (hist-item ...) -->
</div>
<div class="hb-actions">
</div>
</div>
</div>
<div id="stats" style="margin-top: 10px; font-weight: bold; color: #ffc107;">
</div>
<div> 
</div>


<!-- Modal lịch sử code -->
<div id="historyModal" style="display:none; position:fixed; top:0; left:0; width:100%; height:100%;
background: rgba(0,0,0,0.6); justify-content:center; align-items:center; z-index:7000;">
<div class="modal-box" style="background:#111; color:#fff; padding:20px; border-radius:15px; 
text-align:left; width:450px; border:2px solid gold; box-shadow:0 0 20px gold;">
<h3>📜 Lịch sử đổi code</h3>
<div id="codeHistoryList" 
style="max-height:300px; overflow-y:auto; background:#1d1d2c; padding:10px; border-radius:10px;">
</div>
<div style="margin-top:15px; text-align:center;">
<button id="closeHistoryModal" style="padding:8px 16px; background:red; color:#fff; border:none; border-radius:8px;">Đóng</button>
</div>
</div>
</div>


<!-- Modal lịch sử chuyển xu (Neon Glass) -->
<div id="transferHistoryModal" class="thx-modal">
  <div class="thx-backdrop" data-thx-close></div>

  <div class="thx-box">
    <div class="thx-header">
      <h3>📜 Lịch sử chuyển xu</h3>
      <button class="thx-btn thx-btn--ghost" id="closeTransferHistoryBtn" data-thx-close>✕</button>
    </div>
 
    <!-- danh sách -->
    <div id="transferHistoryList" class="thx-list"></div>

    <div class="thx-footer">
     
    </div>
    <div class="thx-noise"></div>
    <div class="thx-scan"></div>
  </div>
</div>


<!-- Modal lịch sử chuyển xu 
<div id="transferHistoryModal" style="display:none; position:fixed; top:0; left:0; width:100%; height:100%;
background: rgba(0,0,0,0.6); justify-content:center; align-items:center; z-index:7000;">
<div class="modal-box" style="background:#111; color:#fff; padding:20px; border-radius:15px; 
text-align:left; width:450px; border:2px solid gold; box-shadow:0 0 20px gold;">
<h3>📜 Lịch sử chuyển xu</h3>
<div id="transferHistoryList" 
style="max-height:300px; overflow-y:auto; background:#1d1d2c; padding:10px; border-radius:10px;">
</div>
<div style="margin-top:15px; text-align:center;">
<button id="closeTransferHistoryBtn" style="padding:8px 16px; background:red; color:#fff; border:none; border-radius:8px;">Đóng</button>
</div>
</div>
</div>
-->

<!-- ===== MODAL HƯỚNG DẪN ===== -->
<div id="howToOverlay" class="howto-overlay" hidden>
<div class="howto-modal" role="dialog" aria-modal="true" aria-labelledby="howtoTitle">
<button class="howto-close" id="closeHowToBtn" aria-label="Đóng hướng dẫn">×</button>
<h2 id="howtoTitle">📘 Hướng dẫn chơi Greedy King</h2>

<div class="howto-content">

<section>
<h3>1) Mục tiêu</h3>
<p>Game được thiết kế chỉ nhằm mục đích giải trí. Bất kỳ phần thưởng hoặc vật phẩm nhận được đều không có giá trị quy đổi thành tiền mặt. Game và phần thưởng có thể được sửa đổi hoặc chấm dứt bất cứ lúc nào mà không cần thông báo trước.</p>
<li>Chọn số lượng xu , xong lựa chọn tiếp loại mà bạn thích có thể tham gia trò chơi.</li>
<li>Mỗi vòng có 30 giây để lựa chọn, sau khi hết thời gian sẽ mở thưởng.</li>
<li>Nếu như kết quả mở thưởng giống với loại mà bạn chọn thì bạn có thể nhận được phần thưởng bội số xu tương ứng.</li>
<li>Quỹ thưởng càng lớn, cơ hội xuất hiện Pizza hoặc Salad sẽ càng tăng lên.</li>
<li>Kết quả cuối cùng do hệ thống tự động chọn ngẫu nhiên.</li>
<li>Trò chơi này được cung cấp bởi SWAG SOFT LLP.</li>
</section>

<section>
<h3>2) Các cửa &amp; hệ số</h3>
<div class="howto-grid">
<div><b>🍅</b> ×<span data-mul="Chua">5</span></div>
<div><b>🥦</b> ×<span data-mul="Cải">5</span></div>
<div><b>🌽</b> ×<span data-mul="Ngô">5</span></div>
<div><b>🥕</b> ×<span data-mul="Rốt">5</span></div>
<div><b>🌭</b> ×<span data-mul="Mỳ">10</span></div>
<div><b>🍢</b> ×<span data-mul="Xiên">15</span></div>
<div><b>🍖</b> ×<span data-mul="Đùi">25</span></div>
<div><b>🥩</b> ×<span data-mul="Bò">45</span></div>
</div>
</section>

<section>
<h3>3) Sự kiện đặc biệt</h3>
<ul class="howto-list">
<li><b>🥗 Salad</b>: thay thế kết quả thường. <u>Cả 4 cửa rau</u> (🍅, 🥦, 🌽, 🥕) cùng thắng. Trả thưởng = tổng cược từng cửa rau × hệ số cửa đó).</li>
<li><b>🍕 Pizza</b>: thay thế kết quả thường. <u>Cả 4 cửa thịt</u> (🌭, 🍢, 🍖, 🥩) cùng thắng. Trả thưởng = tổng cược từng cửa thịt × hệ số cửa đó).</li>
</ul>
</section>

<section>
<h3>4) Auto Bet</h3>
<p>Mở “Tự động đặt cược”, nhập số liệu cho từng cửa, sau đó Bắt đầu. Vòng quay kết thúc sẽ tự tiến hành đặt cược vòng kế tiếp theo lựa chọn đã lưu.</p>
</section>

<section>
<h3>5) Great Party</h3>
<p>Hũ Party tăng sau mỗi vòng. Có tỉ lệ nổ hũ nhất định và trả thưởng = 80% tổng hũ, 20% còn lại sẽ được tích lũy vào hũ.</p>
</section>

<section>
<h3>6) Lịch sử</h3>
<ul class="howto-list">
<li><b>Lịch sử kết quả</b>: lưu chuỗi icon 🥗/🍕/... &amp; bảng chi tiết theo vòng.</li>
<li><b>Lịch sử cược</b>: lưu toàn bộ vé cược của mỗi vòng, hiển thị Thắng/Thua &amp; Trả thưởng.</li>
<li><b>Lịch sử code</b>: lưu toàn bộ lịch sử đổi code và tạo code của người chơi.</li>
<li><b>Lịch sử chuyển xu</b>: lưu toàn bộ lịch sử chuyển xu của người chơi</li>
</ul>
</section>

</div>
</div>
</div>




<div style = "display :none;">
<input type="number" id="amount" placeholder="Nhập số xu">
<button onclick="confirmDeposit()">Nạp xu</button>
<button id="withdrawBtn" onclick="confirmWithdraw()">Rút xu</button>
</div> 

<!--
<div class="payout-table">
  <h2>📊 Bảng Tỷ Lệ Trả Thưởng</h2>
  <table>
  <tr><th>Ô thưởng</th><th>Icon</th><th>Tỷ lệ</th></tr>
  <tr><td>Cà chua</td><td>🍅</td><td>x5</td></tr>
  <tr><td>Bắp cải</td><td>🥦</td><td>x5</td></tr>
  <tr><td>Bắp ngô</td><td>🌽</td><td>x5</td></tr>
  <tr><td>Cà rốt</td><td>🥕</td><td>x5</td></tr>
  <tr><td>Xúc xích</td><td>🌭</td><td>x10</td></tr>
  <tr><td>Thịt xiên</td><td>🍢</td><td>x15</td></tr>
  <tr><td>Thịt đùi</td><td>🍖</td><td>x25</td></tr>
  <tr><td>Thịt bò</td><td>🥩</td><td>x45</td></tr>
  </table>
</div>
-->

</div>
<div class="historyB" id="betHistory" style="display:none"></div>


<audio id="spinSound" src="spin.mp3"></audio>
<audio id="winSound" src="win.mp3"></audio>
<audio id="bigWinSound" src="bigwin.mp3"></audio>



<!-- Modal thông tin nạp xu -->
<div id="depositInfoModal" style="display:none; position:fixed; top:0; left:0; width:100%; height:100%;
background: rgba(0,0,0,0.6); justify-content:center; align-items:center; z-index:6000;">
<div class="modal-box" style="background:#111; color:#fff; padding:20px; border-radius:15px; text-align:left; width:400px; border:2px solid gold; box-shadow:0 0 20px gold;">


<p id="depositStatus" style="color:orange; font-weight:bold; margin-top:10px;"></p>
<!-- 🔥 Thêm hạng mục nhập code -->
<div style="margin-top:15px;">
<label for="depositUserCode">🔑 Đổi code:</label><br>
<!-- Input nhập tay -->
<input type="text" id="depositUserCode" placeholder="Nhập mã code..." style="width:100%; padding:8px; border-radius:8px; border:1px solid gold; margin-top:10px;">
<!-- Nút xác nhận -->
<button id="verifyDepositCodeBtn" style="margin-top:10px; padding:8px 16px; background:gold; color:#000; border:none; border-radius:8px; font-weight:bold;">Xác nhận</button>
</div>

<!-- 🔄 Đổi xu thành code -->
<hr style="margin:15px 0; border:1px solid gold;">
<div style="margin-top:15px;">
<label for="convertAmount">🔑 Tạo Code:</label><br>
<input type="number" id="convertAmount" placeholder="Nhập số xu..." style="width:100%; padding:8px; border-radius:8px; border:1px solid gold; margin-top:10px;">
<button id="convertToCodeBtn" style="margin-top:10px; padding:8px 16px; background:deepskyblue; color:#fff; border:none; border-radius:8px; font-weight:bold;">Xác nhận</button>
<p id="generatedCode" style="margin-top:10px; font-weight:bold; color:lime;"></p>
</div>

<!-- 🔄 Chuyển xu cho người khác -->
<hr style="margin:15px 0; border:1px solid gold;">
<div style="margin-top:15px;">
<label for="transferUserId">💸 Chuyển Xu:</label><br>
<input type="text" id="transferUserId" placeholder="ID người nhận" 
style="width:100%; padding:8px; border-radius:8px; border:1px solid gold; margin-top:10px;">
<input type="number" id="transferAmount" placeholder="Nhập số xu..." 
style="width:100%; padding:8px; border-radius:8px; border:1px solid gold; margin-top:10px;">
<button id="transferCoinBtn" 
style="margin-top:10px; padding:8px 16px; background:orange; color:#000; border:none; border-radius:8px; font-weight:bold;">
Xác nhận
</button>
<p id="transferStatus" style="margin-top:10px; font-weight:bold; color:deepskyblue;"></p>
</div>

<!-- Nút đóng -->
<div style="margin-top:15px; text-align:center;">
<button id="closeDepositModal" style="padding:8px 16px; background:red; color:#fff; border:none; border-radius:8px;">Đóng</button>
</div>
</div>
</div>

<!-- Modal xác nhận chuyển xu -->
<div id="confirmTransferModal" style="display:none; position:fixed; top:0; left:0; width:100%; height:100%;
background: rgba(0,0,0,0.6); justify-content:center; align-items:center; z-index:8000;">
<div class="modal-box" style="background:#111; color:#fff; padding:20px; border-radius:15px; text-align:center; width:400px; border:2px solid gold; box-shadow:0 0 20px gold;">
<h3 style="margin-bottom:15px;">⚠️ Xác nhận chuyển xu</h3>
<p id="confirmTransferMessage" style="margin-bottom:20px;">Bạn có chắc chắn muốn chuyển ... xu?</p>
<div style="display:flex; justify-content:space-around;">
<button id="confirmTransferYes" style="padding:8px 16px; background:lime; color:#000; border:none; border-radius:8px; font-weight:bold;">✅ Đồng ý</button>
<button id="confirmTransferNo" style="padding:8px 16px; background:red; color:#fff; border:none; border-radius:8px;">❌ Huỷ</button>
</div>
</div>
</div>



<!-- Modal xác nhận đổi xu thành code -->
<div id="confirmConvertModal" style="display:none; position:fixed; top:0; left:0; width:100%; height:100%;
background: rgba(0,0,0,0.6); justify-content:center; align-items:center; z-index:8000;">
<div class="modal-box" style="background:#111; color:#fff; padding:20px; border-radius:15px; text-align:center; width:400px; border:2px solid gold; box-shadow:0 0 20px gold;">
<h3 style="margin-bottom:15px;">⚠️ Xác nhận</h3>
<p id="confirmMessage" style="margin-bottom:20px;">Bạn có chắc chắn muốn đổi ?</p>
<div style="display:flex; justify-content:space-around;">
<button id="confirmYes" style="padding:8px 16px; background:lime; color:#000; border:none; border-radius:8px; font-weight:bold;">✅ Đồng ý</button>
<button id="confirmNo" style="padding:8px 16px; background:red; color:#fff; border:none; border-radius:8px;">❌ Huỷ</button>
</div>
</div>
</div>






       



<!-- Modal thông tin rút xu -->
<div id="withdrawInfoModal" style="display:none; position:fixed; top:0; left:0; width:100%; height:100%;
background: rgba(0,0,0,0.6); justify-content:center; align-items:center; z-index:6000;">
<div class="modal-box" style="background:#111; color:#fff; padding:20px; border-radius:15px; text-align:left; width:400px; border:2px solid gold; box-shadow:0 0 20px gold;">
    <h3>🏦 Thông tin rút xu</h3>
    
    <label>Chủ tài khoản:</label>
    <input type="text" id="userName" placeholder="Nhập tên "><br><br>

    <label>Tên ngân hàng:</label>
    <input type="text" id="bankName" placeholder="Nhập tên ngân hàng"><br><br>

    <label>Số tài khoản:</label>
    <input type="text" id="userAccount" placeholder="Nhập số tài khoản"><br><br>

    <label>Số xu muốn rút:</label>
    <input type="number" id="withdrawAmount" placeholder="Nhập số xu"><br><br>

    <p id="withdrawStatus" style="margin:10px 0; font-weight:bold; color:orange;"></p>
    
<div style="margin-top:15px; text-align:center;">
<button id="sendWithdrawBtn" style="padding:8px 16px; background:green; color:#fff; border:none; border-radius:8px;">Gửi yêu cầu</button>
<button id="closeWithdrawModal" style="padding:8px 16px; background:red; color:#fff; border:none; border-radius:8px;">Đóng</button>
</div>
</div>
</div>



<!-- Modal thông báo kết quả -->
<div id="resultModal">
<div class="modal-box">

    <!-- viền neon/led -->
    <div class="neon-border"></div>
    <div class="modal-inner">
<h2>🎉 Kết quả quay 🎉</h2>
<div id="modalResult"></div>
<div class="rs-summary">
  <div class="rs-row">
    <span class="rs-label">🎯 Phiên quay</span>
    <span class="rs-value" id="modalSpin">—</span>
  </div>

  <div class="rs-row">
    <span class="rs-label">🏆 Kết quả</span>
    <span class="rs-value highlight" id="modalWinner">—</span>
  </div>

  <div class="rs-row">
    <span class="rs-label">💰 Chiến thắng</span>
    <span class="rs-value win" id="modalWin">+0</span>
  </div>

  <div class="rs-row">
    <span class="rs-label">🎲 Đã cược</span>
    <span class="rs-value bet" id="modalBet">0</span>
  </div>
</div>

<div id="topWinnersInModal" class="top-winners-modal">
<h3>🏆 Top thắng cược </h3>
<ol id="topWinnersListModal" class="top-winners-list"></ol>
<div class="top-note"></div>
</div>
</div>

</div>
</div>
</div>
</div>
</div>




<!-- Modal xác nhận nạp xu -->
<div id="depositConfirmModal" style="display:none; position:fixed; top:0; left:0; width:100%; height:100%;
background: rgba(0,0,0,0.6); justify-content:center; align-items:center; z-index:5000;">
<div class="modal-box" style="background:#111; color:#fff; padding:20px; border-radius:15px; text-align:center; width:350px; border:2px solid gold; box-shadow:0 0 20px gold;">
<h3>⚠️ Xác nhận nạp xu</h3>
<p id="depositConfirmText">Bạn có chắc muốn nạp ... xu?</p>
<div style="margin-top:15px; display:flex; justify-content:space-around;">
<button id="depositYes" style="padding:10px 20px; background:green; color:#fff; border:none; border-radius:8px;">Xác nhận</button>
<button id="depositNo" style="padding:10px 20px; background:red; color:#fff; border:none; border-radius:8px;">Hủy</button>
</div>
</div>
</div>




<!-- Modal xác nhận rút xu -->
<div id="withdrawConfirmModal" class="modal" style="display:none; position: fixed; top:0; left:0; width:100%; height:100%; background: rgba(0,0,0,0.6); justify-content:center; align-items:center; z-index:1000;">
<div style="background:#222; color:#fff; padding:20px; border-radius:12px; text-align:center; width:320px;">
<h3>⚠️ Xác nhận rút xu</h3>
<p id="withdrawConfirmText">Bạn có chắc chắn muốn rút ... xu?</p>
<div style="margin-top:15px; display:flex; justify-content:space-around;">
<button id="confirmYes" style="padding:8px 16px; background:green; color:#fff; border:none; border-radius:8px;">Xác nhận</button>
<button id="confirmNo" style="padding:8px 16px; background:red; color:#fff; border:none; border-radius:8px;">Hủy</button>
</div>
</div>
</div>


<!-- Modal đổi tên -->
<div id="changeNameModal" style="display:none; position:fixed; inset:0;
  background: rgba(0,0,0,0.55); backdrop-filter: blur(6px);
  justify-content:center; align-items:center; z-index:9000;">
  <div class="modal-box rename-box"
       style="width: min(92vw,420px); background:#0f0f0f; color:#fff; border-radius:16px;
              border:1px solid rgba(255,215,0,.6); padding:18px 16px; text-align:left;
              box-shadow:0 10px 40px rgba(0,0,0,.6), 0 0 25px rgba(255,215,0,.25);">
    <div style="display:flex; align-items:center; gap:12px; margin-bottom:10px;">
      <img class="rename-avatar" src="https://i.pravatar.cc/80" alt="Avatar"
           style="width:48px;height:48px;border-radius:50%;border:2px solid gold;box-shadow:0 0 10px gold;">
      <div>
        <h3 style="margin:0; font-size:18px;">✏️ Đổi tên người dùng</h3>
        <small style="opacity:.9">Tên dài 2–20 ký tự, không chỉ khoảng trắng.</small>
      </div>
    </div>

    <label for="newNameInput" style="font-size:13px;opacity:.9;">Tên mới</label>
    <input id="newNameInput" type="text" autocomplete="off" maxlength="20"
           placeholder="Nhập tên mới…"
           style="width:100%; padding:10px 12px; margin-top:6px; border-radius:10px;
                  border:1px solid #444; background:#1a1a1a; color:#fff; outline:none;">
    <div style="display:flex; justify-content:space-between; align-items:center; margin-top:6px;">
      <small id="nameHint" style="color:#aaa;">Hỗ trợ chữ có dấu</small>
      <small id="nameCounter" style="opacity:.85;">0/20</small>
    </div>

    <div id="nameError" style="display:none; margin-top:8px; color:#ff6b6b; font-weight:600;">
      ⚠️ Tên không hợp lệ.
    </div>

    <div style="display:flex; gap:10px; justify-content:flex-end; margin-top:14px;">
      <button id="cancelNameBtn"
              style="padding:10px 14px; border-radius:10px; border:1px solid #444; background:#1d1d1d; color:#fff;">
        ❌ Hủy
      </button>
      <button id="saveNameBtn"
              style="padding:10px 14px; border-radius:10px; border:none; font-weight:700;
                     background:linear-gradient(145deg, gold, orange); color:#000; box-shadow:0 0 12px gold;">
        ✅ Lưu
      </button>
    </div>
  </div>
</div>
</div>


<!-- Modal Auto Bet -->
<div id="autoBetModal" class="historyBetModal" style="display:none;">
<div class="modal-box ab-modal">
<div class="ab-header" id="abDragHandle">
<div class="ab-title">
<span class="ab-icon">⚙️</span>
<span>Đặt cược tự động / Cấu hình</span>
<span class="ab-badge">VIP</span>
</div>
<button id="closeAutoBet" class="ab-btn ab-btn-ghost" aria-label="Đóng">✕</button>
</div>
<div class="ab-subtitle">Đặt cược tự động khi <b>đồng hồ = 20s</b> trước mỗi phiên.</div>

    <!-- Card: 8 cửa -->
    <div class="ab-card">
      <div class="ab-card-title">Nhập xu cược</div>
      <div class="ab-grid">
        <label class="ab-field">🍅<input type="number" min="0" id="ab-Chua" class="ab-input" placeholder="0"></label>
        <label class="ab-field">🥦<input type="number" min="0" id="ab-Cải"  class="ab-input" placeholder="0"></label>
        <label class="ab-field">🌽<input type="number" min="0" id="ab-Ngô"  class="ab-input" placeholder="0"></label>
        <label class="ab-field">🥕<input type="number" min="0" id="ab-Rốt"  class="ab-input" placeholder="0"></label>
        <label class="ab-field">🌭<input type="number" min="0" id="ab-Mỳ"   class="ab-input" placeholder="0"></label>
        <label class="ab-field">🍢<input type="number" min="0" id="ab-Xiên" class="ab-input" placeholder="0"></label>
        <label class="ab-field">🍖<input type="number" min="0" id="ab-Đùi"  class="ab-input" placeholder="0"></label>
        <label class="ab-field">🥩<input type="number" min="0" id="ab-Bò"   class="ab-input" placeholder="0"></label>
      </div>
    </div>

<div class="ab-row">
<label class="ab-field" style="flex:1;">Số vòng lặp
<input type="number" min="1" id="ab-rounds" class="ab-input" placeholder="Để trống = vô hạn">
</label>
<label class="ab-switch">
<input type="checkbox" id="ab-enabled">
<span class="ab-switch-slider"></span>
<span class="ab-switch-label">Bật tự động</span>
</label>
</div>

<div class="ab-actions">
<button id="ab-save"  class="ab-btn ab-btn-primary">💾 Lưu cấu hình</button>
<button id="ab-start" class="ab-btn ab-btn-success">▶️ Bắt đầu</button>
<button id="ab-stop"  class="ab-btn ab-btn-danger">⏹️ Dừng</button>
<button id="ab-reset" class="ab-btn ab-btn-ghost">↺ Reset cược</button>
</div>

<div id="ab-note" class="ab-note">Đang tắt. Nhấn “Bắt đầu” để bật.</div>

<!-- scanline & glow -->
<div class="ab-scanline"></div>
</div>
</div>


<!-- Admin Panel - draggable -->
<div id="adminPanel" style="
  position:fixed; 
  top:20px; 
  left:20px; 
  width:260px;
  padding:10px; 
  border:2px solid red; 
  background:#111; 
  border-radius:10px; 
  z-index:9999;
  cursor:move;
  display:none; 
">
  <h3 style="color:gold; margin:0 0 10px 0; text-align:center;">🔑 Key</h3>
  <label style="color:white;"></label>
  <select id="adminSelect" style="width:100%; padding:5px; border-radius:6px; margin-top:5px;">
    <option value="">-- Random --</option>
    <option value="Chua">🍅 Chua</option>
    <option value="Cải">🥦 Cải</option>
    <option value="Ngô">🌽 Ngô</option>
    <option value="Rốt">🥕 Rốt</option>
    <option value="Mỳ">🌭 Mỳ</option>
    <option value="Xiên">🍢 Xiên</option>
    <option value="Đùi">🍖 Đùi</option>
    <option value="Bò">🥩 Bò</option>
  </select>

<div class="cache-tools" style="display:grid;gap:8px;">
  <button id="btnSafeClear">Xóa cache (nhanh)</button>
  <button id="btnSafeDeep">Xóa cache sâu (an toàn)</button>
  <button id="btnSafeRefresh">Tải lại (giữ dữ liệu)</button>

  <div style="display:flex;gap:8px;align-items:center;">
    <button id="btnBackupExport">Xuất backup</button>
    <label style="display:inline-flex;gap:6px;align-items:center;cursor:pointer;">
      <input id="inputBackupImport" type="file" accept="application/json" hidden>
      <span style="padding:8px 12px;border:1px solid #444;border-radius:8px;">Nhập backup…</span>
    </label>
  </div>
</div>
</div>




<script>


// ===== HOW-TO MODAL WIRING =====
const openHowToBtn = document.getElementById("openHowToBtn");
const howToOverlay = document.getElementById("howToOverlay");
const closeHowToBtn = document.getElementById("closeHowToBtn");

// Mở modal
function openHowTo(){
  if (!howToOverlay) return;
  // Đồng bộ hệ số từ MULTIPLIER vào modal (nếu có)
  try {
    if (typeof MULTIPLIER === "object" && MULTIPLIER) {
      document.querySelectorAll("[data-mul]").forEach(span=>{
        const name = span.getAttribute("data-mul");
        const val = MULTIPLIER[name];
        if (val != null) span.textContent = Number(val);
      });
    }
  } catch(e){}
  howToOverlay.hidden = false;
}
// Đóng modal
function closeHowTo(){
  if (!howToOverlay) return;
  howToOverlay.hidden = true;
}

openHowToBtn?.addEventListener("click", openHowTo);
closeHowToBtn?.addEventListener("click", closeHowTo);

// click ra nền để đóng
howToOverlay?.addEventListener("click", (e)=>{
  if (e.target === howToOverlay) closeHowTo();
});

// ESC để đóng
window.addEventListener("keydown", (e)=>{
  if (e.key === "Escape" && !howToOverlay.hidden) closeHowTo();
});

// Phím tắt Alt+H để mở/đóng
window.addEventListener("keydown", (e)=>{
  if (e.altKey && e.key.toLowerCase() === "h") {
    if (howToOverlay.hidden) openHowTo(); else closeHowTo();
    e.preventDefault();
  }
});

// Tự gắn skin digital + theme theo name/type có sẵn
const TYPE_OF = {
  "Cải":"rau","Chua":"rau","Ngô":"rau","Rốt":"rau",
  "Mỳ":"thit","Xiên":"thit","Đùi":"thit","Bò":"thit",
  "Salad":"special"
};
document.querySelectorAll('.door').forEach(d=>{
  d.classList.add('door--digital');
  const t = d.dataset.type || TYPE_OF[d.dataset.name];
  if (t){ d.dataset.type = t; d.classList.add('door--'+t); }
});


// Danh sách keycode hợp lệ (tạo sẵn)
const VALID_KEYCODES = ["GREEDYKING9999", "GREEDYKING2025", "GREEDYKING8888"];

let countdownDuration = 40; // số giây mỗi phiên
let lastSpinTime = parseInt(localStorage.getItem("lastSpinTime")) || Date.now();
let pauseAfterSpin = false;
let pauseTimer = 0;
let autoInterval;


let spinCount = parseInt(localStorage.getItem("spinCount")) || 0;
let wheelRotation = 0;
let spinInterval;
let isSpinning = false;
// Lấy balance từ localStorage (nếu có)
let balance = parseInt(localStorage.getItem("balance")) || 0;
let jackpot = parseInt(localStorage.getItem("jackpot")) || 0;
let netProfit = parseInt(localStorage.getItem("netProfit")) || 0; // Chênh lệch xu lời
let netLoss = parseInt(localStorage.getItem("netLoss")) || 0;   // Chênh lệch xu lỗ
let currentChip = 0; // chip đang chọn
let bets = {}; // lưu trữ cược hiện tại // lưu số xu đặt cược theo từng cửa

const SPIN_DURATION = 40; // 40 giây 1 phiên
const spinCounterEl = document.getElementById("spinCounter");
const balanceEl = document.getElementById("balance");
const jackpotEl = document.getElementById("jackpot");
const notificationEl = document.getElementById("notification");
const historyEl = document.getElementById("history");
const betHistoryEl = document.getElementById("betHistory");
const JACKPOT_THRESHOLD = 5000;
const JACKPOT_CHANCE = 0;
const wheelEl = document.getElementById("wheel");
const options = [
  { name: "Chua", icon: "🍅", weight: 19.2, reward: 5 },
  { name: "Cải", icon: "🥦", weight: 19.2, reward: 5 },
  { name: "Ngô", icon: "🌽", weight: 19.2, reward: 5 },
  { name: "Rốt", icon: "🥕", weight: 19.2, reward: 5 },
  { name: "Mỳ", icon: "🌭", weight: 10, reward: 10 },
  { name: "Xiên", icon: "🍢", weight: 6.67, reward: 15 },
  { name: "Đùi", icon: "🍖", weight: 4, reward: 25 },
  { name: "Bò", icon: "🥩", weight: 2.53, reward: 45 },
];


const JACKPOT_KEY = "greedy_jackpot_value";
const JACKPOT_MAX_KEY = "greedy_jackpot_max"; // để nhớ luôn progress max (nếu bạn muốn)

function readJackpot() {
  const v = Number(localStorage.getItem(JACKPOT_KEY));
  return Number.isFinite(v) ? v : 0;
}
function writeJackpot(val) {
  const jackpotEl = document.getElementById("jackpot");
  const progressEl = document.getElementById("jackpotProgress");
  const v = Math.max(0, Math.floor(val));

  if (jackpotEl) jackpotEl.textContent = v;
  if (progressEl) {
    const savedMax = Number(localStorage.getItem(JACKPOT_MAX_KEY)) || 1000000;
    // đảm bảo max không nhỏ hơn giá trị hiện tại
    const newMax = Math.max(savedMax, v);
    progressEl.max = newMax;
    progressEl.value = v;
    localStorage.setItem(JACKPOT_MAX_KEY, String(newMax));
  }
  localStorage.setItem(JACKPOT_KEY, String(v));
}

function getJackpotFromStorage() {
  return parseInt(localStorage.getItem(JACKPOT_KEY) || "0", 10);
}
function setJackpotToStorage(value) {
  localStorage.setItem(JACKPOT_KEY, String(value));
}
function getJackpotMaxFromStorage() {
  return parseInt(localStorage.getItem(JACKPOT_MAX_KEY) || "1000000", 10);
}
function setJackpotMaxToStorage(value) {
  localStorage.setItem(JACKPOT_MAX_KEY, String(value));
}

  document.addEventListener("DOMContentLoaded", () => {
  const jackpotEl = document.getElementById("jackpot");
  const progressEl = document.getElementById("jackpotProgress");
  const saved = getJackpotFromStorage();
  const savedMax = getJackpotMaxFromStorage();

  if (jackpotEl) jackpotEl.textContent = isNaN(saved) ? 0 : saved;
  if (progressEl) {
    progressEl.max = isNaN(savedMax) ? 1000000 : savedMax;
    progressEl.value = isNaN(saved) ? 0 : saved;
  }
});

// Hàm thêm lịch sử đặt cược
  function addBetHistory(betName, amount, result = "Chờ kết quả", payout = 0) {
  const time = new Date().toLocaleTimeString();
  const spin = getCurrentSpinNumber(); // số phiên hiện tại
  const entry = { time, spin, betName, amount, result, payout };

  let betHistory = JSON.parse(localStorage.getItem("betHistory")) || [];
  betHistory.push(entry);
  localStorage.setItem("betHistory", JSON.stringify(betHistory));

 renderBetHistory(); // cập nhật UI ngay
}


  function renderBetHistory() {
  let history = JSON.parse(localStorage.getItem("betHistory")) || [];
 
  const modalEl = document.getElementById("modalBetHistory");
  if (!modalEl) return; // nếu modal chưa load
  modalEl.innerHTML = "";

  if (history.length === 0) {
  historyEl.innerHTML = "<p>⚠️ Chưa có lịch sử cược nào.</p>";
  return;
  } 
  

  history.forEach(entry => {
  modalEl.innerHTML += `
  <div style="margin-bottom:8px; border-bottom:1px solid #444; padding-bottom:5px;">
  ⏰ ${entry.time} | 🎯 Phiên ${entry.spin}<br>
  👉 Đặt <b>${entry.amount}</b> xu vào <b>${entry.betName}</b><br>
  🏆 Kết quả: ${entry.result} | 💰 Xu nhận: ${entry.payout}

  localStorage.setItem("betHistory", JSON.stringify(betHistory));
  </div>
    `;
  });
}


// Khôi phục khi load lại trang
  window.addEventListener("load", () => {
  /*
  let betHistory = JSON.parse(localStorage.getItem("betHistory")) || [];
  betHistoryEl.innerHTML = " <b></b>";
  betHistory.forEach(entry => {
  betHistoryEl.innerHTML += `⏰ ${entry.time} - Đặt ${entry.amount} xu vào ${entry.betName}<br>`;
  });

*/
  document.querySelectorAll('.chip, .bet-box').forEach(el => el.classList.remove('lock-bets'));
  
  resetHistoryDaily();   // chỉ xóa khi sang ngày
  renderBetHistory();    // hiển thị lại ngay lập tức
  updateBalanceDisplay();
  updateJackpotDisplay();
  updateStatsDisplay();
  restoreBets();
});


  function resetHistoryDaily() {
  let today = new Date().toLocaleDateString();
  let savedDate = localStorage.getItem("betHistoryDate");
  if (savedDate !== today) {
  localStorage.setItem("betHistory", JSON.stringify([])); // reset rỗng, KHÔNG remove hẳn
  localStorage.setItem("betHistoryDate", today);
  }
}
resetHistoryDaily();


// Lấy mốc 0h hôm nay
  function getStartOfDay() {
  const now = new Date();
  return new Date(now.getFullYear(), now.getMonth(), now.getDate(), 0, 0, 0, 0).getTime();
}

// Tính số phiên hiện tại
  function getCurrentSpinNumber() {
  const startTime = getStartOfDay();
  const now = Date.now();
  const elapsedSeconds = Math.floor((now - startTime) / 1000);
  return Math.floor(elapsedSeconds / countdownDuration) + 1;
}




document.querySelectorAll('#betForm input').forEach(input => {
input.addEventListener('input', updateTotalBetDisplay);
});


// Nếu chưa có thì set mốc ban đầu
if (!lastSpinTime) {
  lastSpinTime = Date.now();
  localStorage.setItem("lastSpinTime", lastSpinTime);
}

// Tính thời gian còn lại khi load lại trang
  function getRemainingTime() {
  const startTime = getStartOfDay();
  const now = Date.now();
  const elapsedSeconds = Math.floor((now - startTime) / 1000);
  const remaining = countdownDuration - (elapsedSeconds % countdownDuration);
  return remaining;
 

  if (remaining <= 0) {
  lastSpinTime = now;
  localStorage.setItem("lastSpinTime", lastSpinTime);
  remaining = countdownDuration;
  }
  return remaining;
}

let countdownValue = getRemainingTime();
//Hiển thị ngay khi load
  renderCountdown();

// Hàm render ra giao diện ngay lập tức
  function renderCountdown() {
  const countdownEl = document.getElementById("autoCountdown");
  countdownEl.innerHTML = `<span id="countdownValue">${countdownValue}</span>`;
}



  // Hiển thị đếm ngược
  function startCountdown() {
  const timer = setInterval(() => {
  countdownValue = getRemainingTime();
  const countdownEl = document.getElementById("autoCountdown");
  const spinNumber = getCurrentSpinNumber();

// Nếu đang trong thời gian chờ sau khi quay
  if (pauseAfterSpin) {
  if (pauseTimer > 0) {
  countdownEl.innerHTML = `<span>${pauseTimer}</span>`;
  countdownEl.classList.add("blink-yellow"); // vàng nhấp nháy
  pauseTimer--;
  // lưu lại số giây còn chờ
  localStorage.setItem("pauseTimer", pauseTimer);
  } 
  else {
  pauseAfterSpin = false;
  localStorage.setItem("pauseAfterSpin", "false");
  localStorage.removeItem("pauseTimer");
  countdownValue = 35; // reset về 35 giây
  countdownEl.classList.remove("blink-yellow");
  renderCountdown(); // hiển thị lại
  countdownEl.innerHTML = `<span id="countdownValue">${countdownValue}</span>`;
  }
  return;
  }
  countdownValue--;
  countdownEl.textContent = `${countdownValue}`;
  countdownEl.innerHTML = `<span id="countdownValue">${countdownValue}</span>`;
  if (countdownValue === 20) {
    applyAutoBetOnce();    
    suggestResult();
  }
  if (countdownValue <= 5) {
  countdownEl.classList.add("blink"); // đỏ nhấp nháy
  window.addEventListener("keydown", disableF5);
  window.addEventListener("beforeunload", blockReload);
  } 
  else {
  countdownEl.classList.remove("blink");
  }


  if (countdownValue <= 0) {
  lockDoors();   // khóa đặt cược
  if (!isSpinning) {
  spinWheel();
  startDoorAnimation();
  }
  
// Sau khi quay thì pause 4 giây
  pauseAfterSpin = true;
  pauseTimer = 4;
// lưu trạng thái vào localStorage
  localStorage.setItem("pauseAfterSpin", "true");
  localStorage.setItem("pauseTimer", pauseTimer);

  countdownEl.classList.remove("blink"); // tắt đỏ nhấp nháy
  lastSpinTime = Date.now();
  localStorage.setItem("lastSpinTime", lastSpinTime);
  countdownValue = countdownDuration;
  }
  renderCountdown(); // cập nhật mỗi giây
  countdownEl.innerHTML = `<span id="countdownValue">${countdownValue}</span>`;
 // Cập nhật số phiên (nếu cần hiển thị)
  document.getElementById("spinCounter").textContent = `Phiên: ${spinNumber}`;
  }, 1000);
}
startCountdown();


  function suggestResult() {
  const totalWeight = options.reduce((sum, opt) => sum + opt.weight, 0);
  let rand = Math.random() * totalWeight;
  let cumWeight = 0;
  let chosen = null;

  for (let opt of options) {
  cumWeight += opt.weight;
  if (rand <= cumWeight) {
  chosen = opt;
  break;
  }
  }
  if (chosen) {
 /* const hotText = `🔥 Hot: ${chosen.name} ${chosen.icon}`;*/
/*
//  1) Hiển thị ở khu vực suggestion
  document.getElementById("suggestion").textContent = hotText;
*/
//  2) Lưu lại vào localStorage
 /* localStorage.setItem("lastHot", hotText);*/
  localStorage.setItem("lastHotName", chosen.name);

 // 3) Xóa nhãn cũ trong bet-box & cửa
  document.querySelectorAll(".bet-box .hot-label").forEach(el => el.remove());
  document.querySelectorAll(".door .hot-label").forEach(el => el.remove());


//Hiển thị ở bet-box
  const box = document.querySelector(`.bet-box[data-name="${chosen.name}"]`);
  if (box) {
  const label = document.createElement("div");
  label.className = "hot-label";
  label.textContent = `🔥 Hot`;
  box.prepend(label);
  }


//Hiển thị trên ô quay thưởng
  const door = document.querySelector(`.door[data-name="${chosen.name}"]`);
  if (door) {
  const label = document.createElement("div");
  label.className = "hot-label";
  label.textContent = "🔥 Hot";
  door.appendChild(label);
  }
  }
}

//Khi load lại trang, hiển thị lại Hot nếu có
  const savedHot = localStorage.getItem("lastHot");
  if (savedHot) {
  document.getElementById("suggestion").textContent = savedHot;
}

  const savedHotName = localStorage.getItem("lastHotName");
  if (savedHotName) {
// Xóa Hot cũ
  document.querySelectorAll(".bet-box .hot-label").forEach(el => el.remove());
  document.querySelectorAll(".door .hot-label").forEach(el => el.remove());
// Hiển thị lại ở bet-box
  const betBox = document.querySelector(`.bet-box[data-name="${savedHotName}"]`);
  if (betBox) {
  const label = document.createElement("div");
  label.className = "hot-label";
  label.textContent = "🔥 Hot";
  betBox.prepend(label);
  }
// Hiển thị lại ở cửa quay thưởng
  const door = document.querySelector(`.door[data-name="${savedHotName}"]`);
  if (door) {
  const label = document.createElement("div");
  label.className = "hot-label";
  label.textContent = "🔥 Hot";
  door.appendChild(label);
  }
}

function formatCoin(n){
  // Định dạng theo vi-VN, không lẻ
  return (n ?? 0).toLocaleString('vi-VN');
}

function setLedText(el, value){
  if(!el) return;
  const newText = formatCoin(value);
  if(el.textContent !== newText){
    el.textContent = newText;
    el.classList.add('flash-update');      // đã có keyframes trong file của bạn:contentReference[oaicite:2]{index=2}
    setTimeout(()=> el.classList.remove('flash-update'), 650);
  }
}



  function updateBalance() {
  document.getElementById("balance").textContent = balance;
}

// Hiển thị giao diện rút xu
  document.getElementById("withdrawBtn").onclick = () => {
  document.getElementById("withdrawInfoModal").style.display = "flex";
};

  document.getElementById("closeWithdrawModal").onclick = () => {
  document.getElementById("withdrawInfoModal").style.display = "none";
};



// Xử lý rút xu
  document.getElementById("sendWithdrawBtn").onclick = () => {
  const name = document.getElementById("userName").value;
  const bank = document.getElementById("bankName").value;
  const account = document.getElementById("userAccount").value;
  const amount = parseInt(document.getElementById("withdrawAmount").value);
  const status = document.getElementById("withdrawStatus");

  if (!name || !bank || !account || !amount || amount <= 0) {
  status.textContent = "⚠️ Vui lòng điền đầy đủ thông tin.";
  status.style.color = "red";
  return;
  }

  if (amount > balance) {
  status.textContent = "⚠️ Số dư không đủ để rút.";
  status.style.color = "red";
  return;
  }

// Trừ xu ngay khi gửi yêu cầu
  balance -= amount;
  updateBalanceDisplay();

  // Hiện trạng thái chờ xử lý
  status.style.color = "orange";
  status.textContent = "⏳ Gửi yêu cầu thành công, hệ thống đang xử lý...";

// Thời gian xử lý ngẫu nhiên từ 90s -> 120s
  let wait = Math.floor(Math.random() * (120 - 90 + 1)) + 90; // random 90-120 giây

  const countdown = setInterval(() => {
  wait--;
  status.textContent = `⏳ Hệ thống đang xử lý...`;
  if (wait <= 0) {
  clearInterval(countdown);
  status.textContent = "✅ Rút xu thành công!";
  status.style.color = "lightgreen";
  document.getElementById("notification").textContent = `Rút xu -${amount} thành công, tiền đang được chuyển tới tài khoản.`;

// Tắt notification sau 10s
   setTimeout(() => {
   document.getElementById("notification").textContent = "";
   }, 10000);


// Ẩn modal sau 5s
   setTimeout(() => {
   document.getElementById("withdrawInfoModal").style.display = "none";
   status.textContent = "";
   }, 5000);
}
}, 1000);
};


  function showBankInfo() {
  const amount = parseInt(document.getElementById("amount").value) || 0;
  if (amount > 0) {
  document.getElementById("bankInfo").style.display = "block";
  document.getElementById("depositStatus").textContent = 'Bấm gửi yêu cầu nạp sau khi chuyển khoản.';
  } else {
  alert("Vui lòng nhập số xu muốn nạp!");
  }
}

  function sendDepositRequest() {
  const amount = parseInt(document.getElementById("amount").value) || 0;
  if (amount > 0) {
  if (confirm(` Xác nhận chuyển khoản thành công !`)) {
  // Hiện thông tin ngân hàng
  document.getElementById("bankInfo").style.display = "block";
  // Trạng thái chờ
  const status = document.getElementById("depositStatus");
  let timeLeft = 35;  
  status.style.color = "orange";
  status.textContent = `⏳ Gửi yêu cầu thành công, hệ thống đang xử lý...`;
  // Đếm ngược 30s rồi cộng xu
  const countdown = setInterval(() => {
  timeLeft--;
  if (timeLeft <= 0) {
  clearInterval(countdown);
  deposit(amount);
  status.textContent = `✅ Nạp thành công ${amount} xu vào tài khoản!`;
  status.style.color = "lightgreen";
  document.getElementById("notification").textContent = `Nạp thành công +${amount} xu.`;

  // Sau 5 giây ẩn giao diện ngân hàng
  setTimeout(() => {
  document.getElementById("bankInfo").style.display = "none";
  }, 5000);
  }
  }, 1000);
  }
  } else {
  alert("Vui lòng nhập số xu muốn nạp!");
  }
}


  function updateBetDisplay() {
  document.querySelectorAll(".bet-box").forEach(box => {
  const name = box.dataset.name;
  box.querySelector(".bet-amount").textContent = bets[name];
  });

  const total = Object.values(bets).reduce((a,b)=>a+b,0);
  document.getElementById("totalBetDisplay").textContent = `${total}`;
}

  function increaseJackpotWithReset() {
  const jackpotEl = document.getElementById("jackpot");
  const progressEl = document.getElementById("jackpotProgress");
  if (!jackpotEl) return;

  // Đọc giá trị hiện tại (ưu tiên UI, fallback storage)
  let current = parseInt(jackpotEl.textContent) || getJackpotFromStorage() || 0;

  // +500–1000 xu
  const inc = Math.floor(Math.random() * (1000 - 500 + 1)) + 500;
  let next = current + inc;

  // Tỷ lệ reset Jackpot về còn 20% (ví dụ 10% cơ hội)
  const RESET_PROB = 0.001;  //0.1%
  const RESET_FACTOR = 0.20;   // reset hũ về còn 20%
  if (Math.random() < RESET_PROB) {
  next = Math.floor(next * RESET_FACTOR);
  // (tuỳ chọn) bạn có thể hiển thị thông báo reset ở đây
  // showToast("⚠️ Jackpot bị reset còn 20%!");
  }

 writeJackpot(next); 

  // Cập nhật UI
  jackpotEl.textContent = next;

  // Cập nhật progress
  if (progressEl) {
  // nếu vượt max thì tăng max để progress không bị full
  if (next > progressEl.max) {
  progressEl.max = next;
  setJackpotMaxToStorage(next);
  }
  progressEl.value = next;
  }

  // LƯU vào localStorage để F5 không mất
  setJackpotToStorage(next);

  // hiệu ứng nhẹ
  jackpotEl.classList.add("flash-update");
  setTimeout(() => jackpotEl.classList.remove("flash-update"), 600);
}



  function updateJackpotDisplay() {
  const oldVal = parseInt(jackpotEl.textContent.replace(/\D/g,'')) || 0;
  animateNumber(jackpotEl, oldVal, jackpot, 600);
  document.getElementById("jackpotProgress").value = jackpot;
  localStorage.setItem("jackpot", jackpot);
}
 
  function updateBalanceDisplay() {
  const oldVal = parseInt(balanceEl.textContent.replace(/\D/g,'')) || 0;
  animateNumber(balanceEl, oldVal, balance, 600);
  localStorage.setItem("balance", balance);
}
   














  function showNotification(message) {
  notificationEl.textContent = message;
  setTimeout(() => notificationEl.textContent = "", 3000);
}

//Hàm nạp xu.
 function confirmDeposit() {
 const amount = parseInt(document.getElementById("amount").value) || 0;
 if (amount <= 0) {
 alert("Vui lòng nhập số xu muốn nạp!");
 return;
 }

 const modal = document.getElementById("depositConfirmModal");
 document.getElementById("depositConfirmText").textContent =
 `Bạn có chắc muốn nạp ${amount} xu không?`;

// Hiện modal với hiệu ứng fade-in
  modal.style.display = "flex";
  modal.classList.remove("hide");
  modal.classList.add("show");

 // Nút Hủy
  document.getElementById("depositNo").onclick = () => {
  modal.classList.remove("show");
  modal.classList.add("hide");
  setTimeout(() => { modal.style.display = "none"; }, 300); // đợi animation xong
  };

  // Nút Xác nhận
  document.getElementById("depositYes").onclick = () => {
  modal.classList.remove("show");
  modal.classList.add("hide");
  setTimeout(() => { modal.style.display = "none"; }, 300);
  startDepositProcess(amount);
  };
}

 // Hàm xử lý nạp xu sau khi xác nhận
 function startDepositProcess(amount) {
 const code = "NAP" + Math.floor(100000 + Math.random() * 900000);
 const modal = document.getElementById("depositInfoModal");
 const status = document.getElementById("depositStatus");

// Hiện modal thông tin nạp
 document.getElementById("depositCode").textContent = code;
 modal.style.display = "flex";
 status.style.color = "orange";
 status.innerHTML = `<br><span id="codeExpiry"></span>`;

// Đếm ngược thời gian hết hạn (30 phút)
 let expiryTime = 10 * 60; // 10 phút
 clearInterval(window.expiryTimer); // nếu trước đó còn chạy thì hủy
 window.expiryTimer = setInterval(() => {
 expiryTime--;
 if (expiryTime > 0) {
 const minutes = Math.floor(expiryTime / 60);
 const seconds = expiryTime % 60;
 document.getElementById("codeExpiry").textContent =
 `Mã hết hạn sau ${minutes}:${seconds.toString().padStart(2, "0")}`;
 } else {
 clearInterval(window.expiryTimer);
 document.getElementById("codeExpiry").textContent = "❌ Mã đã hết hạn!";
 document.getElementById("codeExpiry").style.color = "red";
    }
    }, 1000);
// Thời gian xử lý nạp (ngẫu nhiên 60–90 giây)
 let wait = Math.floor(Math.random() * (60 - 30 + 1)) + 60;
 clearInterval(window.processTimer); // hủy nếu có timer cũ
 window.processTimer = setInterval(() => {
 wait--;
 if (wait > 0) {
 status.innerHTML = `
 <span id="codeExpiry">Code hết hạn sau: ${Math.floor(expiryTime / 60)}:${(expiryTime % 60).toString().padStart(2,"0")}</span>
 `;
 } else {
 clearInterval(window.processTimer);
 deposit(amount);
 status.innerHTML = `✅ Nạp thành công ${amount} xu vào tài khoản!<br>
 `;
 status.style.color = "lightgreen";
 document.getElementById("notification").textContent = `Nạp thành công +${amount} xu.`;
 setTimeout(() => {
 document.getElementById("notification").textContent = "";
 }, 10000);
// Modal fade-out sau 5s
 setTimeout(() => {
 modal.classList.remove("show");
 modal.classList.add("hide");
 setTimeout(() => { modal.style.display = "none"; }, 300);
 }, 5000);
 }
 }, 1000);
 document.getElementById("closeDepositModal").onclick = () => {
 modal.classList.remove("show");
 modal.classList.add("hide");
 setTimeout(() => { modal.style.display = "none"; }, 300);
 clearInterval(window.expiryTimer);
 clearInterval(window.processTimer);
 };
}

  function confirmWithdraw() {
  const amount = parseInt(document.getElementById("amount").value);
  const balanceEl = document.getElementById("balance");
  if (isNaN(amount) || amount <= 0) {
  alert("Vui lòng nhập số xu hợp lệ để rút.");
  return;
  }
  if (amount > balance) {
  alert("Không thể rút xu vì số dư không đủ.");
  return;
  }
  if (confirm(`Bạn có chắc muốn rút ${amount} xu không?`)) {
  balance -= amount;
  balanceEl.textContent = balance;
  document.getElementById("notification").textContent = `Rút xu thành công -${amount}`;
  }
}

  function deposit(amount) {
  balance += amount;
  updateBalanceDisplay();
}
    
  function withdraw(amount) {
  balance -= amount;
  updateBalanceDisplay();
  showNotification(`-${amount} xu đã được rút.`);
}

  
   
  

    
  function renderWheel() {
  const angleStep = 360 / options.length;
  wheelEl.innerHTML = ""; // xóa cũ
  options.forEach((opt, index) => {
  const segment = document.createElement("div");
  segment.className = "segment";
  segment.textContent = opt.icon;
  segment.style.transform = `rotate(${index * angleStep}deg) translate(0, -85%)`;
  wheelEl.appendChild(segment);
  });
}
  renderWheel();
    
/// Hàm thêm kết quả vào lịch sử (giữ tối đa 9)
  function addResultToHistory(icon) {
  let Results = JSON.parse(localStorage.getItem("Results")) || [];

  // thêm kết quả mới vào đầu mảng
  Results.unshift(icon);

  // giới hạn 9 kết quả
  if (Results.length > 9) {
    Results = Results.slice(0, 9);
  }

  // lưu lại
  localStorage.setItem("Results", JSON.stringify(Results));

  // cập nhật hiển thị
  renderHistory();
}

// Lưu lịch sử vào localStorage
function saveHistory() {
  const data = historyEl.innerHTML.replace(' <b>Result</b><br>', '');
  localStorage.setItem("historyData", data);
}

// Khôi phục lịch sử khi F5
  function loadHistory() {
  const saved = localStorage.getItem("historyData");
  if (saved) {
   historyEl.innerHTML = ' <b>Result</b><br>' + saved;
  }
}

 // Gọi khi trang load
  window.addEventListener("load", loadHistory);

  function addHistory(resultIcon) {
  saveHistory();
  }

// Hàm hiển thị lịch sử ra giao diện
  function renderHistory() {
  const historyEl = document.getElementById("history");
  historyEl.innerHTML = " <b>Result</b><br>";
  let Results = JSON.parse(localStorage.getItem("Results")) || [];
  Results.forEach(icon => {
  const span = document.createElement("span");
  span.className = "result-item";
  span.textContent = icon + " ";
  historyEl.appendChild(span);
  });
 
}




// gọi khi tải lại trang để load lịch sử cũ
  window.onload = () => {
   // cũng load lại số dư đã lưu
};



  function spinWheel() {
  if (isSpinning) return;
  isSpinning = true;
  

  if (window.TopWinnersReal?.clear) TopWinnersReal.clear(); // Reset Top mỗi vòng

  document.querySelectorAll('.chip, .bet-box').forEach(chip => chip.classList.add('lock-bets'));
  const resultEl = document.getElementById("result");
  let totalBet = Object.values(bets).reduce((a,b)=>a+b,0);
  for (let key in bets) {
  let val = parseFloat(bets[key]);
  if (isNaN(val) || val < 0) {
  resultEl.textContent = `❌ Cược không hợp lệ ở cửa ${key}`;
  return;}
  }
  document.getElementById("spinSound").play();
  resultEl.classList.add("spin-animating");
  setTimeout(() => {
  resultEl.classList.remove("spin-animating");
  highlightWinner(selected.name);
  }, 5000);
  const spinDuration = 5; // giây
  let countdown = spinDuration;
  const selected = chooseResult();
  const anglePerSegment = 360 / options.length;
  const selectedIndex = options.findIndex(opt => opt.name === selected.name);
  const randomOffset = Math.random() * anglePerSegment; // giúp kết quả trông tự nhiên hơn
  const targetAngle = (360 - (selectedIndex * anglePerSegment + anglePerSegment / 2)%360);
  const extraSpins = 5;
  const targetRotation = 360 * extraSpins + targetAngle;
  wheelRotation += targetRotation;
  wheelEl.style.transform = `rotate(${wheelRotation}deg)`;
  const animationInterval = setInterval(() => {
  const tempIcon = options[Math.floor(Math.random() * options.length)].icon;
  resultEl.textContent = `${tempIcon}`;
  }, 100);

  

  const countdownInterval = setInterval(() => {
  countdown--;
  if (countdown <= 0) {
  clearInterval(countdownInterval);
  clearInterval(animationInterval);
  const betAmount = bets[selected.name] || 0;
  const winAmount = betAmount > 0 ? betAmount * selected.reward : 0;
  balance += winAmount; //trả thưởng

  // 📝 Cập nhật lịch sử cược (thắng / thua)
  const finishedSpinId = getCurrentSpinNumber();  // số phiên quay hiện tại
  let betHistory = JSON.parse(localStorage.getItem("betHistory")) || [];
  betHistory = betHistory.map(entry => {
  if (entry.spin !== finishedSpinId || entry.result !== "Chờ kết quả") return entry;
  const isWin = entry.betName === selected.name;
  entry.result = isWin ? "✅ Thắng" : "❌ Thua";
  entry.payout = isWin ? entry.amount * selected.reward : 0;
  return entry;
});



localStorage.setItem("betHistory", JSON.stringify(betHistory));
renderBetHistory(); // đẩy vào modal

  updateBalanceDisplay();
  const lostAmount = totalBet - winAmount;
  let profitOrLoss = winAmount - totalBet;
  if (profitOrLoss > 0) {
  netProfit += profitOrLoss;
  } 
  else if (profitOrLoss < 0) {
  netLoss += Math.abs(profitOrLoss);
  }
  updateStatsDisplay();
  addResultToHistory(selected.icon);
  let outcome = winAmount > 0 ? `✅ Thắng ${winAmount}` : `❌ Thua`;

  showResultModal(selected, totalBet, winAmount);


  let jackpotWin = 0;
  if (jackpot >= JACKPOT_THRESHOLD && Math.random() < JACKPOT_CHANCE) {
  jackpotWin = Math.floor(jackpot * 0.8);
  jackpot -= jackpotWin;
  balance += jackpotWin;
  updateBalanceDisplay();
  updateJackpotDisplay();
  outcome += ` 🎉 Nổ hũ! Nhận thêm ${jackpotWin} xu từ hũ!`;
  showJackpotEffect();  // Hiển thị hiệu ứng pháo hoa + coin bay
  }
  if (totalBet >= 0) {
  resultEl.textContent = `${selected.icon}`;



 // ✅ Lưu icon kết quả vào localStorage
  localStorage.setItem("lastResultIcon", result.icon);
  localStorage.setItem("lastResult", JSON.stringify(selected));
  } 
  addHistory(result.icon);


// --- THÊM NGƯỜI THẮNG VÀO TOP WINNERS ---
try {
  if (window.TopWinnersReal) {
    const name   = localStorage.getItem("userName")   || "Bạn";
    const avatar = localStorage.getItem("userAvatar") || `https://i.pravatar.cc/80?u=${encodeURIComponent(name)}`;

    // Nếu bạn thắng, đưa bạn vào bảng (số tròn)
    if (Number(winAmount) > 0) {
      window.TopWinnersReal.add({
        name,
        avatar,
        amount: Math.round(Number(winAmount)/100)*100, // số tròn
        betLabel: "",
        icon: ""
      });
    }

    // Luôn render Top 3, pad thêm người ảo nếu thiếu
    window.TopWinnersReal.renderRound(selected);
  }
} catch (e) {}
// --- HẾT KHỐI THÊM ---


// Gọi ngay sau khi add người thắng thật, trước TopWinnersReal.render()
(function seedBotWinnersForThisSpin(selectedName, isSalad=false){
  const iconMap = { "Chua":"🍅","Cải":"🥬","Ngô":"🌽","Rốt":"🥕","Mỳ":"🌭","Xiên":"🍢","Đùi":"🍖","Bò":"🥩" };
  const bots = [
    { name: "Tâm Tâm", avatar: "https://i.pravatar.cc/80?u=minhs" },
    { name: "Híp Híp",  avatar: "https://i.pravatar.cc/80?u=ladn"  },
    { name: "Vờ bờ",  avatar: "https://i.pravatar.cc/80?u=hqai"  },
    { name: "Baby",   avatar: "https://i.pravatar.cc/80?u=vưu"   },
    { name: "Vỡ nợ vì salad",   avatar: "https://i.pravatar.cc/80?u=reuoc"   },
    { name: "Kún Yêu",   avatar: "https://i.pravatar.cc/80?u=keordeo"   },
    { name: "3 rau bỏ idol",   avatar: "https://i.pravatar.cc/80?u=banthquy"   },
    { name: "Mèo Tộc",   avatar: "https://i.pravatar.cc/80?u=socyola"   },
    { name: "Sói Bạc",   avatar: "https://i.pravatar.cc/80?u=nuuoc"   },
    { name: "Bán máu trả nợ",   avatar: "https://i.pravatar.cc/80?u=bian"   },
    { name: "Masid",   avatar: "https://i.pravatar.cc/80?u=tulaonh"   },
    { name: "Mèo Mun",   avatar: "https://i.pravatar.cc/80?u=lpo"   },
    { name: "Minh Thư",   avatar: "https://i.pravatar.cc/80?u=bepơ"   },
    { name: "Súp bào ngư",   avatar: "https://i.pravatar.cc/80?u=quưat"   },
    { name: "Thần long",   avatar: "https://i.pravatar.cc/80?u=dieuahoa"   },
    { name: "Vũ Hạo",   avatar: "https://i.pravatar.cc/80?u=maygisat"   },
    { name: "Gia Cát Dự",   avatar: "https://i.pravatar.cc/80?u=tisvi"   },
    { name: "Tiểu Bá Hổ",   avatar: "https://i.pravatar.cc/80?u=giudong"   },
    { name: "Shark Tank",   avatar: "https://i.pravatar.cc/80?u=tfu"   },
    { name: "Bình Minh",   avatar: "https://i.pravatar.cc/80?u=chugot"   },
    { name: "@@",   avatar: "https://i.pravatar.cc/80?u=dua"   },
    { name: "Lên top",   avatar: "https://i.pravatar.cc/80?u=xohai"   },
    { name: "Bánh bèo",   avatar: "https://i.pravatar.cc/80?u=chojm"   },
    { name: "Bún Riêu Cua",   avatar: "https://i.pravatar.cc/80?u=vkai"   },
    { name: "Bạch thủ đùi",   avatar: "https://i.pravatar.cc/80?u=nhlo"   },
    { name: "Nuôi Mỳ top 1",   avatar: "https://i.pravatar.cc/80?u=ca;m"   },
    { name: "Bạch Thủ Rau",   avatar: "https://i.pravatar.cc/80?u=qu'yt"   },
    { name: "Phong Vũ",   avatar: "https://i.pravatar.cc/80?u=lze"   },
    { name: "Táo mèo",   avatar: "https://i.pravatar.cc/80?u=taxo"   },

    { name: "Tâm Tâm", avatar: "https://i.pravatar.cc/80?u=micnh" },
    { name: "Chiến KAKA",  avatar: "https://i.pravatar.cc/80?u=lvan"  },
    { name: "Acacia",  avatar: "https://i.pravatar.cc/80?u=habi"  },
    { name: "Adela",   avatar: "https://i.pravatar.cc/80?u=vnu"   },
    { name: "Adelaide",   avatar: "https://i.pravatar.cc/80?u=rumoc"   },
    { name: "Agatha",   avatar: "https://i.pravatar.cc/80?u=keod,eo"   },
    { name: "Agnes",   avatar: "https://i.pravatar.cc/80?u=banhq.uy"   },
    { name: "Alethea",   avatar: "https://i.pravatar.cc/80?u=soco/la"   },
    { name: "Alida",   avatar: "https://i.pravatar.cc/80?u=nuqưoc"   },
    { name: "Aliyah",   avatar: "https://i.pravatar.cc/80?u=baqen"   },
    { name: "Alma",   avatar: "https://i.pravatar.cc/80?u=tulanqrh"   },
    { name: "Almira",   avatar: "https://i.pravatar.cc/80?u=lqtro"   },
    { name: "Alula",   avatar: "https://i.pravatar.cc/80?u=bepqy"   },
    { name: "Alva",   avatar: "https://i.pravatar.cc/80?u=quaqut"   },
    { name: "Amanda",   avatar: "https://i.pravatar.cc/80?u=diqieuhoa"   },
    { name: "Amelinda",   avatar: "https://i.pravatar.cc/80?u=maygqoiat"   },
    { name: "Amity",   avatar: "https://i.pravatar.cc/80?u=tiqpvi"   },
    { name: "Angela",   avatar: "https://i.pravatar.cc/80?u=giqauong"   },
    { name: "Annabella",   avatar: "https://i.pravatar.cc/80?u=tuqs"   },
    { name: "Anthea",   avatar: "https://i.pravatar.cc/80?u=chuoqdt"   },
    { name: "Aretha",   avatar: "https://i.pravatar.cc/80?u=duqfa"   },
    { name: "Arianne",   avatar: "https://i.pravatar.cc/80?u=xoaqgi"   },
    { name: "Artemis",   avatar: "https://i.pravatar.cc/80?u=choqhm"   },
    { name: "Aubrey",   avatar: "https://i.pravatar.cc/80?u=vqjai"   },
    { name: "Audrey",   avatar: "https://i.pravatar.cc/80?u=nhqko"   },
    { name: "Aurelia",   avatar: "https://i.pravatar.cc/80?u=caqlm"   },
    { name: "Aurora",   avatar: "https://i.pravatar.cc/80?u=quqzyt"   },
    { name: "Azura",   avatar: "https://i.pravatar.cc/80?u=lqxe"   },
    { name: "Bernice",   avatar: "https://i.pravatar.cc/80?u=tqcao"   },

    { name: "Bertha", avatar: "https://i.pravatar.cc/80?u=miqvnh" },
    { name: "Blanche",  avatar: "https://i.pravatar.cc/80?u=laqbn"  },
    { name: "Brenna",  avatar: "https://i.pravatar.cc/80?u=haiqn"  },
    { name: "Baby",   avatar: "https://i.pravatar.cc/80?u=vqmu"   },
    { name: "Bridget",   avatar: "https://i.pravatar.cc/80?u=rweuoc"   },
    { name: "Calantha",   avatar: "https://i.pravatar.cc/80?u=kewrodeo"   },
    { name: "Calliope",   avatar: "https://i.pravatar.cc/80?u=banhwtquy"   },
    { name: "Celina",   avatar: "https://i.pravatar.cc/80?u=socolwya"   },
    { name: "Ceridwen",   avatar: "https://i.pravatar.cc/80?u=nuowyc"   },
    { name: "Charmaine",   avatar: "https://i.pravatar.cc/80?u=bawun"   },
    { name: "Christabel",   avatar: "https://i.pravatar.cc/80?u=tulwianh"   },
    { name: "Ciara",   avatar: "https://i.pravatar.cc/80?u=lowo"   },
    { name: "Cleopatra",   avatar: "https://i.pravatar.cc/80?u=bwpep"   },
    { name: "Cosima",   avatar: "https://i.pravatar.cc/80?u=qwauat"   },
    { name: "Daria",   avatar: "https://i.pravatar.cc/80?u=dieuwshoa"   },
    { name: "Delwyn",   avatar: "https://i.pravatar.cc/80?u=maygiwdat"   },
    { name: "Dilys",   avatar: "https://i.pravatar.cc/80?u=tivwfi"   },
    { name: "Donna",   avatar: "https://i.pravatar.cc/80?u=giuowgng"   },
    { name: "Doris",   avatar: "https://i.pravatar.cc/80?u=twhu"   },
    { name: "Drusilla",   avatar: "https://i.pravatar.cc/80?u=cwjhuot"   },
    { name: "Dulcie",   avatar: "https://i.pravatar.cc/80?u=duwka"   },
    { name: "Edana",   avatar: "https://i.pravatar.cc/80?u=xoawli"   },
    { name: "Edna",   avatar: "https://i.pravatar.cc/80?u=chowzm"   },
    { name: "Eira",   avatar: "https://i.pravatar.cc/80?u=vawxi"   },
    { name: "Eirlys",   avatar: "https://i.pravatar.cc/80?u=nhwco"   },
    { name: "Elain",   avatar: "https://i.pravatar.cc/80?u=cawvm"   },
    { name: "Elfleda",   avatar: "https://i.pravatar.cc/80?u=qwbuyt"   },
    { name: "Elfreda",   avatar: "https://i.pravatar.cc/80?u=lwne"   },
    { name: "Elysia",   avatar: "https://i.pravatar.cc/80?u=tawmo"   },

    { name: "Erica", avatar: "https://i.pravatar.cc/80?u=miernh" },
    { name: "Ermintrude",  avatar: "https://i.pravatar.cc/80?u=laetn"  },
    { name: "Ernesta",  avatar: "https://i.pravatar.cc/80?u=haeyi"  },
    { name: "Esperanza",   avatar: "https://i.pravatar.cc/80?u=veuu"   },
    { name: "Eudora",   avatar: "https://i.pravatar.cc/80?u=ruoeic"   },
    { name: "Eulalia",   avatar: "https://i.pravatar.cc/80?u=keodeoeo"   },
    { name: "Eunice",   avatar: "https://i.pravatar.cc/80?u=banhqepuy"   },
    { name: "Euphemia",   avatar: "https://i.pravatar.cc/80?u=soceaola"   },
    { name: "Fallon",   avatar: "https://i.pravatar.cc/80?u=nuoesc"   },
    { name: "Farah",   avatar: "https://i.pravatar.cc/80?u=baedn"   },
    { name: "Felicity",   avatar: "https://i.pravatar.cc/80?u=tueflanh"   },
    { name: "Fidelia",   avatar: "https://i.pravatar.cc/80?u=lego"   },
    { name: "Fidelma",   avatar: "https://i.pravatar.cc/80?u=beehp"   },
    { name: "Fiona",   avatar: "https://i.pravatar.cc/80?u=quejat"   },
    { name: "Florence",   avatar: "https://i.pravatar.cc/80?u=diekeuhoa"   },
    { name: "Genevieve",   avatar: "https://i.pravatar.cc/80?u=mayelgiat"   },
    { name: "Gerda",   avatar: "https://i.pravatar.cc/80?u=tiezvi"   },
    { name: "Giselle",   avatar: "https://i.pravatar.cc/80?u=giuexong"   },
    { name: "Gladys",   avatar: "https://i.pravatar.cc/80?u=tecu"   },
    { name: "Glenda",   avatar: "https://i.pravatar.cc/80?u=chuevot"   },
    { name: "Godiva",   avatar: "https://i.pravatar.cc/80?u=dueba"   },
    { name: "Grainne",   avatar: "https://i.pravatar.cc/80?u=xoenai"   },
    { name: "Griselda",   avatar: "https://i.pravatar.cc/80?u=chemom"   },
    { name: "Guinevere",   avatar: "https://i.pravatar.cc/80?u=vatyi"   },
    { name: "Gwyneth",   avatar: "https://i.pravatar.cc/80?u=ntuho"   },
    { name: "Halcyon",   avatar: "https://i.pravatar.cc/80?u=catim"   },
    { name: "Hebe",   avatar: "https://i.pravatar.cc/80?u=qutoyt"   },
    { name: "Helga",   avatar: "https://i.pravatar.cc/80?u=letp"   },
    { name: "Heulwen",   avatar: "https://i.pravatar.cc/80?u=tatao"   },

    { name: "Hypatia", avatar: "https://i.pravatar.cc/80?u=mitsnh" },
    { name: "Imelda",  avatar: "https://i.pravatar.cc/80?u=latdn"  },
    { name: "Iolanthe",  avatar: "https://i.pravatar.cc/80?u=hatfi"  },
    { name: "Iphigenia",   avatar: "https://i.pravatar.cc/80?u=vtgu"   },
    { name: "Isadora",   avatar: "https://i.pravatar.cc/80?u=ruothc"   },
    { name: "Isolde",   avatar: "https://i.pravatar.cc/80?u=keotjdeo"   },
    { name: "Jena",   avatar: "https://i.pravatar.cc/80?u=banhqtkuy"   },
    { name: "Jezebel",   avatar: "https://i.pravatar.cc/80?u=sotlcola"   },
    { name: "Jocasta",   avatar: "https://i.pravatar.cc/80?u=ntzuoc"   },
    { name: "Jocelyn",   avatar: "https://i.pravatar.cc/80?u=batxn"   },
    { name: "Joyce",   avatar: "https://i.pravatar.cc/80?u=tulatcnh"   },
    { name: "Kaylin",   avatar: "https://i.pravatar.cc/80?u=ltvo"   },
    { name: "Keelin",   avatar: "https://i.pravatar.cc/80?u=betbp"   },
    { name: "Keisha",   avatar: "https://i.pravatar.cc/80?u=qutnat"   },
    { name: "Kelsey",   avatar: "https://i.pravatar.cc/80?u=dieutmhoa"   },
    { name: "Kerenza",   avatar: "https://i.pravatar.cc/80?u=maygyuiat"   },
    { name: "Keva",   avatar: "https://i.pravatar.cc/80?u=tiyivi"   },
    { name: "Kiera",   avatar: "https://i.pravatar.cc/80?u=giuyoong"   },
    { name: "Ladonna",   avatar: "https://i.pravatar.cc/80?u=typu"   },
    { name: "Laelia",   avatar: "https://i.pravatar.cc/80?u=chuauot"   },
    { name: "Lani",   avatar: "https://i.pravatar.cc/80?u=duusa"   },
    { name: "Latifah",   avatar: "https://i.pravatar.cc/80?u=xudoai"   },
    { name: "Letitia",   avatar: "https://i.pravatar.cc/80?u=chufom"   },
    { name: "Louisa",   avatar: "https://i.pravatar.cc/80?u=vaugi"   },
    { name: "Lucasta",   avatar: "https://i.pravatar.cc/80?u=nuhho"   },
    { name: "Lysandra",   avatar: "https://i.pravatar.cc/80?u=caujm"   },
    { name: "Mabel",   avatar: "https://i.pravatar.cc/80?u=quyukt"   },
    { name: "Maris",   avatar: "https://i.pravatar.cc/80?u=leul"   },
    { name: "Martha",   avatar: "https://i.pravatar.cc/80?u=tauzo"   },

    { name: "Meliora", avatar: "https://i.pravatar.cc/80?u=miuxnh" },
    { name: "Meredith",  avatar: "https://i.pravatar.cc/80?u=lan"  },
    { name: "Milcah",  avatar: "https://i.pravatar.cc/80?u=hauci"  },
    { name: "Mildred",   avatar: "https://i.pravatar.cc/80?u=vuvu"   },
    { name: "Mirabel",   avatar: "https://i.pravatar.cc/80?u=ruuboc"   },
    { name: "Miranda",   avatar: "https://i.pravatar.cc/80?u=keoundeo"   },
    { name: "Muriel",   avatar: "https://i.pravatar.cc/80?u=banumquy"   },
    { name: "Myrna",   avatar: "https://i.pravatar.cc/80?u=socoiola"   },
    { name: "Neala",   avatar: "https://i.pravatar.cc/80?u=nuoipc"   },
    { name: "Olwen",   avatar: "https://i.pravatar.cc/80?u=baian"   },
    { name: "Oralie",   avatar: "https://i.pravatar.cc/80?u=tuislanh"   },
    { name: "Oriana",   avatar: "https://i.pravatar.cc/80?u=loid"   },
    { name: "Orla",   avatar: "https://i.pravatar.cc/80?u=beifp"   },
    { name: "Pandora",   avatar: "https://i.pravatar.cc/80?u=qiguat"   },
    { name: "Phedra",   avatar: "https://i.pravatar.cc/80?u=dieihuhoa"   },
    { name: "Philomena",   avatar: "https://i.pravatar.cc/80?u=maijygiat"   },
    { name: "Phoebe",   avatar: "https://i.pravatar.cc/80?u=tiviki"   },
    { name: "Rowan",   avatar: "https://i.pravatar.cc/80?u=giuilong"   },
    { name: "Rowena",   avatar: "https://i.pravatar.cc/80?u=tuiz"   },
    { name: "Selina",   avatar: "https://i.pravatar.cc/80?u=chixuot"   },
    { name: "Sigourney",   avatar: "https://i.pravatar.cc/80?u=dicua"   },
    { name: "Sigrid",   avatar: "https://i.pravatar.cc/80?u=xoaivi"   },
    { name: "Sophronia",   avatar: "https://i.pravatar.cc/80?u=cibhom"   },
    { name: "Stella",   avatar: "https://i.pravatar.cc/80?u=vain"   },
    { name: "Thekla",   avatar: "https://i.pravatar.cc/80?u=nhimo"   },
    { name: "Theodora",   avatar: "https://i.pravatar.cc/80?u=copam"   },
    { name: "Tryphena",   avatar: "https://i.pravatar.cc/80?u=qoauyt"   },
    { name: "Ula",   avatar: "https://i.pravatar.cc/80?u=leos"   },
    { name: "Vera",   avatar: "https://i.pravatar.cc/80?u=taodo"   },

    { name: "Verity", avatar: "https://i.pravatar.cc/80?u=minofh" },
    { name: "Veronica",  avatar: "https://i.pravatar.cc/80?u=logan"  },
    { name: "Winifred",  avatar: "https://i.pravatar.cc/80?u=haohi"  },
    { name: "Xavia",   avatar: "https://i.pravatar.cc/80?u=voju"   },
    { name: "Xenia",   avatar: "https://i.pravatar.cc/80?u=ruokoc"   },
    { name: "Ethan",   avatar: "https://i.pravatar.cc/80?u=keolodeo"   },
    { name: "Lucas",   avatar: "https://i.pravatar.cc/80?u=banhozquy"   },
    { name: "Liam",   avatar: "https://i.pravatar.cc/80?u=socoxola"   },
    { name: "Adam",   avatar: "https://i.pravatar.cc/80?u=nuoocc"   },
    { name: "Aiden",   avatar: "https://i.pravatar.cc/80?u=bovan"   },
    { name: "Ryan",   avatar: "https://i.pravatar.cc/80?u=tulaobnh"   },
    { name: "Jayden",   avatar: "https://i.pravatar.cc/80?u=lono"   },
    { name: "Kai",   avatar: "https://i.pravatar.cc/80?u=beomp"   },
    { name: "Daniel",   avatar: "https://i.pravatar.cc/80?u=qupaat"   },
    { name: "Nathan",   avatar: "https://i.pravatar.cc/80?u=diepsuhoa"   },
    { name: "Aaron",   avatar: "https://i.pravatar.cc/80?u=maypdgiat"   },
    { name: "Dylan",   avatar: "https://i.pravatar.cc/80?u=tipfvi"   },
    { name: "Leo",   avatar: "https://i.pravatar.cc/80?u=giuopgng"   },
    { name: "Zachary",   avatar: "https://i.pravatar.cc/80?u=tphu"   },
    { name: "Matthew",   avatar: "https://i.pravatar.cc/80?u=chupjjot"   },
    { name: "Benjamin",   avatar: "https://i.pravatar.cc/80?u=dupka"   },
    { name: "Jaden",   avatar: "https://i.pravatar.cc/80?u=xoapli"   },
    { name: "Samuel",   avatar: "https://i.pravatar.cc/80?u=chpzom"   },
    { name: "Xavier",   avatar: "https://i.pravatar.cc/80?u=vapxi"   },
    { name: "Joshua",   avatar: "https://i.pravatar.cc/80?u=npcho"   },
    { name: "Isaac",   avatar: "https://i.pravatar.cc/80?u=campv"   },
    { name: "Elijah",   avatar: "https://i.pravatar.cc/80?u=qpbuyt"   },
    { name: "Caleb",   avatar: "https://i.pravatar.cc/80?u=lepn"   },
    { name: "Michael",   avatar: "https://i.pravatar.cc/80?u=tpmao"   },

    { name: "Alexander", avatar: "https://i.pravatar.cc/80?u=masinh" },
    { name: "William",  avatar: "https://i.pravatar.cc/80?u=laadn"  },
    { name: "Jake",  avatar: "https://i.pravatar.cc/80?u=hafai"  },
    { name: "Andrew",   avatar: "https://i.pravatar.cc/80?u=vagu"   },
    { name: "Oscar",   avatar: "https://i.pravatar.cc/80?u=ruahoc"   },
    { name: "Nathaniel",   avatar: "https://i.pravatar.cc/80?u=keajodeo"   },
    { name: "Julian",   avatar: "https://i.pravatar.cc/80?u=banhqakuy"   },
    { name: "Adrian",   avatar: "https://i.pravatar.cc/80?u=socoalla"   },
    { name: "Christian",   avatar: "https://i.pravatar.cc/80?u=nazuoc"   },
    { name: "Jeremy",   avatar: "https://i.pravatar.cc/80?u=banax"   },
    { name: "David",   avatar: "https://i.pravatar.cc/80?u=tulaacnh"   },
    { name: "Harry",   avatar: "https://i.pravatar.cc/80?u=lavo"   },
    { name: "Sean",   avatar: "https://i.pravatar.cc/80?u=beabp"   },
    { name: "Felix",   avatar: "https://i.pravatar.cc/80?u=quanat"   },
    { name: "Jasper",   avatar: "https://i.pravatar.cc/80?u=diameuhoa"   },
    { name: "Oliver",   avatar: "https://i.pravatar.cc/80?u=maysdgiat"   },
    { name: "Theo",   avatar: "https://i.pravatar.cc/80?u=tisfi"   },
    { name: "Tyler",   avatar: "https://i.pravatar.cc/80?u=gisguong"   },
    { name: "Kenneth",   avatar: "https://i.pravatar.cc/80?u=tush"   },
    { name: "Hugo",   avatar: "https://i.pravatar.cc/80?u=chuosjt"   },
    { name: "Martin",   avatar: "https://i.pravatar.cc/80?u=duska"   },
    { name: "Joel",   avatar: "https://i.pravatar.cc/80?u=xoasli"   },
    { name: "Steven",   avatar: "https://i.pravatar.cc/80?u=chszom"   },
    { name: "Patrick",   avatar: "https://i.pravatar.cc/80?u=vsxai"   },
    { name: "Simon",   avatar: "https://i.pravatar.cc/80?u=nhsco"   },
    { name: "Louis",   avatar: "https://i.pravatar.cc/80?u=csvam"   },
    { name: "Marcus",   avatar: "https://i.pravatar.cc/80?u=qusbyt"   },
    { name: "Brandon",   avatar: "https://i.pravatar.cc/80?u=lsne"   },
    { name: "Ivan",   avatar: "https://i.pravatar.cc/80?u=taosm"   },
  ];
  const MULT = isSalad ? 5 : (MULTIPLIER[selectedName] || 5);

  for (let i = 0; i <= 2; i++) {
    const b = bots.splice(Math.floor(Math.random()*bots.length), 1)[0];
    // tạo số thắng nguyên (không lẻ) và khác nhau mỗi vòng
    const baseBet = (Math.floor(Math.random() * 9) + 5)* 100;
    const amount  = Math.round(baseBet * MULT);

    TopWinnersReal.add({
      name: b.name,
      avatar: b.avatar,
      amount,
      betLabel: isSalad ? "Nổ Salad (4 cửa rau)" : ``,
      icon: isSalad ? "🥗" : ("")
     });
  }
})(selected.name, /* isSalad= */ false);

TopWinnersReal.render();



 increaseJackpotWithReset();

// Bật sáng cả ô đặt cược trúng
  const betBox = document.querySelector(`.bet-box[data-name="${selected.name}"]`);
  if (betBox) {
  betBox.classList.add('highlight-win');
  setTimeout(() => {
  setTimeout(() => {
  betBox.classList.remove('highlight-win');
  unlockBets();  
  document.querySelectorAll('.chip, .bet-box').forEach(chip => chip.classList.remove('lock-bets'));

  spinCount++;
  document.getElementById("spinCounter").textContent = ` Round: ${spinCount}`;
  updateSpinCounter();

//Reset cược.
  resetBets();
  unlockDoors();
  isSpinning = false;
  adminResult = null; 
  document.getElementById("adminSelect").value = "";


  clearBets(); // 🔥 sang vòng mới thì không giữ cược nữa
  clearHot();  // 🔥 Xóa HOT sau 5 giây khi đã trả kết quả
  window.removeEventListener("keydown", disableF5);
  window.removeEventListener("beforeunload", blockReload);
  },5000);
//Tăng số phiên quay.
  
  highlightWinner(selected.name);
  }, 0); // bất sáng ô trúng và tắt ô trượt
  }
  if (winAmount >= 1000) {
  resultEl.classList.add("big-win-effect");
  } 
  else if (winAmount > 0) {
  resultEl.classList.add("small-win-effect");
  }
  setTimeout(() => {
  resultEl.classList.remove("big-win-effect", "small-win-effect");
  }, 2000);

if (totalBet > 0) {
  const now = new Date();
  const timeStr = now.toLocaleTimeString('vi-VN', { hour:'2-digit', minute:'2-digit', second:'2-digit' });

  appendBetLog({
    container: betHistoryEl,
    time: timeStr,
    spin: typeof currentSpinId !== 'undefined' ? currentSpinId : null, // nếu có
    bets,                                 
    totalBet,
    outcome,                            
   icon: (selected && selected.icon) ? selected.icon : '🎯',               
    });
    }

}
  }, 1000);
}

  // Hàm cập nhật giao diện + lưu
  function updateSpinCounter() {
  const spinNumber = getCurrentSpinNumber();
  spinCounterEl.textContent = ` Round: ${spinNumber}`;
  /*document.getElementById("spinCounter").textContent = ` Round: ${spinCount}`;
  localStorage.setItem("spinCount", spinCount);
  localStorage.setItem("lastSpinDate", getToday());*/
}

// Khi load trang thì hiển thị số phiên đã lưu
  updateSpinCounter();
  setInterval(updateSpinCounter, 1000);

  function weightedRandom(items,bets) {
  const adjustedItems = items.map(item => {
  const betAmount = parseFloat(bets[item.name]) || 0;        
  let penaltyFactor = 1;
  if (betAmount > 0) {
  penaltyFactor = Math.max(0.2, 1 / (1 + betAmount / 10000000));
  }
  return { ...item, weight: item.weight * penaltyFactor };
  });
  const totalWeight = adjustedItems.reduce((sum, item) => sum + item.weight, 0);

 
//Random kết quả.
  let rand = Math.random() * totalWeight;
  let cumWeight = 0;
  for (let item of adjustedItems) {
  cumWeight += item.weight;
  if (rand <= cumWeight) {
  return item;
  }
  }
}

  function confirmSpin() {
  const form = document.getElementById("betForm");
  const formData = new FormData(form);
  let totalBet = 0;
  for (const [key, value] of formData.entries()) {
    totalBet += parseInt(value || 0);
  }
  if (totalBet <= 0) {
    alert("Vui lòng đặt cược trước khi quay.");
    return;
  }
  if (confirm(`Tổng số xu đã đặt cược: ${totalBet}.\nBạn có chắc chắn muốn quay thưởng?`)) {
   spinWheel();
  }
  }

/*//auto quay
  let autoTime = 35;
  let autoInterval;
  let pauseAfterSpin = false;
  let pauseTimer = 0;

  function startAutoSpinTimer() {
  autoInterval = setInterval(() => {
  const countdownEl = document.getElementById("autoCountdown");
// Nếu đang trong thời gian chờ sau khi quay
  if (pauseAfterSpin) {
  if (pauseTimer > 0) {
  countdownEl.textContent = `⏳ Đang chờ kết quả... ${pauseTimer}s`;
  countdownEl.classList.add("blink-yellow"); // vàng nhấp nháy
  pauseTimer--;
  } 
  else {
  autoTime = 35; // reset về 35 giây
  pauseAfterSpin = false;
  countdownEl.classList.remove("blink-yellow");
  countdownEl.textContent = `⏳ Quay thưởng sau: ${autoTime} giây`;
  }
  return;
  }
// Bình thường đếm ngược 35s
  autoTime--;
  countdownEl.textContent = `⏳ Quay thưởng sau: ${autoTime} giây`;
  if (autoTime === 20) {
    suggestResult();
  }
  if (autoTime <= 5) {
  countdownEl.classList.add("blink"); // đỏ nhấp nháy
  } 
  else {
  countdownEl.classList.remove("blink");
  }
  if (autoTime <= 0) {
  if (!isSpinning) {
  spinWheel();
  }

// Sau khi quay thì pause 4 giây
  pauseAfterSpin = true;
  pauseTimer = 4;
  countdownEl.classList.remove("blink"); // tắt đỏ nhấp nháy
  }
  }, 1000);
}*/

  window.onload = function() {
  updateBalanceDisplay();
  updateJackpotDisplay();
  startAutoSpinTimer();
};

  function showJackpotEffect() {
  const container = document.getElementById("jackpotEffect");
  container.innerHTML = "";
// Coin bay xiên
  for (let i = 0; i < 20; i++) {
  const coin = document.createElement("div");
  coin.className = "coin";
  const x = `${(Math.random() - 0.5) * 300}px`;
  const y = `${-150 - Math.random() * 200}px`;
  coin.style.left = `${50 + Math.random() * 30 - 15}%`;
  coin.style.bottom = `0`;
  coin.style.setProperty('--x', x);
  coin.style.setProperty('--y', y);
  container.appendChild(coin);
  }
// Fireworks nhiều màu
  const colors = ['#ff0', '#f0f', '#0ff', '#f55', '#5f5', '#55f', '#ffa500'];
  for (let i = 0; i < 10; i++) {
  const fw = document.createElement("div");
  fw.className = "firework";
  fw.style.left = `${40 + Math.random() * 20}%`;
  fw.style.top = `${30 + Math.random() * 30}%`;
  fw.style.setProperty('--color', colors[Math.floor(Math.random() * colors.length)]);
  container.appendChild(fw);
  }
// Mưa xu
  for (let i = 0; i < 30; i++) {
  const rain = document.createElement("div");
  rain.className = "rain-coin";
  rain.style.left = `${Math.random() * 100}%`;
  rain.style.animationDuration = `${2 + Math.random() * 2}s`;
  rain.style.animationDelay = `${Math.random() * 0.5}s`;
  container.appendChild(rain);
  }
  // Xoá hiệu ứng sau 3 giây
  setTimeout(() => container.innerHTML = "", 3000);
}

  function updateTimeDisplay() {
  const now = new Date();
  const timeString = now.toLocaleTimeString('vi-VN', { hour12: false });
  document.getElementById("currentTime").textContent = timeString;
}
  setInterval(updateTimeDisplay, 1000);
  updateTimeDisplay(); // chạy ngay khi load

  function updateStatsDisplay() {
  const profitEl = document.querySelector(".stat-value.profit");
  const lossEl   = document.querySelector(".stat-value.loss");

  const oldProfit = parseInt(profitEl.textContent.replace(/\D/g,'')) || 0;
  const oldLoss   = parseInt(lossEl.textContent.replace(/\D/g,'')) || 0;

  animateNumber(profitEl, oldProfit, netProfit, 600);
  animateNumber(lossEl, oldLoss, netLoss, 600);

  localStorage.setItem("netProfit", netProfit);
  localStorage.setItem("netLoss", netLoss);
}
  updateStatsDisplay(); // gọi 1 lần khi load trang

  function resetStats() {
  if (confirm("Reset thống kê lãi/lỗ?")) {
  netProfit = 0;
  netLoss = 0;
  updateStatsDisplay();
  }
}

  function updateJackpotDisplay() {
  jackpotEl.textContent = jackpot.toFixed(0);
  localStorage.setItem("jackpot", jackpot); // 🔥 lưu lại jackpot
  document.getElementById("jackpotProgress").value = jackpot;
}

// 🔹 Hiển thị ngay khi load trang
  updateJackpotDisplay();

  if (jackpot >= JACKPOT_THRESHOLD) {
  document.querySelector('button[onclick="confirmSpin()"]').classList.add('glow');
}


// --- CHIP CHỌN TIỀN CƯỢC ---

// Khởi tạo cược = 0 cho tất cả
  document.querySelectorAll(".bet-box").forEach(box => {
  bets[box.dataset.name] = 0;
});


// --- chọn chip ---
  document.querySelectorAll(".chip").forEach(chip => {
  chip.addEventListener("click", () => {
  document.querySelectorAll(".chip").forEach(c => c.classList.remove("active"));
  chip.classList.add("active");
  currentChip = parseInt(chip.dataset.value);
  });
});


// --- đặt cược bằng click ô ---
  document.querySelectorAll(".bet-box").forEach(box => {
  box.addEventListener("click", () => {
  if (!currentChip) {
  alert("Hãy chọn mệnh giá chip trước!");
  return;
  }
  if (balance < currentChip) {
  alert("Không đủ số dư để đặt cược!");
  return;
  }
  if (currentChip > 0) {
  const name = box.dataset.name;
  bets[name] = Number(bets[name] || 0) + Number(currentChip);
  balance -= currentChip;
  updateBalanceDisplay();
  updateBetDisplay();
  saveBets();  // 🔥 lưu lại ngay
  }
  });
});

  document.querySelectorAll(".door").forEach(door => {
  door.addEventListener("click", () => {
   if (!currentChip) {
  alert("Hãy chọn mệnh giá chip trước!");
  return;
  }
  if (balance < currentChip) {
  alert("Không đủ số dư để đặt cược!");
  return;
  }
  const name = door.dataset.name;
  if (!bets[name]) bets[name] = 0;
  bets[name] += currentChip;
  const betDisplay = door.querySelector(".bet-display");
  betDisplay.textContent = bets[name];
  localStorage.setItem("currentBets", JSON.stringify(bets));
  balance -= currentChip;
  updateBalanceDisplay();
  });
});


// --- reset cược ---
  function resetBets() {
  bets = {}; // reset object lưu cược
  document.querySelectorAll(".door .bet-display").forEach(el => {
  el.textContent = "0"; // reset hiển thị về 0
  });
  localStorage.removeItem("currentBets"); // nếu bạn có lưu vào localStorage
  for (let k in bets) bets[k] = 0;
  updateBetDisplay();
}

// Lấy ngày hiện tại (yyyy-mm-dd)
  function getToday() {
  let d = new Date();
  return d.getFullYear() + "-" + (d.getMonth() + 1) + "-" + d.getDate();
}

// Lấy ngày cuối cùng lưu trong localStorage
  let lastDate = localStorage.getItem("lastSpinDate");

// Nếu khác ngày → reset về 0
  if (lastDate !== getToday()) {
  spinCount = 0;
  localStorage.setItem("spinCount", spinCount);
  localStorage.setItem("lastSpinDate", getToday());
}

// --- Lưu cược vào localStorage ---
  function saveBets() {
  localStorage.setItem("currentBets", JSON.stringify(bets));
  localStorage.setItem("totalBet", document.getElementById("totalBetDisplay").textContent);
}

// --- Khôi phục cược khi load lại ---
  function restoreBets() {
  const savedBets = JSON.parse(localStorage.getItem("currentBets")) || {};
  bets = savedBets;
  Object.keys(bets).forEach(name => {
  bets[name] = Number(bets[name]); // ép về số
  const bet = document.querySelector(`.bet-box[data-name="${name}"] .bet-amount`);
  if (bet) bet.textContent = bets[name];

  document.querySelectorAll(".door").forEach(door => {
  const name = door.dataset.name;
  const betDisplay = door.querySelector(".bet-display");
  betDisplay.textContent = bets[name] || 0;
  });
  });

  // Tổng cược
  const savedTotal = localStorage.getItem("totalBet");
  if (savedTotal) {
  document.getElementById("totalBetDisplay").textContent = savedTotal;
  }
}

// --- Reset cược sau khi quay ---
  function clearBets() {
  bets = {};
  document.querySelectorAll(".bet-amount").forEach(el => el.textContent = "0");
  document.getElementById("totalBetDisplay").textContent = "";
  localStorage.removeItem("currentBets");
  localStorage.removeItem("totalBet");
}

// Gọi restore khi trang vừa load
  window.addEventListener("load", restoreBets);
  window.addEventListener("load", () => {
  let savedResult = localStorage.getItem("lastResult");
  if (savedResult) {
  let selected = JSON.parse(savedResult);
  document.getElementById("result").innerHTML = 
  `${selected.icon}`;
 
  const savedResult = localStorage.getItem("lastResult");
  if (savedResult) {
  startDoorAnimation(parseInt(savedResult, 10));
  }

  }
});

  function startDoorAnimation(callback) {
  const doors = document.querySelectorAll(".door");
  if (!doors.length) return;
// Làm tối tất cả
  doors.forEach(d => d.classList.add("dim"));
  let index = 0;
  const interval = setInterval(() => {
// Tắt sáng
   doors.forEach(d => d.classList.remove("highlight"));
// Sáng cửa hiện tại
   doors[index].classList.add("highlight");
   index = (index + 1) % doors.length;
   }, 100); // đổi cửa mỗi 0.1s
// Sau 5 giây thì dừng
   setTimeout(() => {
   clearInterval(interval);
   doors.forEach(d => d.classList.remove("highlight", "dim"));
   if (callback) callback();
   }, 5000);
}

  
 function highlightWinner(winnerName) {
  const doors = document.querySelectorAll(".door");
  doors.forEach(d => d.classList.remove("winner"));
  doors.forEach(door => {
  const img = door.querySelector("img");
  if (img && img.alt === winnerName) {   // so sánh theo alt
  door.classList.add("winner");
  }
  door.classList.add("dim"); // làm mờ tất cả
  if (door.dataset.name === winnerName) {
  door.classList.remove("dim"); // bỏ mờ ô trúng
  door.classList.add("highlight"); // sáng ô trúng
  } else {
  door.classList.remove("highlight");
  }
  });
// Sau 5s reset lại bình thường
  setTimeout(() => {
  doors.forEach(door => {
  door.classList.remove("dim", "highlight");
  door.classList.remove("winner");
  });
  }, 5000);
}



  function unlockBets() {
  document.querySelectorAll('.chip, .bet-box').forEach(el => {
  el.classList.remove('lock-bets');
  });
  isSpinning = false;
}

  window.addEventListener("load", () => {
  // Mở khóa chip + bet box khi F5
  document.querySelectorAll('.chip, .bet-box').forEach(el => {
  el.classList.remove('lock-bets');
  });
// khôi phục pause 4s
  const savedPause = localStorage.getItem("pauseAfterSpin") === "true";
  const savedPauseTimer = parseInt(localStorage.getItem("pauseTimer")) || 0;
  if (savedPause && savedPauseTimer > 0) {
  pauseAfterSpin = true;
  pauseTimer = savedPauseTimer;
  } else {
  pauseAfterSpin = false;
  pauseTimer = 0;
  }
});


  function clearHot() {
  // Xóa nhãn trong bet-box & cửa
  document.querySelectorAll(".bet-box .hot-label").forEach(el => el.remove());
  document.querySelectorAll(".door .hot-label").forEach(el => el.remove());
  // Xóa text ở khu vực suggestion
  document.getElementById("suggestion").textContent = "";
  // Xóa trong localStorage để lần sau suggestResult() sẽ tạo mới
  localStorage.removeItem("lastHot");
  localStorage.removeItem("lastHotName");
}





  function showResultModal(selected, totalBet, winAmount) {
  const modal = document.getElementById("resultModal");
  document.body.style.overflow = "hidden";   // khoá cuộn

  const spinNumber = getCurrentSpinNumber(); 
  document.getElementById("modalSpin").textContent = spinNumber - 1 ;
  document.getElementById("modalResult").textContent = selected.icon;
  document.getElementById("modalWinner").textContent = selected.icon;
  document.getElementById("modalBet").textContent = totalBet;
  document.getElementById("modalWin").textContent = winAmount;


  modal.classList.remove("hide");
  modal.style.display = "flex";

  // dùng setTimeout để đảm bảo transition chạy
  setTimeout(() => {
    modal.classList.add("show");
  }, 10);

  // Tự động ẩn sau 5 giây
  setTimeout(() => {
    closeResultModal();
  }, 5000);
}




  function closeResultModal() {
  const modal = document.getElementById("resultModal");
  document.body.style.overflow = "";   
  modal.classList.remove("show");
  modal.classList.add("hide");

  // Chờ animation xong mới ẩn hẳn
  setTimeout(() => {
  modal.style.display = "none";
  modal.classList.remove("hide");
  }, 400);
}


// ESC để đóng modal
  document.addEventListener("keydown", function(event) {
  if (event.key === "Escape") {
  const modal = document.getElementById("resultModal");
  if (modal && modal.style.display !== "none") {
  closeResultModal();
  }
  }
});

// Click ra ngoài modal-box để đóng
  document.getElementById("resultModal").addEventListener("click", function(e) {
  if (e.target === this) {  // chỉ khi click đúng nền đen bên ngoài
  closeResultModal();
  }
});

  function animateNumber(element, start, end, duration = 500) {
  let startTime = null;
  function step(timestamp) {
  if (!startTime) startTime = timestamp;
  const progress = Math.min((timestamp - startTime) / duration, 1);
  const value = Math.floor(progress * (end - start) + start);
  element.textContent = value.toLocaleString("vi-VN") + " ";
  if (progress < 1) {
  requestAnimationFrame(step);
  }
  }
  requestAnimationFrame(step);
// Hiệu ứng flash
  element.classList.add("flash-update");
  setTimeout(() => element.classList.remove("flash-update"), 600);
}

  function lockDoors() {
  document.querySelectorAll(".door").forEach(door => door.classList.add("locked"));
}

  function unlockDoors() {
  document.querySelectorAll(".door").forEach(door => door.classList.remove("locked"));
}


// Khóa chuột phải
document.addEventListener("contextmenu", e => e.preventDefault());

// Chặn các phím tắt DevTools
  document.addEventListener("keydown", function(e) {
  // F12
  if (e.key === "F12") {
  e.preventDefault();
  return false;
  }
  // Ctrl+Shift+I
  if (e.ctrlKey && e.shiftKey && e.key === "I") {
  e.preventDefault();
  return false;
  }
  // Ctrl+Shift+J
  if (e.ctrlKey && e.shiftKey && e.key === "J") {
  e.preventDefault();
  return false;
  }
  // Ctrl+U (view source)
  if (e.ctrlKey && e.key === "u") {
  e.preventDefault();
  return false;
  }
});

let adminResult = null; // null = random, khác null = cửa do admin chọn

// Lắng nghe admin chọn
document.getElementById("adminSelect").addEventListener("change", (e) => {
adminResult = e.target.value || null;
});
// Hàm chọn kết quả (hiện tại dùng random)
function chooseResult() {
if (adminResult) {
// Nếu admin chỉ định thì lấy kết quả đó
return options.find(opt => opt.name === adminResult);
} else {
// Random như cũ
const totalWeight = options.reduce((sum, opt) => sum + opt.weight, 0);
let rand = Math.random() * totalWeight;
let cumWeight = 0;
for (let opt of options) {
cumWeight += opt.weight;
if (rand <= cumWeight) return opt;
  }
  }
}

// Drag & Drop cho adminPanel
  (function makeDraggable() {
  const panel = document.getElementById("adminPanel");
  let offsetX = 0, offsetY = 0, isDown = false;

  panel.addEventListener("mousedown", (e) => {
  isDown = true;
  offsetX = e.clientX - panel.offsetLeft;
  offsetY = e.clientY - panel.offsetTop;
  panel.style.cursor = "grabbing";
  });
  document.addEventListener("mouseup", () => {
  isDown = false;
  panel.style.cursor = "move";
  });
  document.addEventListener("mousemove", (e) => {
  if (!isDown) return;
  panel.style.left = (e.clientX - offsetX) + "px";
  panel.style.top  = (e.clientY - offsetY) + "px";
  });
})();


// Bản đồ phím tắt chọn kết quả
const hotkeyMap = {
  "0": "",       // Random
  "1": "Chua",
  "2": "Cải",
  "3": "Ngô",
  "4": "Rốt",
  "5": "Mỳ",
  "6": "Xiên",
  "7": "Đùi",
  "8": "Bò",
};



// Toggle panel bằng phím tắt Ctrl + M
  document.addEventListener("keydown", (e) => {
  if (e.ctrlKey && e.shiftKey && e.key.toLowerCase() === "m") {
  e.preventDefault(); // tránh select all
  const panel = document.getElementById("adminPanel");
  panel.style.display = (panel.style.display === "none" || panel.style.display === "") 
  ? "block" : "none";
  return;
}
// Chọn kết quả bằng phím số
  if (hotkeyMap.hasOwnProperty(e.key)) {
  const select = document.getElementById("adminSelect");
  select.value = hotkeyMap[e.key];
  adminResult = hotkeyMap[e.key] || null;
}
});

  

 function disableF5(e) {
 if ((e.which || e.keyCode) === 116) {  // 116 = F5
 e.preventDefault();
 return false;
 }
}

 function blockReload(event) {
 event.preventDefault();
 event.returnValue = "";
}

// Nút mở modal
document.getElementById("openHistoryBtn").onclick = () => {
  renderBetHistory(); // luôn load mới nhất trước khi show
  const modal = document.getElementById("historyBetModal");
  modal.style.display = "flex";
  setTimeout(() => modal.classList.add("show"), 10);
};

// Nút đóng modal
 document.getElementById("closeHistoryBtn").onclick = () => {
 document.getElementById("historyBetModal").style.display = "none";
};

// Đóng modal khi nhấn ESC
 document.addEventListener("keydown", (e) => {
 if (e.key === "Escape") {
 const historyModal = document.getElementById("historyBetModal");
 if (historyModal.style.display === "flex") {
 historyModal.style.display = "none";
 }
 }
});

//Mũi tên nạp
const arrow = document.getElementById("openDepositArrow");
const depositModal = document.getElementById("depositInfoModal");
const closeDepositBtn = document.getElementById("closeDepositModal");

arrow.onclick = () => {
  depositModal.style.display = "flex";
  arrow.classList.add("open");
};

closeDepositBtn.onclick = () => {
  depositModal.style.display = "none";
  arrow.classList.remove("open");
};


// Danh sách code hợp lệ + số xu nhận được
const codeRewards = {
  "NAP50": 50, "NAP100": 100, "NAP200": 200,"NAP300": 300,"NAP400": 400, "NAP500": 500, "NAP1000": 1000,"NAP2000": 2000,"NAP3000": 3000,"NAP4000": 4000,"NAP5000": 5000,"NAP10000": 10000,"NAP20000": 20000,"NAP30000": 30000, "NAP40000": 40000, "NAP50000": 50000,
 

// Code 100
"GRD518327915433" : 100,  "GRD224840549311" : 100,  "GRD240663650003" : 100,  "GRD536694243430" : 100,  "GRD620621292115" : 100,  "GRD199324507618" : 100,  "GRD199396195503" : 100,  "GRD977263453631" : 100,  "GRD882169353521" : 100,
"GRD155489840949" : 100,  "GRD325546709123" : 100,  "GRD947521559470" : 100,  "GRD125244829642" : 100,  "GRD466932273721" : 100,  "GRD478023144131" : 100,  "GRD689216189350" : 100,  "GRD405667564079" : 100,  "GRD859893941736" : 100,
"GRD516803965681" : 100,  "GRD124585230226" : 100,  "GRD263285180336" : 100,  "GRD666374772214" : 100,  "GRD206947868997" : 100,  "GRD799673824986" : 100,  "GRD962595720557" : 100,  "GRD945231173709" : 100,  "GRD986869776234" : 100,
"GRD673364651871" : 100,  "GRD275606546116" : 100,  "GRD620608459553" : 100,  "GRD172118145334" : 100,  "GRD370912021958" : 100,  "GRD617092065027" : 100,  "GRD931280946932" : 100,  "GRD513771618016" : 100,  "GRD756835418364" : 100,
"GRD857912516686" : 100,  "GRD643848043412" : 100,  "GRD401683580965" : 100,  "GRD421792465813" : 100,  "GRD683122636083" : 100,  "GRD459336459522" : 100,  "GRD538923017393" : 100,  "GRD831682244162" : 100,  "GRD489027426161" : 100,
"GRD756775224128" : 100,  "GRD451650717053" : 100,  "GRD237363621132" : 100,  "GRD776835646264" : 100,  "GRD362016629135" : 100,  "GRD747267003143" : 100,  "GRD875820435681" : 100,  "GRD465973854788" : 100,  "GRD980141365373" : 100,
"GRD964072952941" : 100,  "GRD501614122446" : 100,  "GRD546365068854" : 100,  "GRD870418224303" : 100,  "GRD462196810495" : 100,  "GRD566118256889" : 100,  "GRD610625351711" : 100,  "GRD431782027620" : 100,  "GRD517539696176" : 100,
"GRD864977047560" : 100,  "GRD885473151333" : 100,  "GRD738120149444" : 100,  "GRD279218452022" : 100,  "GRD422444521237" : 100,  "GRD712216707440" : 100,  "GRD876825603197" : 100,  "GRD149378295481" : 100,  "GRD852801374548" : 100,
"GRD406656806850" : 100,  "GRD461133671096" : 100,  "GRD569585729069" : 100,  "GRD195324411845" : 100,  "GRD707143606817" : 100,  "GRD213084798879" : 100,  "GRD689260175734" : 100,  "GRD908658151464" : 100,  "GRD943969260761" : 100,
"GRD219898021192" : 100,  "GRD409043723962" : 100,  "GRD828020356075" : 100,  "GRD895559924241" : 100,  "GRD418777049159" : 100,  "GRD203598384342" : 100,  "GRD692545042428" : 100,  "GRD613742076256" : 100,  "GRD325741948971" : 100,
"GRD456964718010" : 100,  "GRD916291480176" : 100,  "GRD191172876196" : 100,  "GRD350520159822" : 100,  "GRD915361686023" : 100,  "GRD320667527960" : 100,  "GRD535432984392" : 100,  "GRD235200201035" : 100,  "GRD322042197806" : 100,


// Code 200
"GRD818201647831" : 200,  "GRD898883673714" : 200,  "GRD671568215272" : 200,  "GRD272548150303" : 200,  "GRD778316031685" : 200,  "GRD633155878717" : 200,  "GRD232852506314" : 200,  "GRD804330778094" : 200,  "GRD256703831215" : 200,
"GRD585351851292" : 200,  "GRD295070075943" : 200,  "GRD821050127713" : 200,  "GRD132626031294" : 200,  "GRD303308033287" : 200,  "GRD648869459071" : 200,  "GRD378615865051" : 200,  "GRD198028559908" : 200,  "GRD520104076505" : 200,
"GRD580150351345" : 200,  "GRD684137809356" : 200,  "GRD335510343979" : 200,  "GRD168496772985" : 200,  "GRD461386062374" : 200,  "GRD134310609512" : 200,  "GRD191299479596" : 200,  "GRD593954899854" : 200,  "GRD638029042829" : 200,
"GRD262115053710" : 200,  "GRD291966448599" : 200,  "GRD939360360514" : 200,  "GRD846856997999" : 200,  "GRD986020481035" : 200,  "GRD440958191772" : 200,  "GRD800194711345" : 200,  "GRD864690562532" : 200,  "GRD537903702503" : 200,
"GRD500719547077" : 200,  "GRD769322482310" : 200,  "GRD333572954964" : 200,  "GRD740942816539" : 200,  "GRD342364936315" : 200,  "GRD897271974294" : 200,  "GRD524612615293" : 200,  "GRD889150118769" : 200,  "GRD591147754279" : 200,
"GRD408354476171" : 200,  "GRD360917932873" : 200,  "GRD949014950315" : 200,  "GRD485883927737" : 200,  "GRD780711040980" : 200,  "GRD766905590424" : 200,  "GRD279970598139" : 200,  "GRD892972695321" : 200,  "GRD384882292151" : 200,
"GRD510473538341" : 200,  "GRD573566209935" : 200,  "GRD586141675274" : 200,  "GRD473241307018" : 200,  "GRD257852080040" : 200,  "GRD803406755248" : 200,  "GRD273501507374" : 200,  "GRD260432220042" : 200,  "GRD105207427084" : 200,
"GRD666144989699" : 200,  "GRD184879215431" : 200,  "GRD398830337225" : 200,  "GRD660488430633" : 200,  "GRD660480601453" : 200,  "GRD310184660649" : 200,  "GRD595828671733" : 200,  "GRD591333497152" : 200,  "GRD703604995048" : 200,
"GRD419421204240" : 200,  "GRD484396738041" : 200,  "GRD771301984350" : 200,  "GRD716924805014" : 200,  "GRD617203618459" : 200,  "GRD781662437004" : 200,  "GRD917759652731" : 200,  "GRD643040549492" : 200,  "GRD395553036465" : 200,
"GRD381031995163" : 200,  "GRD749398592814" : 200,  "GRD240728904861" : 200,  "GRD356419561442" : 200,  "GRD907220508567" : 200,  "GRD930237326156" : 200,  "GRD897382531218" : 200,  "GRD975873244013" : 200,  "GRD967741561322" : 200,
"GRD789746827835" : 200,  "GRD706478548259" : 200,  "GRD611756488898" : 200,  "GRD827651824463" : 200,  "GRD982730410674" : 200,  "GRD835337381604" : 200,  "GRD600795493971" : 200,  "GRD155583747108" : 200,  "GRD474073735486" : 200,


 // Code 500
"GRD597702201895" : 500,  "GRD829159950826" : 500,  "GRD836805930865" : 500,  "GRD472923698538" : 500,  "GRD780870601165" : 500,  "GRD613000550625" : 500,  "GRD143565612419" : 500,  "GRD314163081650" : 500,  "GRD942536705934" : 500,
"GRD860241807371" : 500,  "GRD948820582149" : 500,  "GRD118889833350" : 500,  "GRD635724174930" : 500,  "GRD558566336368" : 500,  "GRD459199148952" : 500,  "GRD115028936857" : 500,  "GRD293153750470" : 500,  "GRD398830216949" : 500,
"GRD560894931935" : 500,  "GRD730100762273" : 500,  "GRD416257638482" : 500,  "GRD470301591014" : 500,  "GRD822347608801" : 500,  "GRD518085321926" : 500,  "GRD354850762651" : 500,  "GRD852883212205" : 500,  "GRD447979518183" : 500,
"GRD810505220103" : 500,  "GRD899898430046" : 500,  "GRD784891579615" : 500,  "GRD341584142403" : 500,  "GRD635068496790" : 500,  "GRD225164671781" : 500,  "GRD963263003113" : 500,  "GRD476561134505" : 500,  "GRD613931135223" : 500,
"GRD612096088770" : 500,  "GRD806687108012" : 500,  "GRD740661542309" : 500,  "GRD951109657615" : 500,  "GRD627979799343" : 500,  "GRD103585290217" : 500,  "GRD477787137715" : 500,  "GRD856214563767" : 500,  "GRD914770603035" : 500,
"GRD567117894682" : 500,  "GRD802262741290" : 500,  "GRD802618261835" : 500,  "GRD693218540834" : 500,  "GRD872645778472" : 500,  "GRD909912207147" : 500,  "GRD805800304788" : 500,  "GRD937341365263" : 500,  "GRD442349080180" : 500,
"GRD934226038555" : 500,  "GRD369753659323" : 500,  "GRD867233571168" : 500,  "GRD268346449182" : 500,  "GRD856809723597" : 500,  "GRD976435649470" : 500,  "GRD196152662133" : 500,  "GRD480236903246" : 500,  "GRD471290075886" : 500,
"GRD105861044640" : 500,  "GRD388575543154" : 500,  "GRD651828962777" : 500,  "GRD744880735143" : 500,  "GRD795278514532" : 500,  "GRD750083315598" : 500,  "GRD424392959016" : 500,  "GRD974689355237" : 500,  "GRD624509242496" : 500,
"GRD484686459522" : 500,  "GRD549628914773" : 500,  "GRD906477891723" : 500,  "GRD273896906652" : 500,  "GRD582224110003" : 500,  "GRD875436230725" : 500,  "GRD765219091634" : 500,  "GRD402370341891" : 500,  "GRD847118953889" : 500,
"GRD504451743254" : 500,  "GRD190687445567" : 500,  "GRD647868288983" : 500,  "GRD721487210885" : 500,  "GRD353651447667" : 500,  "GRD215565370579" : 500,  "GRD859991911888" : 500,  "GRD321100015559" : 500,  "GRD856345441116" : 500,
"GRD212511500007" : 500,  "GRD592790416757" : 500,  "GRD293867351092" : 500,  "GRD435316219345" : 500,  "GRD705720391482" : 500,  "GRD621375024208" : 500,  "GRD214376291617" : 500,  "GRD524294999226" : 500,  "GRD207383790300" : 500,


 // Code 1.000 
 "GRD657001248377" : 1000,"GRD936174258832" : 1000,"GRD764674350410" : 1000,"GRD899977994764" : 1000,"GRD990808515532" : 1000,"GRD942215025311" : 1000,"GRD230159811256" : 1000,"GRD395285988439" : 1000,"GRD860052091328" : 1000, 
 "GRD883045607705" : 1000,"GRD611475074123" : 1000,"GRD720210969039" : 1000,"GRD639252131257" : 1000,"GRD875873455563" : 1000,"GRD651946988354" : 1000,"GRD199223489745" : 1000,"GRD850679453400" : 1000,"GRD321631668891" : 1000, 
 "GRD456656685997" : 1000,"GRD604968327126" : 1000,"GRD630767546737" : 1000,"GRD941841143632" : 1000,"GRD333826797584" : 1000,"GRD502808867081" : 1000,"GRD809512592098" : 1000,"GRD706773874209" : 1000,"GRD414172012273" : 1000,
 "GRD775867586650" : 1000,"GRD645679894855" : 1000,"GRD818933747229" : 1000,"GRD248205933044" : 1000,"GRD467380765803" : 1000,"GRD986545652997" : 1000,"GRD593683022310" : 1000,"GRD584919393683" : 1000,"GRD298651524160" : 1000,
 "GRD603657638189" : 1000,"GRD232284057886" : 1000,"GRD717697103547" : 1000,"GRD405062962664" : 1000,"GRD350851474022" : 1000,"GRD634518928956" : 1000,"GRD684514969354" : 1000,"GRD762609460183" : 1000,"GRD693158661660" : 1000,
 "GRD426800685832" : 1000,"GRD870820057591" : 1000,"GRD911806750130" : 1000,"GRD952367888569" : 1000,"GRD794374776459" : 1000,"GRD105415273092" : 1000,"GRD338986129378" : 1000,"GRD234065523369" : 1000,"GRD668095659843" : 1000,
 "GRD962040963562" : 1000,"GRD267558261396" : 1000,"GRD523850793874" : 1000,"GRD728073630730" : 1000,"GRD681517272155" : 1000,"GRD165870032407" : 1000,"GRD678182297751" : 1000,"GRD509564201209" : 1000,"GRD997554885414" : 1000,
 "GRD262703276935" : 1000,"GRD292326416126" : 1000,"GRD250815123998" : 1000,"GRD690730273182" : 1000,"GRD948804865850" : 1000,"GRD747707857380" : 1000,"GRD509341007982" : 1000,"GRD534254974897" : 1000,"GRD129916990266" : 1000,
 "GRD765035502552" : 1000,"GRD251274285375" : 1000,"GRD785068952565" : 1000,"GRD223399348942" : 1000,"GRD499504551720" : 1000,"GRD233099085499" : 1000,"GRD420137852416" : 1000,"GRD659170882133" : 1000,"GRD314677718287" : 1000, 
 "GRD507919643129" : 1000,"GRD591185381132" : 1000,"GRD150383719691" : 1000,"GRD502458376271" : 1000,"GRD572872390857" : 1000,"GRD603530558402" : 1000,"GRD634117026918" : 1000,"GRD717963551173" : 1000,"GRD470255040531" : 1000, 
 "GRD798039334026" : 1000,"GRD391205049668" : 1000,"GRD816663720688" : 1000,"GRD580325683159" : 1000,"GRD356446639343" : 1000,"GRD644299747381" : 1000,"GRD740483832271" : 1000,"GRD909618081591" : 1000,"GRD631872331339" : 1000,  
 
// Code 5.000
"GRD1938475610294" : 5000, "GRD8392017465930" : 5000, "GRD6573829103847" : 5000, "GRD1203948572301" : 5000, "GRD9485761203847" : 5000, "GRD3049587612390" : 5000, "GRD7582937465810" : 5000, "GRD6283746571029" : 5000, "GRD3847561203948" : 5000,
"GRD9384756102039" : 5000, "GRD8475610293847" : 5000, "GRD4857612039485" : 5000, "GRD1029384756102" : 5000, "GRD2938475610293" : 5000, "GRD3847561029384" : 5000, "GRD1203948576102" : 5000, "GRD6571029384756" : 5000, "GRD3948576102938" : 5000,
"GRD2039485761023" : 5000, "GRD8475612039485" : 5000, "GRD1029384756120" : 5000, "GRD9384756120394" : 5000, "GRD5761029384756" : 5000, "GRD3847561203948" : 5000, "GRD9384756102039" : 5000, "GRD1029384756102" : 5000, "GRD3847561029384" : 5000,
"GRD9384756120394" : 5000, "GRD4857612039485" : 5000, "GRD1029384756102" : 5000, "GRD2938475610293" : 5000, "GRD3948576102938" : 5000, "GRD1203948576102" : 5000, "GRD8475610293847" : 5000, "GRD2039485761023" : 5000, "GRD6571029384756" : 5000,
"GRD5761029384756" : 5000, "GRD8475612039485" : 5000, "GRD3847561203948" : 5000, "GRD9384756102039" : 5000, "GRD1029384756102" : 5000, "GRD4857612039485" : 5000, "GRD3948576102938" : 5000, "GRD8475610293847" : 5000, "GRD2039485761023" : 5000,
"GRD2938475610293" : 5000, "GRD5761029384756" : 5000, "GRD3847561203948" : 5000, "GRD8475612039485" : 5000, "GRD9384756120394" : 5000, "GRD1203948576102" : 5000, "GRD1029384756102" : 5000, "GRD3948576102938" : 5000, "GRD6571029384756" : 5000,
"GRD2039485761023" : 5000, "GRD8475610293847" : 5000, "GRD4857612039485" : 5000, "GRD9384756102039" : 5000, "GRD1029384756102" : 5000, "GRD2938475610293" : 5000, "GRD5761029384756" : 5000, "GRD8475612039485" : 5000, "GRD3847561029384" : 5000,
"GRD3948576102938" : 5000, "GRD1203948576102" : 5000, "GRD4857612039485" : 5000, "GRD2039485761023" : 5000, "GRD6571029384756" : 5000, "GRD9384756120394" : 5000, "GRD1029384756102" : 5000, "GRD8475610293847" : 5000, "GRD3847561203948" : 5000,
"GRD5761029384756" : 5000, "GRD2938475610293" : 5000, "GRD9384756102039" : 5000, "GRD1029384756102" : 5000, "GRD3948576102938" : 5000, "GRD8475612039485" : 5000, "GRD2039485761023" : 5000, "GRD4857612039485" : 5000, "GRD3847561029384" : 5000,
"GRD8475610293847" : 5000, "GRD1029384756102" : 5000, "GRD1203948576102" : 5000, "GRD9384756120394" : 5000, "GRD2938475610293" : 5000, "GRD6571029384756" : 5000, "GRD3948576102938" : 5000, "GRD5761029384756" : 5000, "GRD3847561203948" : 5000,
"GRD4857612039485" : 5000, "GRD9384756102039" : 5000, "GRD8475612039485" : 5000, "GRD2039485761023" : 5000, "GRD1029384756102" : 5000, "GRD3847561029384" : 5000, "GRD8475610293847" : 5000, "GRD1203948576102" : 5000, "GRD6571029384756" : 5000,

 // Code 10.000
"GRD1923846572039" : 10000, "GRD3847561029384" : 10000, "GRD9574839201847" : 10000, "GRD2398475610283" : 10000, "GRD3847562103948" : 10000, "GRD6572840392847" : 10000, "GRD9482039485762" : 10000, "GRD2039485762839" : 10000, "GRD8475612938475" : 10000,
"GRD3948571029384" : 10000, "GRD9482039475610" : 10000, "GRD6571203948571" : 10000, "GRD2039485610293" : 10000, "GRD1029384762389" : 10000, "GRD3847561093847" : 10000, "GRD7384029485732" : 10000, "GRD6572039485762" : 10000, "GRD9283745610201" : 10000,
"GRD3847561029384" : 10000, "GRD5738291049573" : 10000, "GRD2948571203948" : 10000, "GRD7483928475610" : 10000, "GRD1923846572039" : 10000, "GRD3847562103948" : 10000, "GRD6572039485762" : 10000, "GRD2389475610293" : 10000, "GRD3847561029384" : 10000,
"GRD9482039485762" : 10000, "GRD6571203948571" : 10000, "GRD3847561029384" : 10000, "GRD7483928475610" : 10000, "GRD2938475610283" : 10000, "GRD3948571203948" : 10000, "GRD6572840392847" : 10000, "GRD3847562103948" : 10000, "GRD2039485610293" : 10000,
"GRD3847561093847" : 10000, "GRD5738291049573" : 10000, "GRD2398475610283" : 10000, "GRD9482039485762" : 10000, "GRD6572039485762" : 10000, "GRD2398475610283" : 10000, "GRD1923846572039" : 10000, "GRD3847561029384" : 10000, "GRD3847562103948" : 10000,
"GRD9482039485762" : 10000, "GRD6572840392847" : 10000, "GRD3948571203948" : 10000, "GRD2039485762839" : 10000, "GRD3847561029384" : 10000, "GRD6571203948571" : 10000, "GRD1029384762389" : 10000, "GRD3847561093847" : 10000, "GRD2039485610293" : 10000,
"GRD9482039485762" : 10000, "GRD7384029485732" : 10000, "GRD6572039485762" : 10000, "GRD1923846572039" : 10000, "GRD3847562103948" : 10000, "GRD6572840392847" : 10000, "GRD9482039485762" : 10000, "GRD2039485610293" : 10000, "GRD3847561093847" : 10000,
"GRD3847561029384" : 10000, "GRD6571203948571" : 10000, "GRD7392019485762" : 10000, "GRD3847562103948" : 10000, "GRD2398475610283" : 10000, "GRD9482039485762" : 10000, "GRD6572039485762" : 10000, "GRD3948571203948" : 10000, "GRD2039485762839" : 10000,
"GRD1029384762389" : 10000, "GRD3847561093847" : 10000, "GRD5738291049573" : 10000, "GRD6572039485762" : 10000, "GRD3847561029384" : 10000, "GRD9482039485762" : 10000, "GRD6571203948571" : 10000, "GRD2039485610293" : 10000, "GRD3847562103948" : 10000,
"GRD6572840392847" : 10000, "GRD3847561093847" : 10000, "GRD2398475610283" : 10000, "GRD3847562103948" : 10000, "GRD6572039485762" : 10000, "GRD3948571203948" : 10000, "GRD2389475610293" : 10000, "GRD3847561029384" : 10000, "GRD6571203948571" : 10000,

//Code 20.000
"GRD4839203848571" : 20000, "GRD7392013847561" : 20000, "GRD3847561029384" : 20000, "GRD6572039485762" : 20000, "GRD9482039475610" : 20000, "GRD2938475610283" : 20000, "GRD3847562103948" : 20000, "GRD6571203948571" : 20000, "GRD7483928475610" : 20000,
"GRD2938475610283" : 20000, "GRD6572039485762" : 20000, "GRD3847561029384" : 20000, "GRD9482039485762" : 20000, "GRD3847562103948" : 20000, "GRD6571203948571" : 20000, "GRD7392013847561" : 20000, "GRD9482039475610" : 20000, "GRD3847561029384" : 20000,
"GRD6572039485762" : 20000, "GRD3847562103948" : 20000, "GRD7392013847561" : 20000, "GRD3847561029384" : 20000, "GRD6571203948571" : 20000, "GRD2938475610283" : 20000, "GRD9482039475610" : 20000, "GRD7392013847561" : 20000, "GRD3847562103948" : 20000,
"GRD6572039485762" : 20000, "GRD9482039485762" : 20000, "GRD3847561029384" : 20000, "GRD6571203948571" : 20000, "GRD3847562103948" : 20000, "GRD7392013847561" : 20000, "GRD2938475610283" : 20000, "GRD3847562103948" : 20000, "GRD6572039485762" : 20000,
"GRD7392013847561" : 20000, "GRD3847561029384" : 20000, "GRD6571203948571" : 20000, "GRD9482039485762" : 20000, "GRD2938475610283" : 20000, "GRD3847562103948" : 20000, "GRD6572039485762" : 20000, "GRD3847561029384" : 20000, "GRD7392013847561" : 20000,
"GRD3847561029384" : 20000, "GRD6572039485762" : 20000, "GRD9482039485762" : 20000, "GRD6571203948571" : 20000, "GRD3847562103948" : 20000, "GRD7392013847561" : 20000, "GRD2938475610283" : 20000, "GRD6572039485762" : 20000, "GRD3847562103948" : 20000,
"GRD7392013847561" : 20000, "GRD3847561029384" : 20000, "GRD6571203948571" : 20000, "GRD9482039485762" : 20000, "GRD3847562103948" : 20000, "GRD6572039485762" : 20000, "GRD7392013847561" : 20000, "GRD2938475610283" : 20000, "GRD3847562103948" : 20000,
"GRD6572039485762" : 20000, "GRD3847561029384" : 20000, "GRD6571203948571" : 20000, "GRD9482039485762" : 20000, "GRD2938475610283" : 20000, "GRD3847562103948" : 20000, "GRD6572039485762" : 20000, "GRD3847561029384" : 20000, "GRD7392013847561" : 20000,

};

// Lấy danh sách code đã sử dụng từ localStorage
  let usedCodes = JSON.parse(localStorage.getItem("usedCodes")) || [];

  document.getElementById("verifyDepositCodeBtn").onclick = () => {
  const codeInput = document.getElementById("depositUserCode").value.trim();
  const statusEl = document.getElementById("depositStatus");

  if (!codeInput) {
    statusEl.textContent = "⚠️ Vui lòng nhập code!";
    statusEl.style.color = "red";
    return;
  }

  // Kiểm tra code đã dùng chưa
  if (usedCodes.includes(codeInput)) {
  statusEl.textContent = "❌ Mã code này đã được sử dụng.";
  statusEl.style.color = "red";
  return;
  }

  if (codeRewards[codeInput]) {
    const reward = codeRewards[codeInput];
    balance += reward;
    localStorage.setItem("balance", balance);
    updateBalance();

    statusEl.textContent = `✅ Đổi code thành công. +${reward} xu vào tài khoản.`;
    statusEl.style.color = "lightgreen";

 // Lưu lại code đã dùng
    usedCodes.push(codeInput);
    localStorage.setItem("usedCodes", JSON.stringify(usedCodes));

    document.getElementById("notification").textContent = `🎉 Nạp thành công +${reward} xu qua code ${codeInput}!`;

    setTimeout(() => {
    document.getElementById("notification").textContent = "";
    }, 10000);

    delete codeRewards[codeInput];
    localStorage.setItem("validCodes", JSON.stringify(validCodes));
  } else {
    statusEl.textContent = "❌ Code không hợp lệ!";
    statusEl.style.color = "red";
  }
};

let validCodes = JSON.parse(localStorage.getItem("validCodes")) || {};

// Hàm tạo code ngẫu nhiên
  function generateRandomCode(length = 8) {
  const chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
  let code = "";
  for (let i = 0; i < length; i++) {
  code += chars.charAt(Math.floor(Math.random() * chars.length));
  }
  return code;
}


// Lấy lịch sử đổi code từ localStorage
  let codeHistory = JSON.parse(localStorage.getItem("codeHistory")) || [];

// Hàm hiển thị lịch sử code
  function renderCodeHistory() {
  const listEl = document.getElementById("codeHistoryList");
  if (!listEl) return;

  if (codeHistory.length === 0) {
  listEl.innerHTML = "<p>⚠️ Chưa có code nào được tạo.</p>";
  return;
  }

   listEl.innerHTML = "";
  codeHistory.slice().reverse().forEach((entry, index) => {
  listEl.innerHTML += `
  <div style="margin-bottom:8px; border-bottom:1px solid #444; padding-bottom:5px; display:flex; justify-content:space-between; align-items:center;">
  <div>
  ⏰ ${entry.time}<br>
  🔑 <b>${entry.code}</b> | 💰 ${entry.amount} xu
  </div>
  <button class="copyBtn" data-code="${entry.code}" 
  style="padding:4px 8px; background:gold; color:#000; border:none; border-radius:6px; font-size:0.8em; cursor:pointer;">
  📋 Copy
  </button>
  </div>
  `;
  });
// Gắn sự kiện copy cho tất cả nút
  document.querySelectorAll(".copyBtn").forEach(btn => {
  btn.onclick = () => {
  const code = btn.getAttribute("data-code");
  navigator.clipboard.writeText(code).then(() => {
  btn.textContent = "✅ Copied";
  setTimeout(() => (btn.textContent = "📋 Copy"), 10000);
  });
  };
  });
}

let pendingAmount = 0; // số xu chuẩn bị đổi

// Xử lý chuyển xu thành code
  document.getElementById("convertToCodeBtn").onclick = () => {
  const amount = parseInt(document.getElementById("convertAmount").value);
  const statusEl = document.getElementById("generatedCode");

  if (!amount || amount <= 0) {
  statusEl.textContent = "⚠️ Nhập số xu hợp lệ.";
  statusEl.style.color = "red";
  return;
  }
  if (amount > balance) {
  statusEl.textContent = "❌ Số dư không đủ.";
  statusEl.style.color = "red";
  return;
  }

 // Lưu tạm số xu cần đổi
  pendingAmount = amount;


 // Hiển thị modal xác nhận (có hiệu ứng)
  document.getElementById("confirmMessage").textContent = 
  `Bạn có chắc chắn muốn đổi ${amount} xu thành code không?`;
  const modal = document.getElementById("confirmConvertModal");
  modal.style.display = "flex"; // bật flex trước
  setTimeout(() => modal.classList.add("show"), 10); // thêm class để chạy animation


// Nếu bấm "Huỷ"
  document.getElementById("confirmNo").onclick = () => {
  const modal = document.getElementById("confirmConvertModal");
  modal.classList.remove("show");
  setTimeout(() => { modal.style.display = "none"; }, 300);
  pendingAmount = 0;
};

// Nếu bấm "Đồng ý"
  document.getElementById("confirmYes").onclick = () => {
  if (pendingAmount > 0) {
  createCode(pendingAmount);
  }
  const modal = document.getElementById("confirmConvertModal");
  modal.classList.remove("show");
  setTimeout(() => { modal.style.display = "none"; }, 300);
  pendingAmount = 0;
};


function createCode(amount) {
  const statusEl = document.getElementById("generatedCode");

  // Trừ xu
  balance -= amount;
  updateBalance();

  // Sinh mã code
  const newCode = generateRandomCode(10);
  codeRewards[newCode] = amount;

  // Lưu vào localStorage
  localStorage.setItem("codeRewards", JSON.stringify(validCodes));

  // Hiển thị cho người dùng copy
  statusEl.textContent = `✅ Code đã được chuyển vào lịch sử!`;
  statusEl.style.color = "lime";

 // Lưu lịch sử
  const entry = {
  code: newCode,
  amount: amount,
  time: new Date().toLocaleString()
  };
  codeHistory.push(entry);
  localStorage.setItem("codeHistory", JSON.stringify(codeHistory));

  // Cập nhật giao diện lịch sử
  renderCodeHistory();
};
}

// Mở modal lịch sử
  document.getElementById("openHistoryModal").onclick = () => {
  document.getElementById("historyModal").style.display = "flex";
  renderCodeHistory();
};

// Đóng modal
  document.getElementById("closeHistoryModal").onclick = () => {
  document.getElementById("historyModal").style.display = "none";
};





// Ẩn game trước khi login
  document.querySelector(".game-container").style.display = "none";

// Chuyển form
  function showRegister() {
  document.getElementById("loginForm").style.display = "none";
  document.getElementById("registerForm").style.display = "block";
}
function showLogin() {
  document.getElementById("registerForm").style.display = "none";
  document.getElementById("loginForm").style.display = "block";
}



  document.addEventListener("DOMContentLoaded", function() {
  let users = JSON.parse(localStorage.getItem("users")) || {};
  // Nếu chưa có tài khoản admin thì tạo sẵn
  if (!users["Greedy"]) {
  users["GreedyKing"] = {
  username: "GreedyKing",
  password: "123456@",   // mật khẩu mặc định
  balance: 0            // số dư ban đầu
  };
  localStorage.setItem("users", JSON.stringify(users));
  }
});



// Đăng nhập
  function handleLogin() {
  const user = document.getElementById("loginUser").value.trim();
  const pass = document.getElementById("loginPass").value.trim();
  const msgEl = document.getElementById("loginMsg");

  let users = JSON.parse(localStorage.getItem("users")) || {};

  if (users[user] && users[user] === pass) {
  const overlay = document.getElementById("loginOverlay");   // đã có trong file
  const game    = document.querySelector(".game-container"); // đã có trong file


  // 1) Fade-out login
  overlay.classList.add("fade-out");

 // 2) Sau 800ms: ẩn overlay, show game + fade-in
  setTimeout(()=>{
    overlay.style.display = "none";
    if(game){
      game.style.display = "flex";
      game.classList.add("fade-in");
      setTimeout(()=> game.classList.add("show"), 20);
    }

    // 3) Hiệu ứng chuyển cảnh: quét + mưa xu
    runScreenSweep();
    startCoinRain(1400);

  }, 800);

  localStorage.setItem("loggedIn", "true");
  localStorage.setItem("currentUser", user);

  document.querySelector(".game-container").style.display = "flex";
  msgEl.textContent = "";
  } else {
  msgEl.textContent = "❌ Sai tài khoản hoặc mật khẩu!";
  }
}


// Đăng ký
  function handleRegister() {
  const user = document.getElementById("regUser").value.trim();
  const pass = document.getElementById("regPass").value.trim();
  const pass2 = document.getElementById("regPass2").value.trim();
  const keycode = document.getElementById("regKeycode").value.trim();
  const msgEl = document.getElementById("registerMsg");

  if (user === "" || pass === "" || pass2 === "" || keycode === "") {
    msgEl.style.color = "red";
    msgEl.textContent = "⚠️ Vui lòng nhập đầy đủ thông tin!";
    return;
  }

  if (user.length < 8) {
    msgEl.style.color = "red";
    msgEl.textContent = "⚠️ Tài khoản phải từ 8 ký tự trở lên!";
    return;
  }

  if (pass.length < 6) {
    msgEl.style.color = "red";
    msgEl.textContent = "⚠️ Mật khẩu phải từ 6 ký tự trở lên!";
    return;
  }

  if (pass !== pass2) {
    msgEl.style.color = "red";
    msgEl.textContent = "❌ Mật khẩu xác nhận không khớp!";
    return;
  }

  if (!VALID_KEYCODES.includes(keycode)) {
    msgEl.textContent = "❌ Keycode không hợp lệ!";
    return;
  }


  let users = JSON.parse(localStorage.getItem("users")) || {};
  if (users[user]) {
    msgEl.style.color = "red";
    msgEl.textContent = "⚠️ Tài khoản đã tồn tại!";
    return;
  }

// Tạo ID random cho user
  let userId = "U" + Math.floor(100000 + Math.random() * 900000);

  users[user] = {
  id: userId,
  user: user,
  pass: pass,
  balance: 0
  };

  // Lưu tài khoản mới
  users[user] = pass;
  localStorage.setItem("users", JSON.stringify(users));

  // Thông báo thành công
  msgEl.style.color = "lime";
  msgEl.textContent = "✅ Đăng ký thành công!";

  // Sau 1.5 giây tự động quay về form login
  setTimeout(() => {
    showLogin();
    document.getElementById("loginUser").value = user; // điền sẵn username
    document.getElementById("loginPass").focus();
  }, 1500);
}

// Đăng xuất
  document.getElementById("logoutBtn").addEventListener("click", () => {
  // Xóa trạng thái đăng nhập hiện tại thôi
  localStorage.removeItem("currentUser");
  document.querySelector(".game-container").style.display = "none";
  document.getElementById("loginOverlay").style.display = "flex";
  showLogin(); // trở về form login
});

// Giữ trạng thái đăng nhập khi load lại
  window.addEventListener("load", () => {
  writeJackpot(readJackpot());
  if (localStorage.getItem("loggedIn") === "true") {
  document.getElementById("loginOverlay").style.display = "none";
  document.querySelector(".game-container").style.display = "flex";
  }
});


// Hàm hiển thị thông tin user
  function setUserInfo(name, id, avatarUrl) {
  document.getElementById("userNameDisplay").textContent = name;
  document.getElementById("userIdDisplay").textContent = id;
  document.querySelector(".user-avatar").src = avatarUrl;
  document.getElementById("userInfo").style.display = "flex";
}

// Tự động load lại khi F5
  window.addEventListener("load", () => {
  if (localStorage.getItem("userName")) {
  setUserInfo(
  localStorage.getItem("userName"),
  localStorage.getItem("userId"),
  localStorage.getItem("userAvatar")
  );
  }
});


//Đổi tên
(() => {
  const modal = document.getElementById("changeNameModal");
  const input = document.getElementById("newNameInput");
  const saveBtn = document.getElementById("saveNameBtn");
  const cancelBtn = document.getElementById("cancelNameBtn");
  const counter = document.getElementById("nameCounter");
  const err = document.getElementById("nameError");
  const avatarImg = document.querySelector(".rename-avatar");

  const nameDisplay = document.getElementById("userNameDisplay"); // nơi hiển thị tên hiện tại
  const openBtn = document.getElementById("changeNameBtn");       // nút mở modal

  // regex: cho phép chữ (kể cả có dấu), số, khoảng trắng; tối thiểu 2 ký tự sau khi trim
  const NAME_OK = (s) => {
  const t = s.trim();
  if (t.length < 2 || t.length > 20) return false;
  // không cho toàn khoảng trắng; cho unicode letter/number/space
  return /^[\p{L}\p{N} ]+$/u.test(t);
  };

  function openModal() {
    // gợi ý avatar hiện tại nếu có
    try {
    const current = (localStorage.getItem("userName") || nameDisplay?.textContent || "").trim();
    input.value = current;
    counter.textContent = `${input.value.length}/20`;
    avatarImg && (avatarImg.src = (localStorage.getItem("userAvatar") || `https://i.pravatar.cc/80?u=${encodeURIComponent(current)}`));
    } catch {}
    err.style.display = "none";
    input.classList.remove("input-error");

    modal.style.display = "flex";
    requestAnimationFrame(() => modal.classList.add("show"));
    setTimeout(() => input.focus(), 50);
  }

  function closeModal() {
    modal.classList.remove("show");
    setTimeout(() => { modal.style.display = "none"; }, 200);
  }

  // mở từ nút "Đổi tên"
  if (openBtn) {
    openBtn.addEventListener("click", (e) => {
    e.preventDefault();
    openModal();
    });
  }

  // cập nhật counter + preview avatar theo tên gõ vào
  input.addEventListener("input", () => {
  counter.textContent = `${input.value.length}/20`;
  if (avatarImg) avatarImg.src = `https://i.pravatar.cc/80?u=${encodeURIComponent(input.value.trim() || "preview")}`;
  if (NAME_OK(input.value)) {
  err.style.display = "none";
  input.classList.remove("input-error");
  }
  });

  // Lưu
  saveBtn.addEventListener("click", () => {
  const newName = input.value;
  if (!NAME_OK(newName)) {
  err.textContent = "⚠️ Tên phải 2–20 ký tự (chữ/số/khoảng trắng).";
  err.style.display = "block";
  input.classList.add("input-error");
  input.focus();
  return;
  }

  const finalName = newName.trim().replace(/\s+/g, " "); // gom khoảng trắng đôi

  // --- xử lý ID ---
  let userId = localStorage.getItem("userId");
  if (!userId) {
  userId = "GRD" + Math.floor(10000000 + Math.random() * 900000);
  localStorage.setItem("userId", userId);
  }

  // --- xử lý avatar ---
  const newAvatar = `https://i.pravatar.cc/80?u=${encodeURIComponent(finalName)}`;

  // --- lưu vào localStorage ---
  localStorage.setItem("userName", finalName);
  localStorage.setItem("userAvatar", newAvatar);

  // --- cập nhật UI ---
  const nameEl = document.getElementById("userNameDisplay");
  if (nameEl) nameEl.textContent = finalName;

  const idEl = document.getElementById("userIdDisplay");
  if (idEl) idEl.textContent = userId;

  const avatarEl = document.querySelector(".user-avatar");
  if (avatarEl) avatarEl.src = newAvatar;

  closeModal();

  // thông báo
  const note = document.getElementById("notification");
  if (note) {
    note.textContent = `✅ Đã đổi tên thành “${finalName}”`;
    setTimeout(() => (note.textContent = ""), 3000);
  }
});


  // Hủy/đóng
  cancelBtn.addEventListener("click", closeModal);

  // đóng khi click ra ngoài
  modal.addEventListener("click", (e) => {
  if (e.target === modal) closeModal();
  });

  // ESC để đóng
  document.addEventListener("keydown", (e) => {
  if (e.key === "Escape" && modal.style.display === "flex") closeModal();
  });
})();

document.addEventListener("DOMContentLoaded", () => {
  // lấy dữ liệu từ localStorage
  let name = localStorage.getItem("userName");
  let userId = localStorage.getItem("userId");
  let avatar = localStorage.getItem("userAvatar");

  // nếu chưa có thì set mặc định
  if (!name) {
    name = "Người chơi";
    localStorage.setItem("userName", name);
  }
  if (!userId) {
    userId = "GRD" + Math.floor(10000000 + Math.random() * 900000);
    localStorage.setItem("userId", userId);
  }
  if (!avatar) {
    avatar = `https://i.pravatar.cc/80?u=${encodeURIComponent(userId)}`;
    localStorage.setItem("userAvatar", avatar);
  }

  // gán ra UI
  const nameEl = document.getElementById("userNameDisplay");
  if (nameEl) nameEl.textContent = name;

  const idEl = document.getElementById("userIdDisplay");
  if (idEl) idEl.textContent = userId;

  const avatarEl = document.querySelector(".user-avatar");
  if (avatarEl) avatarEl.src = avatar;
});


document.addEventListener("DOMContentLoaded", () => {
  const avatarEl = document.querySelector(".user-avatar");
  const fileInput = document.getElementById("avatarUpload");

  if (avatarEl && fileInput) {
  // Khi click avatar thì mở chọn file
  avatarEl.addEventListener("click", () => fileInput.click());

  // Khi chọn ảnh mới
  fileInput.addEventListener("change", (e) => {
  const file = e.target.files[0];
  if (!file) return;

  const reader = new FileReader();
  reader.onload = function(ev) {
  const newAvatar = ev.target.result; // base64 string

  // cập nhật UI
  avatarEl.src = newAvatar;
  // lưu vào localStorage
  localStorage.setItem("userAvatar", newAvatar);
  // thông báo
  const note = document.getElementById("notification");
  if (note) {
  note.textContent = "✅ Đã cập nhật avatar!";
  setTimeout(() => (note.textContent = ""), 3000);
  }
  };
  reader.readAsDataURL(file); // chuyển ảnh thành base64
  });
  }
});

//Xác nhận chuyển xu
  document.addEventListener("DOMContentLoaded", function() {
  const transferBtn = document.getElementById("transferCoinBtn");
  const confirmModal = document.getElementById("confirmTransferModal");
  const confirmMsg = document.getElementById("confirmTransferMessage");
  const yesBtn = document.getElementById("confirmTransferYes");
  const noBtn = document.getElementById("confirmTransferNo");

  // Nhấn "Xác nhận" ở form chuyển xu
  transferBtn.addEventListener("click", function() {
  let toId = document.getElementById("transferUserId").value.trim();
  let amount = parseInt(document.getElementById("transferAmount").value);

  if (!toId || isNaN(amount) || amount <= 0) {
  document.getElementById("transferStatus").innerText = "⚠️ Vui lòng nhập ID và số xu hợp lệ!";
  return;
  }
  // Hiển thị modal xác nhận
  confirmMsg.innerText = `Bạn có chắc chắn muốn chuyển ${amount} xu cho ID: ${toId}?`;
  confirmModal.style.display = "flex";

  // Nếu đồng ý
  yesBtn.onclick = function() {
  let users = JSON.parse(localStorage.getItem("users")) || {};
  let currentUser = localStorage.getItem("currentUser");



  let senderBalance = parseInt(users[currentUser].balance) || 0;
  let amount = parseInt(document.getElementById("transferAmount").value);
  let toId = document.getElementById("transferUserId").value.trim();


  if (!users[toId]) {
  document.getElementById("transferStatus").innerText = "❌ Người nhận không tồn tại!";
  confirmModal.style.display = "none";
  return;
  }

 // Kiểm tra số dư
  if (balance < amount) {
  document.getElementById("transferStatus").innerText = "❌ Không đủ xu!";
  confirmModal.style.display = "none";
  return;
  }


  

  // Trừ + cộng xu 
 balance -= amount;
 users[toId].balance = balance + amount;
 updateBalance();
 updateBalanceDisplay()
 localStorage.setItem("users", JSON.stringify(users));

  // Lưu lịch sử
  let history = JSON.parse(localStorage.getItem("transferHistory")) || [];
  history.push({
  from: currentUser,
  to: toId,
  amount: amount,
  time: new Date().toLocaleString()
  });
  localStorage.setItem("transferHistory", JSON.stringify(history));

  document.getElementById("balance").innerText = users[currentUser].balance;
  document.getElementById("transferStatus").innerText = `✅ Đã chuyển ${amount} xu cho ID: ${toId}`;


  // Reset input sau khi chuyển xong
  document.getElementById("transferUserId").value = "";
  document.getElementById("transferAmount").value = "";

  confirmModal.style.display = "none";
  };
  // Nếu huỷ
  noBtn.onclick = function() {
  confirmModal.style.display = "none";
  };
  });
});


//Lưu vào lịch sử chuyển xu
  document.addEventListener("DOMContentLoaded", function() {
  const transferHistoryModal = document.getElementById("transferHistoryModal");
  const transferHistoryList = document.getElementById("transferHistoryList");
  const openHistoryBtn = document.getElementById("openTransferHistoryBtn");
  const closeHistoryBtn = document.getElementById("closeTransferHistoryBtn");



function renderTransferHistory() {
const box = document.getElementById("transferHistoryList") || window.transferHistoryList;
if (!box) return;
const raw = JSON.parse(localStorage.getItem("transferHistory")) || [];

box.classList.add("txh");
if (!raw.length) {
  box.innerHTML = `<div class="txh-empty">🧾 Chưa có giao dịch nào</div>`;
  return;
  }

// Chuẩn hoá + sort mới nhất trước
  const data = raw.slice().map(x => ({...x, _ts: x.ts ?? Date.parse(x.time || 0)}))
                   .sort((a,b)=>(isNaN(b._ts)?0:b._ts)-(isNaN(a._ts)?0:a._ts));

  // Nhóm theo ngày
  const groups = {};
  for (const it of data) {
  const d = isNaN(it._ts) ? new Date() : new Date(it._ts);
  const key = [d.getFullYear(), d.getMonth()+1, d.getDate()].join("-");
  (groups[key] ||= []).push(it);
  }

  // Render
  const html = Object.keys(groups).sort((a,b)=> (a<b?1:-1)).map(key=>{
  const label = dayLabel(key);
  const list = groups[key].map(renderItem).join("");
  return `<div class="txh-day"><span class="txh-day__label">${label}</span></div>${list}`;
  }).join("");

  box.innerHTML = html;
}

function renderItem(h){
  const from = esc(h.from ?? "Ẩn");
  const to   = esc(h.to ?? "Ẩn");
  const amt  = fmt(+h.amount || 0);
  const time = h.time ? esc(h.time) : (!isNaN(h._ts) ? new Date(h._ts).toLocaleString("vi-VN") : "");
  const note = h.note ? ` <span>•</span><span class="txh-mini">“${esc(h.note)}”</span>` : "";

  // trạng thái (tuỳ chọn) + icon + dấu số
  const st = (h.status || "Thành công").toLowerCase();
  const icon = st==="in" ? "📥" : st==="failed" ? "⚠️" : "📤";
  const pill = st==="in" ? "in" : st==="failed" ? "failed" : "out";
  const sign = st==="in" ? "+" : st==="failed" ? "" : "−";

  const idSafe = (h.id || "").replace(/[^a-zA-Z0-9_-]/g,"");
  const idLine = h.id ? `<div class="txh-mini">Mã: <span id="tx-${idSafe}">${esc(h.id)}</span></div>` : "";

  const title = st==="in" ? `Nhận từ ${from}` : (st==="failed" ? `Giao dịch thất bại` : `Chuyển đến ${to}`);

  return `
  <div class="txh-card">
  <div class="txh-rail"></div>
  <div class="txh-ico">${icon}</div>

  <div>
    <div class="txh-title">${title}</div>
    <div class="txh-meta">
    <span class="txh-amt">${sign}${amt} 💎</span>
    ${time ? `<span>•</span><span>${time}</span>` : ""}
    ${note}
    </div>
    ${idLine}
  </div>

    <div class="txh-right">
    <span class="txh-pill ${pill}">${st.toUpperCase()}</span>
    ${h.id ? `<button class="txh-pill" style="cursor:pointer" onclick="copyTx('#tx-${idSafe}')">Copy mã</button>` : ""}
    </div>
  </div>`;
}


/* ===== Helpers ===== */
function fmt(n){ return (Math.round(n)||0).toLocaleString("vi-VN"); }
function esc(s){ return String(s||"").replace(/[&<>"']/g, m=>({ "&":"&amp;","<":"&lt;",">":"&gt;","\"":"&quot;","'":"&#39;" }[m])); }
function copyTx(sel){ const el=document.querySelector(sel); if(!el) return; navigator.clipboard.writeText(el.textContent.trim()); }

function dayLabel(ymd){
  const [Y,M,D] = ymd.split("-").map(Number);
  const d=new Date(Y,M-1,D), today=strip(new Date());
  const diff=Math.round((strip(d)-today)/(24*3600*1000));
  if(diff===0) return "Hôm nay";
  if(diff===-1) return "Hôm qua";
  return `${String(D).padStart(2,"0")}/${String(M).padStart(2,"0")}`;
}
function strip(t){return new Date(t.getFullYear(),t.getMonth(),t.getDate());}




// Mở modal lịch sử
  openHistoryBtn.addEventListener("click", function() {
  renderTransferHistory();
  transferHistoryModal.style.display = "flex";
  });

//Đóng modal lịch sử
  closeHistoryBtn.addEventListener("click", function() {
  transferHistoryModal.style.display = "none";
  });
});


Object.keys(users).forEach(uid => {
  users[uid].balance = Number(users[uid].balance) || 0;
});


let timeLeft = 30; // ví dụ 30s
const timerEl = document.getElementById("countdownTimer");

const countdown = setInterval(() => {
  if (timeLeft <= 0) {
    clearInterval(countdown);
    timerEl.textContent = "⏰ 00";
    timerEl.style.color = "red";
    timerEl.classList.add("blink");
  } else {
    timerEl.textContent = timeLeft < 10 ? "0" + timeLeft : timeLeft;
    timeLeft--;
  }
}, 1000);


</script>




<script>
/** ====== CẤU HÌNH PHEP NHÂN (đồng bộ với game hiện có) ====== **/
const MULTIPLIER = { "Chua":5, "Cải":5, "Ngô":5, "Rốt":5, "Mỳ":10, "Xiên":15, "Đùi":25, "Bò":45 };

/** ====== TÍNH PAYOUT TỪ CÁC CỬA ĐẶT ======
 * bets: object { "Chua": 100, "Mỳ": 0, ... }
 * selectedName: tên cửa trúng (VD: "Mỳ")
 * salad: boolean — nếu "nổ salad" (tất cả 4 cửa rau thắng)
 */
function computePayoutFromBets(bets, selectedName, salad=false) {
  let payout = 0;

  // 4 cửa "rau"
  const veg = ["Chua","Cải","Ngô","Rốt"];

  if (salad) {
    // Salad: 4 cửa rau đều thắng
    for (const k of veg) {
      const bet = Number(bets[k]||0);
      if (bet>0) payout += bet * (MULTIPLIER[k]||1);
    }
    return payout;
  }

  // Trúng thường: chỉ 1 cửa selectedName thắng
  const bet = Number(bets[selectedName]||0);
  if (bet>0) payout = bet * (MULTIPLIER[selectedName]||1);

  return payout;
}

(function () {
  const LS_KEY   = "topWinnersV1";
  const LIST_ID  = "topWinnersListModal";
  const MAX_ROWS = 3;

  const NAMES = ["Minh Tâm",".","Hana","Thảo Thảo","Anh Tũn","Bơ trộn salad","Diệu Diệu","Johnson","Tất tay bỏ bò","Tommy","Apex group","Hmh","My Anh","Giang bạch thủ","Long Ca","Ba Duy","Sơn Sói","Bia 6 lỗ","Lan Quế Phường","Mai Anh"];
  const pick = arr => arr[Math.floor(Math.random() * arr.length)];
  const fmt  = x => Number(x||0).toLocaleString("vi-VN");
  const roundNice = n => Math.max(Math.round(Number(n)/100)*100); // số tròn (bội 100)

  function loadBoard(){ try{ return JSON.parse(localStorage.getItem(LS_KEY)||"[]"); }catch{ return []; } }
  function saveBoard(list){ localStorage.setItem(LS_KEY, JSON.stringify(list)); }

  function makeFake(selected) {
    const name   = pick(NAMES);
    const seed   = `${name}-${Date.now()}-${Math.random()}`;
    const amount = roundNice(Math.random()*7000); 
    return {
      name,
      avatar: `https://i.pravatar.cc/80?u=${encodeURIComponent(seed)}`,
      amount,
      betLabel: ``,
      icon: selected?.icon || "",
      ts: Date.now()
    };
  }

  function renderTopWinners(selected){
    const listEl = document.getElementById(LIST_ID);
    if(!listEl) return;

    const real = loadBoard().sort((a,b)=>(b.amount-a.amount) || (b.ts-a.ts));
    const need = Math.max(0, MAX_ROWS - real.length);
    const fakes = Array.from({length: need}, () => makeFake(selected));
    const data = [...real, ...fakes]
      .sort((a,b)=>(b.amount-a.amount) || (b.ts-a.ts))
      .slice(0, MAX_ROWS);

    listEl.innerHTML = "";
    const medalByRank = ["🥇","🥈","🥉"];

    data.forEach((row, idx) => {
      const card = document.createElement("div");
      card.className = `top-winner-card rank-${idx+1} ${idx===0 ? "pulse" : ""}`;
      card.innerHTML = `
        <div class="top-winner-rank">
          <span>#${idx+1}</span>
          <span class="medal">${medalByRank[idx]||""}</span>
        </div>
        <img class="top-winner-avatar" src="${row.avatar}" alt="">
        <div class="top-winner-name">${row.name}</div>
        <div class="top-winner-meta">${row.icon||""} ${row.betLabel||""}</div>
        <div class="top-winner-amount">💎 ${fmt(row.amount)} </div>
      `;
      listEl.appendChild(card);
    });
  }

  function pushRealWin({ name, avatar, amount, betLabel, icon, ts }) {
    if (!name || !amount) return;
    const list = loadBoard();
    list.push({ name, avatar, amount: roundNice(amount), betLabel, icon, ts: ts||Date.now() });
    list.sort((a,b)=>(b.amount-a.amount)||(b.ts-a.ts));
    saveBoard(list);
  }

  // Public API
  window.TopWinnersReal = {
    add: pushRealWin,                        // thêm người thắng thật
    render: (selected)=>renderTopWinners(selected), // render, có thể truyền 'selected' của vòng hiện tại
    clear: () => { localStorage.removeItem(LS_KEY); renderTopWinners(); },
    renderRound: (selected)=>{ renderTopWinners(selected); } // alias dễ nhớ
  };

  document.addEventListener("DOMContentLoaded", ()=>renderTopWinners());
})();

</script>


<script>
/** ============= SAFE CACHE ============= **/
(function () {
  const BK_KEY = "__safeBackupV1";
  const TMP_KEY = "__safeRestoreV1";

  // Các khóa nên giữ lại khi dọn sâu (bạn có thể thêm/bớt)
  const EXPLICIT_KEEP = [
    "userName","userId","userAvatar","jwt",
    "betHistory","topWinnersV1",
    "balance","walletBalance","coin","coins",
    "jackpotAmount","jackpot","jackpot_ts",
  ];
  const KEEP_PREFIXES = [
    "user_","profile_","bets_","history_","code_","token_","jackpot_","game_"
  ];

  const shouldKeep = (k) =>
    EXPLICIT_KEEP.includes(k) || KEEP_PREFIXES.some(p => k.startsWith(p));

  function backupLocal() {
    const data = {};
    for (let i = 0; i < localStorage.length; i++) {
      const k = localStorage.key(i);
      data[k] = localStorage.getItem(k);
    }
    return { ts: Date.now(), data };
  }

  function restoreLocal(payload) {
    if (!payload || !payload.data) return;
    Object.entries(payload.data).forEach(([k, v]) => {
      localStorage.setItem(k, v);
    });
  }

  async function clearCacheStorage() {
    if (!("caches" in window)) return;
    const names = await caches.keys();
    await Promise.all(names.map(n => caches.delete(n)));
  }

  async function unregisterSW() {
    if (!("serviceWorker" in navigator)) return;
    const regs = await navigator.serviceWorker.getRegistrations();
    await Promise.all(regs.map(r => r.unregister()));
  }

  // DỌN NHANH: chỉ xóa Cache Storage + sessionStorage
  async function quickClean({ alsoUnregisterSW = false } = {}) {
    await clearCacheStorage();
    if (alsoUnregisterSW) await unregisterSW();
    // Giữ session backup, xóa phần còn lại
    const keep = new Set([BK_KEY, TMP_KEY]);
    const keys = [];
    for (let i = 0; i < sessionStorage.length; i++) keys.push(sessionStorage.key(i));
    keys.forEach(k => { if (!keep.has(k)) sessionStorage.removeItem(k); });
  }

  // DỌN SÂU AN TOÀN: giữ lại key quan trọng trong localStorage
  async function deepClean({ alsoUnregisterSW = false } = {}) {
    const backup = backupLocal(); // đề phòng
    sessionStorage.setItem(BK_KEY, JSON.stringify(backup));

    // Xóa localStorage trừ key quan trọng
    const lsKeys = [];
    for (let i = 0; i < localStorage.length; i++) lsKeys.push(localStorage.key(i));
    lsKeys.forEach(k => { if (!shouldKeep(k)) localStorage.removeItem(k); });

    // Xóa sessionStorage (trừ backup)
    const keep = new Set([BK_KEY, TMP_KEY]);
    const ssKeys = [];
    for (let i = 0; i < sessionStorage.length; i++) ssKeys.push(sessionStorage.key(i));
    ssKeys.forEach(k => { if (!keep.has(k)) sessionStorage.removeItem(k); });

    await clearCacheStorage();
    if (alsoUnregisterSW) await unregisterSW();
  }

  // TẢI LẠI AN TOÀN (giữ dữ liệu): backup -> reload -> restore
  function safeRefresh() {
    const backup = backupLocal();
    sessionStorage.setItem(BK_KEY, JSON.stringify(backup));
    sessionStorage.setItem(TMP_KEY, "1");
    location.reload();
  }

  // Gọi ở DOMContentLoaded để tự phục hồi sau khi safeRefresh()
  function maybeRestoreOnLoad() {
    try {
      if (sessionStorage.getItem(TMP_KEY) === "1") {
        const raw = sessionStorage.getItem(BK_KEY);
        if (raw) restoreLocal(JSON.parse(raw));
        sessionStorage.removeItem(TMP_KEY);
        // Gợi ý: cập nhật lại UI nếu có
        window.setUserInfo?.(
          localStorage.getItem("userName"),
          localStorage.getItem("userId"),
          localStorage.getItem("userAvatar")
        );
        window.renderBetHistory?.();
        window.TopWinnersReal?.renderRound?.();
      }
    } catch (e) {}
  }

  // Xuất/Nhập backup ra file (phòng khi bạn thật sự phải xóa “Site data” của trình duyệt)
  function exportBackup() {
    const payload = backupLocal();
    const blob = new Blob([JSON.stringify(payload, null, 2)], { type: "application/json" });
    const url = URL.createObjectURL(blob);
    const name = `backup-${new Date(payload.ts).toISOString().slice(0,19).replace(/[:T]/g,"-")}.json`;
    const a = Object.assign(document.createElement("a"), { href: url, download: name });
    document.body.appendChild(a); a.click(); a.remove(); URL.revokeObjectURL(url);
  }

  function importBackupFile(file) {
    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      reader.onerror = () => reject(reader.error);
      reader.onload = () => {
        try {
          const payload = JSON.parse(reader.result);
          restoreLocal(payload);
          resolve(payload);
        } catch (e) { reject(e); }
      };
      reader.readAsText(file);
    });
  }

  window.SafeCache = {
    quickClean, deepClean, safeRefresh,
    exportBackup, importBackupFile, maybeRestoreOnLoad
  };

  document.addEventListener("DOMContentLoaded", () => {
    // Tự phục hồi nếu vừa safeRefresh()
    SafeCache.maybeRestoreOnLoad();

    // Gắn nút nếu có
    document.getElementById("btnSafeClear")?.addEventListener("click", async () => {
      await SafeCache.quickClean();                // dọn nhanh
      alert("Đã xóa cache tạm thời và giữ dữ liệu người chơi.");
    });
    document.getElementById("btnSafeDeep")?.addEventListener("click", async () => {
      await SafeCache.deepClean();                 // dọn sâu an toàn
      alert("Đã dọn cache sâu (an toàn). Dữ liệu quan trọng vẫn được giữ.");
    });
    document.getElementById("btnSafeRefresh")?.addEventListener("click", () => {
      SafeCache.safeRefresh();                     // tải lại nhưng giữ data
    });
    document.getElementById("btnBackupExport")?.addEventListener("click", () => {
      SafeCache.exportBackup();                    // xuất file backup
    });
    document.getElementById("inputBackupImport")?.addEventListener("change", async (e) => {
      const f = e.target.files?.[0]; if (!f) return;
      try {
        await SafeCache.importBackupFile(f);
        alert("Phục hồi dữ liệu thành công!");
        window.setUserInfo?.(
          localStorage.getItem("userName"),
          localStorage.getItem("userId"),
          localStorage.getItem("userAvatar")
        );
        window.renderBetHistory?.();
        window.TopWinnersReal?.renderRound?.();
      } catch (err) {
        alert("File backup không hợp lệ.");
      } finally {
        e.target.value = "";
      }
    });
  });
})();

</script>

<script>
// Tạo mưa xu toàn màn hình trong 'durationMs'
function startCoinRain(durationMs = 1200){
  const fx = document.getElementById('jackpotEffect');
  if(!fx) return;
  const W = window.innerWidth;
  const N = Math.min(60, Math.floor(W / 20)); // mật độ xu

  // tạo xu rơi
  for(let i=0; i<N; i++){
    const c = document.createElement('div');
    c.className = 'rain-coin'; // đã có CSS trong file của bạn
    c.style.left = Math.random() * 100 + 'vw';
    c.style.animationDuration = (0.9 + Math.random()*0.8) + 's';
    c.style.animationDelay = (Math.random()*0.5) + 's';
    fx.appendChild(c);
    // dọn dẹp sau khi rơi xong
    setTimeout(() => c.remove(), 2200);
  }

  // thêm vài pháo hoa màu ở giữa
  for(let j=0; j<10; j++){
    const f = document.createElement('div');
    f.className = 'firework'; // đã có CSS trong file của bạn
    f.style.setProperty('--color', ['#ffd700','#ff5ea0','#00ffaa','#7bb3ff'][j%4]);
    f.style.left = (40 + Math.random()*20) + 'vw';
    f.style.top  = (35 + Math.random()*30) + 'vh';
    fx.appendChild(f);
    setTimeout(()=>f.remove(), 1200);
  }
}

// Kích hoạt tia sáng quét toàn màn
function runScreenSweep(){
  const t = document.getElementById('transitionFX');
  if(!t) return;
  t.classList.add('active');

  // reset animation bằng cách thay node (cho phép kích hoạt nhiều lần)
  const old = t.querySelector('.sweep');
  if(old){
    const n = old.cloneNode(true);
    old.replaceWith(n);
  }

  // tắt sau khi quét xong
  setTimeout(()=> t.classList.remove('active'), 900);
}
</script>

<script>
/** ========= AUTO BET CORE ========= **/
const AUTO_BET_LS_KEY = "autoBetV1";

const AutoBet = {
  enabled: false,
  roundsLeft: null, // null = vô hạn
  tpl: { "Chua":0,"Cải":0,"Ngô":0,"Rốt":0,"Mỳ":0,"Xiên":0,"Đùi":0,"Bò":0 }
};

// mở/đóng modal
const autoBetModal = document.getElementById("autoBetModal");
document.getElementById("openAutoBetBtn")?.addEventListener("click", openAutoBet);
document.getElementById("closeAutoBet")?.addEventListener("click", closeAutoBet);
document.getElementById("ab-save")?.addEventListener("click", saveAutoBet);
document.getElementById("ab-start")?.addEventListener("click", () => { AutoBet.enabled = true; persistAB(); syncABToUI(); });
document.getElementById("ab-stop")?.addEventListener("click", () => { AutoBet.enabled = false; AutoBet.roundsLeft = null; persistAB(); syncABToUI(); });

function openAutoBet() {
  // load cấu hình cũ
  try {
    const saved = JSON.parse(localStorage.getItem(AUTO_BET_LS_KEY)) || null;
    if (saved) {
      AutoBet.enabled = !!saved.enabled;
      AutoBet.roundsLeft = saved.roundsLeft ?? null;
      AutoBet.tpl = { ...AutoBet.tpl, ...(saved.tpl||{}) };
    }
  } catch(e){}
  syncABToUI();
  autoBetModal.style.display = "flex";
  requestAnimationFrame(()=>autoBetModal.classList.add("show"));
}

function closeAutoBet() {
  autoBetModal.classList.remove("show");
  autoBetModal.classList.add("hide");
  setTimeout(()=>{ autoBetModal.style.display="none"; autoBetModal.classList.remove("hide"); }, 300);
}

function syncABToUI() {
  // fill inputs
  for (const k of Object.keys(AutoBet.tpl)) {
    const el = document.getElementById("ab-" + k);
    if (el) el.value = Number(AutoBet.tpl[k]||0);
  }
  document.getElementById("ab-rounds").value = (AutoBet.roundsLeft??"");
  document.getElementById("ab-enabled").checked = !!AutoBet.enabled;

  const note = document.getElementById("ab-note");
  note.textContent = AutoBet.enabled
    ? `Đang bật. Sẽ tự đặt cược ở mốc 20s trước vòng quay. ${AutoBet.roundsLeft?`Còn ${AutoBet.roundsLeft} vòng.`:"(vô hạn)"}`
    : `Đang tắt. Nhấn "Bắt đầu" để bật.`;
}

function persistAB(){
  localStorage.setItem(AUTO_BET_LS_KEY, JSON.stringify({
    enabled: AutoBet.enabled,
    roundsLeft: AutoBet.roundsLeft,
    tpl: AutoBet.tpl
  }));
}

document.getElementById("ab-reset")?.addEventListener("click", resetAutoBetInputs);

function resetAutoBetInputs(){
  // đưa template về 0 và cập nhật input
  for (const k of Object.keys(AutoBet.tpl)) {
    AutoBet.tpl[k] = 0;
    const el = document.getElementById("ab-" + k);
    if (el) el.value = 0;
  }
  persistAB();   // lưu lại vào localStorage
  syncABToUI();  // cập nhật ghi chú trạng thái
  // (tuỳ chọn) báo nhanh
  const note = document.getElementById("ab-note");
  if (note) note.textContent = "Đã reset tất cả cửa về 0.";
}

function saveAutoBet() {
  // đọc về từ inputs
  for (const k of Object.keys(AutoBet.tpl)) {
    const v = parseInt(document.getElementById("ab-" + k)?.value || "0", 10);
    AutoBet.tpl[k] = Math.max(0, isNaN(v)?0:v);
  }
  const r = document.getElementById("ab-rounds").value.trim();
  AutoBet.roundsLeft = r === "" ? null : Math.max(1, parseInt(r,10)||1);
  AutoBet.enabled = document.getElementById("ab-enabled").checked;
  persistAB();
  syncABToUI();
}

/** Đặt cược 1 lần theo cấu hình (thật, trừ xu & hiển thị đúng UI) */
function applyAutoBetOnce(){
  if (!AutoBet.enabled) return;

  // 1) Tính tổng cần cho template hiện tại
  let need = 0;
  for (const [name, amt] of Object.entries(AutoBet.tpl)) {
    need += Math.max(0, Number(amt)||0);
  }
  if (need <= 0) return; // không cấu hình gì thì bỏ

  // 2) Kiểm tra số dư bắt buộc đủ cho TẤT CẢ cửa
  if (typeof balance !== "number") return;
  if (balance < need){
    // CẢNH BÁO & BỎ QUA PHIÊN NÀY (không đặt, không trừ rounds)
    const note = document.getElementById("ab-note");
    if (note){
      const needStr = need.toLocaleString();
      const balStr  = balance.toLocaleString();
      note.textContent = `⚠️ Số dư không đủ để Auto Bet (cần ${needStr}, còn ${balStr}). Đã bỏ qua phiên này.`;
      note.classList.add("ab-warn-pulse");
      setTimeout(()=> note.classList.remove("ab-warn-pulse"), 1500);
    }
    // rung ví/số dư nếu có phần tử hiển thị
    const walletEl = document.querySelector(".balance, #balance, .wallet, .user-balance");
    if (walletEl){
      walletEl.classList.add("shake-x");
      setTimeout(()=> walletEl.classList.remove("shake-x"), 600);
    }
    return;
  }

  // 3) Đặt cược thật (đủ tiền cho toàn bộ template)
  for (const [name, amtRaw] of Object.entries(AutoBet.tpl)) {
    const amt = Math.max(0, Number(amtRaw)||0);
    if (amt === 0) continue;
    if (!bets[name]) bets[name] = 0;
    bets[name] = Number(bets[name]) + amt;
    balance -= amt; // trừ xu thật
  }

  // 4) Cập nhật UI + lưu
  try {
    Object.keys(bets).forEach(n=>{
      const b = document.querySelector(`.bet-box[data-name="${n}"] .bet-amount`);
      if (b) b.textContent = Number(bets[n]||0);
    });
    document.querySelectorAll(".door").forEach(door=>{
      const n = door.dataset.name;
      const betDisplay = door.querySelector(".bet-display");
      if (betDisplay) betDisplay.textContent = Number(bets[n]||0);
    });
  } catch(e){}

  if (typeof updateBalanceDisplay === "function") updateBalanceDisplay();
  if (typeof updateBetDisplay === "function")   updateBetDisplay();
  if (typeof saveBets === "function")           saveBets();

  // 5) Giảm số vòng CHỈ KHI đã đặt thành công
  if (AutoBet.roundsLeft && AutoBet.roundsLeft > 0) {
    AutoBet.roundsLeft -= 1;
    if (AutoBet.roundsLeft <= 0) {
      AutoBet.enabled = false;
    }
    persistAB();
    syncABToUI();
  }
}

</script>

<script>
// 1) Đồng bộ trạng thái nút theo AutoBet.enabled
function setAutoBetButtonState(){
  const btn = document.getElementById('openAutoBetBtn');
  if (!btn) return;
  btn.classList.toggle('is-on', !!AutoBet.enabled);

  // Đổi label hiển thị
  const label = btn.querySelector('.ab-launch__label');
  if (label){
    if (AutoBet.enabled){
      const rounds = (AutoBet.roundsLeft ?? null);
      label.textContent = rounds ? `Auto Bet • ON (${rounds})` : 'Auto Bet • ON';
    } else {
      label.textContent = 'Auto Bet';
    }
  }
}

// 2) Gắn ripple khi bấm
document.getElementById('openAutoBetBtn')?.addEventListener('click', function(e){
  const r = this.getBoundingClientRect();
  const x = e.clientX - r.left, y = e.clientY - r.top;
  const ripple = document.createElement('span');
  ripple.className = 'ab-ripple';
  ripple.style.left = x + 'px';
  ripple.style.top  = y + 'px';
  this.appendChild(ripple);
  setTimeout(()=> ripple.remove(), 450);
});

// 3) Gọi hàm này ở các điểm thay đổi trạng thái
//    - ngay sau open/close modal sync
const _syncABToUI = (typeof syncABToUI === 'function') ? syncABToUI : null;
window.syncABToUI = function(){
  if (_syncABToUI) _syncABToUI(); // giữ nguyên logic cũ của bạn
  setAutoBetButtonState();        // cập nhật nút đẹp
};

//    - sau Start/Stop/Save (nếu bạn có listener riêng thì chỉ cần đảm bảo gọi syncABToUI())
document.getElementById("ab-start")?.addEventListener("click", ()=> setTimeout(setAutoBetButtonState, 0));
document.getElementById("ab-stop") ?.addEventListener("click", ()=> setTimeout(setAutoBetButtonState, 0));
document.getElementById("ab-save") ?.addEventListener("click", ()=> setTimeout(setAutoBetButtonState, 0));

// 4) Khởi tạo trạng thái khi load
document.addEventListener('DOMContentLoaded', setAutoBetButtonState);
</script>




<div id="jackpotEffect"></div>
<div id="transitionFX" aria-hidden="true">
  <div class="sweep"></div>
</div>


<div id="customCursor" aria-hidden="true">
  <!-- Joystick (mặc định) -->
  <svg class="c-joy" viewBox="0 0 64 64" fill="none">
    <ellipse cx="32" cy="45" rx="22" ry="8" fill="#0b1220"/>
    <ellipse cx="32" cy="45" rx="22" ry="8" fill="url(#g1)" opacity=".6"/>
    <defs>
      <radialGradient id="g1" cx="0" cy="0" r="1"
        gradientTransform="translate(32 45) rotate(90) scale(10 22)">
        <stop offset="0" stop-color="#00d1ff" stop-opacity=".65"/>
        <stop offset="1" stop-color="#001018" stop-opacity="0"/>
      </radialGradient>
    </defs>
   <rect x="30" y="20" width="4" height="22" rx="2" fill="#1f2a44"/>
    <rect x="30" y="20" width="4" height="22" rx="2" fill="#5ee7ff" opacity=".2"/>
    <circle cx="32" cy="16" r="7" fill="#ff2d55"/>
    <circle cx="32" cy="16" r="7" fill="url(#glowRed)"/>
    <defs>
      <radialGradient id="glowRed" cx="0" cy="0" r="1"
        gradientTransform="translate(32 16) scale(8)">
        <stop offset="0" stop-color="#ff748d"/>
        <stop offset=".55" stop-color="#ff2d55"/>
        <stop offset="1" stop-color="#ff2d55" stop-opacity="0"/>
      </radialGradient>
    </defs>
    <ellipse cx="32" cy="45" rx="18" ry="5" stroke="#00eaff" stroke-width="1.5" opacity=".55"/>
  </svg>

  <!-- Crosshair (chỉ hiện khi hover .door) -->
  <svg class="c-cross" viewBox="0 0 64 64" fill="none">
    <circle cx="32" cy="32" r="12" stroke="#00fff6" stroke-width="2"/>
    <circle cx="32" cy="32" r="3"  fill="#00fff6"/>
    <g opacity=".9">
      <line x1="32" y1="6"  x2="32" y2="18" stroke="#00eaff" stroke-width="2"/>
      <line x1="32" y1="46" x2="32" y2="58" stroke="#00eaff" stroke-width="2"/>
      <line x1="6"  y1="32" x2="18" y2="32" stroke="#00eaff" stroke-width="2"/>
      <line x1="46" y1="32" x2="58" y2="32" stroke="#00eaff" stroke-width="2"/>
    </g>
    <!-- Glow -->
    <filter id="fglow" x="-50%" y="-50%" width="200%" height="200%">
      <feGaussianBlur stdDeviation="2.5" result="glow"/>
      <feMerge><feMergeNode in="glow"/><feMergeNode in="SourceGraphic"/></feMerge>
    </filter>
    <g filter="url(#fglow)"></g>
  </svg>
</div>


<script>
(function(){
  const c = document.getElementById('customCursor');
  document.addEventListener('mousemove', e => {
    c.style.left = e.pageX + 'px';
    c.style.top  = e.pageY + 'px';
  }, { passive:true });

  const pressOn = () => c.classList.add('is-press');
  const pressOff= () => c.classList.remove('is-press');
  window.addEventListener('mousedown', pressOn,  { passive:true });
  window.addEventListener('mouseup',   pressOff, { passive:true });
  window.addEventListener('mouseleave',pressOff, { passive:true });

  window.addEventListener('touchstart', (e) => {
    const t=e.touches[0]; if(!t) return;
    c.style.left=t.pageX+'px'; c.style.top=t.pageY+'px';
    pressOn(); setTimeout(pressOff,120);
  }, { passive:true });
})();
</script>


<script>
(function(){
  const modal  = document.getElementById('historyBetModal');
  const close1 = document.getElementById('closeHistoryBtn');
  const close2 = document.getElementById('hbCloseBottom');
  const listEl = document.getElementById('betHistory');
  const chipAll= document.getElementById('hbAll');
  const chipWin= document.getElementById('hbWin');
  const chipLose=document.getElementById('hbLose');
  const search = document.getElementById('hbSearch');

  function openModal(){ modal.classList.add('show'); document.body.classList.add('modal-open'); }
  function closeModal(){ modal.classList.remove('show'); document.body.classList.remove('modal-open'); }
  // Gắn vào nút mở modal của bạn nếu có:
  // document.getElementById('openHistoryBtn')?.addEventListener('click', openModal);



  // Expose nếu cần gọi mở/đóng từ nơi khác:
  window.openHistoryBetModal = openModal;
  window.closeHistoryBetModal = closeModal;
})();
</script>



        
<script>
/* Map tên cửa/sự kiện -> icon (tuỳ bạn chỉnh sửa/đủ bộ) */
const BET_ICON_MAP = {
  salad:'🥗', pizza:'🍕',
  'Bò':'🥩', 'Đùi':'🍖', 'Xiên':'🍢', 'Mỳ':'🌭',
  'Chua':'🍅', 'Cải':'🥦', 'Ngô':'🌽', 'Rốt':'🥕'
};
const DEFAULT_ICON = '🎯';

function getIcon(name){
  const key = String(name||'').trim();
  if (!key) return DEFAULT_ICON;
  const lower = key.toLowerCase();
  return BET_ICON_MAP[key] ?? BET_ICON_MAP[lower] ?? DEFAULT_ICON;
}

/**
 * Append 1 log lịch sử (phiên + chip icon)
 * @param {Object} cfg
 *  - container: element #betHistory
 *  - time: "HH:mm:ss"
 *  - spin: số phiên (hiển thị dạng badge)
 *  - bets: { [tenCua]: soXu }
 *  - totalBet: tổng cược
 *  - outcome: tên cửa trúng hoặc 'salad'/'pizza'
 *  - icon: icon tổng (nếu muốn khác outcome)
 *  - payout: số xu nhận (để xác định win/lose)
 */
function appendBetLog({container, time, spin, bets, totalBet, outcome, icon, payout=null}){
  const fmt = n => Number(n||0).toLocaleString('vi-VN');

  // chips icon theo bets
  const chips = Object.entries(bets||{})
    .filter(([,v]) => Number(v) > 0)
    .map(([k,v]) => {
      const ico = getIcon(k);
      const title = `${k}: ${fmt(v)} xu`;
      return `<span class="chip" title="${title}">
                <span class="ico">${ico}</span><b>${fmt(v)}</b>
              </span>`;
    })
    .join('') || '<span style="opacity:.7">—</span>';

  // kết quả icon
  const outcomeIcon = getIcon(outcome);
  const statusCls = payout==null ? '' : (Number(payout)>0 ? 'win' : 'lose');
  const statusTxt = payout==null ? '' : (Number(payout)>0 ? '🏆 Thắng' : '❌ Thua');

  const html = `
  <div class="bet-log">
    <div class="log-ico">${icon || outcomeIcon || DEFAULT_ICON}</div>

    <div class="log-main">
      <div class="log-row">
        <span class="log-time" title="Thời gian">${time}</span>
        ${spin!=null ? `<span class="log-spin badge" title="Phiên">#${spin}</span>` : ''}
      </div>
      <div class="log-row log-bets" title="Cửa đã đặt">
      ${chips}
      </div>
    </div>

    <div class="log-outcome">
      <div class="log-result ${statusCls}">
        ${statusTxt} ${outcome ? `— ${outcome}💎` : ''}
      </div>
      <div class="log-sum">🎲 Tổng cược: <b>${fmt(totalBet||0)} 💎</b></div>
    </div>
  </div>`;

  container.insertAdjacentHTML('afterbegin', html);
}
</script>



<script>
// ===== Config nhanh =====
const TX5_FEE_RATE = 0.01;          // 1% phí
const TX5_MIN = 1;                  // tối thiểu 1 xu
const TX5_MAX = 1_000_000_000;      // tuỳ bạn
// đọc số dư người dùng (viết lại nếu có backend)
function getUserBalance(){ return window.USER_BALANCE ?? 0; }
function setUserBalance(v){ window.USER_BALANCE = v; }

// ===== Mở/đóng modal =====
function openTransferModal(prefill = { to:"", amount:0, note:"" }) {
  const m = document.getElementById("transferModal");
  if (!m) return;
  m.classList.add("show"); m.setAttribute("aria-hidden","false");

  // reset step
  showStep(1);
  // fill
  qs("#tx5To").value = prefill.to || "";
  qs("#tx5Amount").value = prefill.amount ? String(prefill.amount) : "";
  qs("#tx5Note").value = prefill.note || "";

  // set avatar
  updateAvatar(qs("#tx5To").value);
  // paint stats
  paintStats();
}
function closeTransferModal(){
  const m = document.getElementById("transferModal");
  if (!m) return;
  m.classList.remove("show"); m.setAttribute("aria-hidden","true");
}
// close handlers
document.addEventListener("click", (e)=>{
  if(e.target.matches("[data-close-tx]")) closeTransferModal();
});

// ===== DOM Helpers =====
function qs(sel){ return document.querySelector(sel); }
function qn(n){ const v = Number(String(n).replace(/[^\d]/g,"")); return Number.isFinite(v) ? v : 0; }
function fmt(n){ return (Math.round(n)||0).toLocaleString("vi-VN"); }
function esc(s){ return String(s||"").replace(/[&<>"']/g, m=>({ "&":"&amp;","<":"&lt;",">":"&gt;","\"":"&quot;","'":"&#39;" }[m])); }
function initial(s){ s=String(s||"").trim(); return s? s[0].toUpperCase():"?"; }

// ===== UI Actions =====
function showStep(n){
  qs("#tx5Step1").hidden = n!==1;
  qs("#tx5Step2").hidden = n!==2;
  qs("#tx5StepDone").hidden = n!==3;
}
function updateAvatar(name){
  qs("#tx5Av b").textContent = initial(name);
}
function paintStats(){
  const bal = getUserBalance();
  const amt = qn(qs("#tx5Amount").value);
  const fee = Math.floor(amt * TX5_FEE_RATE);
  const after = bal - amt - fee;
  qs("#tx5Bal").textContent = fmt(bal);
  qs("#tx5Fee").textContent = fmt(fee);
  qs("#tx5After").textContent = fmt(after);
}
function validateStep1(){
  let ok = true;
  const to = qs("#tx5To").value.trim();
  const amt = qn(qs("#tx5Amount").value);
  const bal = getUserBalance();

  qs("#tx5ToErr").textContent = "";
  qs("#tx5AmountErr").textContent = "";

  if (to.length < 2) { qs("#tx5ToErr").textContent = "Tên/ID quá ngắn."; ok=false; }
  if (amt < TX5_MIN) { qs("#tx5AmountErr").textContent = `Tối thiểu ${fmt(TX5_MIN)} xu.`; ok=false; }
  if (amt > TX5_MAX) { qs("#tx5AmountErr").textContent = `Tối đa ${fmt(TX5_MAX)} xu.`; ok=false; }

  const fee = Math.floor(amt * TX5_FEE_RATE);
  if (amt + fee > bal){ qs("#tx5AmountErr").textContent = "Số dư không đủ."; ok=false; }

  return ok;
}
function fillReview(){
  const to = esc(qs("#tx5To").value.trim());
  const amt = qn(qs("#tx5Amount").value);
  const fee = Math.floor(amt * TX5_FEE_RATE);
  const after = getUserBalance() - amt - fee;
  const note = esc(qs("#tx5Note").value.trim()) || "—";

  qs("#tx5RvTo").innerHTML = `<span class="tx5-av"><b>${initial(to)}</b></span> ${to}`;
  qs("#tx5RvAmount").textContent = fmt(amt) + " xu";
  qs("#tx5RvFee").textContent = fmt(fee) + " xu";
  qs("#tx5RvAfter").textContent = fmt(after) + " xu";
  qs("#tx5RvNote").textContent = note;
}

// ===== Events =====
qs("#tx5To")?.addEventListener("input", e=> updateAvatar(e.target.value));
qs("#tx5Amount")?.addEventListener("input", paintStats);
document.querySelectorAll(".tx5-chip")?.forEach(b=>{
  b.addEventListener("click", ()=>{
    const inp = qs("#tx5Amount");
    const bal = getUserBalance();
    if (b.dataset.add){
      const cur = qn(inp.value);
      inp.value = String(cur + Number(b.dataset.add));
    } else if (b.dataset.max){
      // Max = số dư trừ 1% (xấp xỉ) → giải phương trình amt + 1%amt = bal
      const maxAmt = Math.floor(bal / (1 + TX5_FEE_RATE));
      inp.value = String(maxAmt);
    }
    paintStats();
  });
});

// Step buttons
qs("#tx5ReviewBtn")?.addEventListener("click", ()=>{
  if (!validateStep1()) return;
  fillReview();
  showStep(2);
});
qs("#tx5BackBtn")?.addEventListener("click", ()=> showStep(1));

// ===== Gửi chuyển (hook backend) =====
qs("#tx5SubmitBtn")?.addEventListener("click", async ()=>{
  qs("#tx5SubmitErr").textContent = "";
  const to = qs("#tx5To").value.trim();
  const amount = qn(qs("#tx5Amount").value);
  const note = qs("#tx5Note").value.trim();
  try{
    // Trừ trước ở UI (tuỳ bạn — có thể để backend quyết)
    const fee = Math.floor(amount * TX5_FEE_RATE);
    const newBal = getUserBalance() - amount - fee;
    if (newBal < 0) throw new Error("Số dư không đủ.");

    // GỌI API THẬT TẠI ĐÂY
    const res = await sendTransferAPI({ to, amount, note, fee });

    // Cập nhật số dư UI
    setUserBalance(newBal);

    // Lưu lịch sử local (để hiện ngay, vẫn nên lấy từ DB khi reload)
    appendLocalTransfer({
      id: res.id || genTxId(),
      status: "out",
      amount,
      to,
      time: new Date().toLocaleString("vi-VN"),
      note
    });

    // Success
    qs("#tx5TxId").textContent = res.id || "TX-" + Date.now();
    showStep(3);
    // bạn có thể gọi renderTransferHistory() nếu modal lịch sử đang dùng
  }catch(err){
    qs("#tx5SubmitErr").textContent = err?.message || "Có lỗi xảy ra. Vui lòng thử lại.";
  }
});

// Copy mã
qs("#tx5CopyId")?.addEventListener("click", ()=>{
  const id = qs("#tx5TxId").textContent.trim();
  navigator.clipboard.writeText(id);
});

// ===== Mock API / Helpers =====
async function sendTransferAPI(payload){
  // TODO: thay bằng fetch tới backend của bạn.
  // ví dụ:
  // const r = await fetch('/api/transfer', {method:'POST', headers:{'Content-Type':'application/json', 'Authorization':'Bearer ...'}, body: JSON.stringify(payload)});
  // if(!r.ok) throw new Error(await r.text());
  // return await r.json();
  await new Promise(r=>setTimeout(r, 450)); // giả lập delay
  return { ok:true, id: genTxId() };
}
function genTxId(){ return "TX-" + Math.random().toString(36).slice(2,8).toUpperCase() + "-" + Date.now().toString().slice(-6); }

function appendLocalTransfer(item){
  const key = "transferHistory";
  const arr = JSON.parse(localStorage.getItem(key)) || [];
  arr.push(item);
  localStorage.setItem(key, JSON.stringify(arr));
}

// ===== Public helper để mở từ nút "Chuyển xu" bất kỳ =====
window.openTransferModal = openTransferModal;
window.closeTransferModal = closeTransferModal;
</script>







</body>
</html>